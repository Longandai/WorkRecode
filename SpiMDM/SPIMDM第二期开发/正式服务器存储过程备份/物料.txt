create or replace package body material is
  --物料新建批导，相当于申请
  procedure prc_material_apply_import(in_action_batch_id in varchar2,
                                      in_business_type   in varchar2,
                                      --in_column_name       in varchar2,
                                      --in_transfer_sap_flag in varchar2,
                                      retcode out varchar2,
                                      retmsg  out varchar2) is
  
  begin
    retcode := 'S';
    retmsg  := 'OK!';
    if in_business_type = 'BOMListResult' then
      prc_mtl_apply_all_trans(in_action_batch_id,
                              'CreateMtlFromHaierMDM',
                              '1',
                              'ZH',
                              retcode,
                              retmsg);
      if retcode = 'E' then
        return;
      end if;
      prc_mtl_apply_all_trans(in_action_batch_id,
                              'ExtendPlant',
                              '0', --特殊处理
                              'ZH',
                              retcode,
                              retmsg);
    elsif in_business_type in ('CreateMtlFromHaierMDM',
                               'CreateMtlFromOEM',
                               'CreateMtlFromTradeCompany',
                               'ExtendPlant') then
      prc_mtl_apply_all_trans(in_action_batch_id,
                              in_business_type,
                              '1',
                              'ZH',
                              retcode,
                              retmsg);
      /*elsif in_business_type = 'BOMList' then
      --通过BOM清单批导才自动导出并填充批导模板
      null;*/
    end if;
  exception
    when others then
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_material_apply_import:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_material_apply_import;
  --物料的批量修改，暂时包括单字段批量修改
  procedure prc_material_import(in_action_batch_id in varchar2,
                                in_table_name      in varchar2,
                                in_column_name     in varchar2,
                                in_language        in varchar2,
                                retcode            out varchar2,
                                retmsg             out varchar2) is
    lcl_count            number := 0;
    lcl_rowid            varchar2(20);
    lcl_plant_id         varchar2(20);
    lcl_hm_mtl_general   hm_mtl_general%rowtype;
    lcl_hm_mtl_plant     hm_mtl_plant%rowtype;
    lcl_hm_mtl_desc_data hm_mtl_desc_data%rowtype;
    lcl_hm_mtl_hgms      hm_mtl_hgms%rowtype;
    lcl_cotinue_exception exception;
    lcl_retmsg        varchar2(2000);
    lcl_rows_finish   number := 0;
    lcl_rows          number := 0;
    lcl_count2        number := 0;
    lcl_product_group varchar2(20);
    /*lcl_PLAN_SPECIALITY  varchar2(20);
    IS_FUNCTION_PART     varchar2(20);*/
    lcl_flag           varchar2(2);
    lcl_part_family    varchar2(20);
    lcl_mdc_flag       number;
    lcl_displm_flag    number;
    lcl_plm_Plant      number;
    lcl_plan_s_buffur  varchar2(2); --暂存计划特性
    lcl_is_func_buffur varchar2(2); --暂存是否功能件
  begin
    if in_table_name = 'HM_MTL_GENERAL' then
      for cur_row in (select *
                        from hm_mtl_general_imp a
                       where a.action_batch_id = in_action_batch_id) loop
        begin
          lcl_rows           := lcl_rows + 1;
          lcl_count          := 0;
          lcl_hm_mtl_general := cur_row;
          lcl_count2         := 0;
          lcl_flag           := '0';
          lcl_plan_s_buffur  := 'N'; --初始化为N
          lcl_is_func_buffur := 'N'; --初始化为N
          --编码是否存在
          select count(*),
                 max(row_id),
                 max(product_group),
                 max(part_family)
            into lcl_count, lcl_rowid, lcl_product_group, lcl_part_family
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_general.material_code;
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part  code ' ||
                            lcl_hm_mtl_general.material_code ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
          --看看物料在否在权限范围内
          if lcl_mdc_flag is null then
            select count(*)
              into lcl_mdc_flag
              from up_org_user          a,
                   up_org_businessrole  b,
                   up_org_user_busirole c
             where b.role_name = 'MDCMaterial'
               and c.role_id = b.role_id
               and a.user_id = c.user_id
               and a.user_account = lcl_hm_mtl_general.created_by;
          end if;
        
          if lcl_mdc_flag = 1 then
            --MDC 权限可以任意修改
            null;
          else
            --不是MDC，要权限校验
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_role_splits_person a
             where a.codevalue = lcl_product_group
               and a.delete_flag = '0'
               and a.kindvalue = 'ProductGroup'
               and a.org_role = 'plmPlantManger'
               and a.psn_account = lcl_hm_mtl_general.created_by;
            lcl_count2 := 0;
            select count(*)
              into lcl_count2
              from hm_role_splits_person a,
                   hm_mtl_general        b,
                   hm_mtl_plant          c
             where a.codevalue = c.plant_code
               and c.delete_flag = '0'
               and c.material_id = b.row_id
               and a.delete_flag = '0'
               and a.kindvalue = 'PlantCode'
               and a.org_role = 'disPlmPlantManger'
               and a.psn_account = lcl_hm_mtl_general.created_by
               and b.row_id = lcl_rowid;
            if lcl_count = 0 and lcl_count2 = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              '  is not in your limits!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --add by yuany 2014-02-27 更新是必填项不可置空
          if instr(in_column_name, 'MATERIAL_DESCRITION') > 0 then
            if lcl_hm_mtl_general.material_descrition is null then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，备件英文名称为必填项，不可为空！';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ',material description can not be null !';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          if instr(in_column_name, 'MIN_SHIP_UNIT') > 0 then
            if lcl_hm_mtl_general.min_ship_unit is null then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，最小发货单位为必填项，不可为空！';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ',Min Ship Unit can not be null !';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          if instr(in_column_name, 'OLD_MATERIAL_NUMBER') > 0 then
            if lcl_hm_mtl_general.old_material_number is null then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，原厂备件号为必填项，不可为空！';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ',Factory Part Code can not be null !';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
        
          --针对每一个codelist进行校验(产品大类B采购状态为必填项，不可为null）
          if instr(in_column_name, 'PRODUCT_GROUP_THREE') > 0 then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_fnd_values a
             where a.delete_flag = '0'
               and a.value = lcl_hm_mtl_general.product_group_three
               and a.value_set_id = 'ProductGroupTSP';
            if lcl_hm_mtl_general.product_group_three is null or
               lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，TSP大类' ||
                              lcl_hm_mtl_general.product_group_three ||
                              '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', product group B (forhgms) ' ||
                              lcl_hm_mtl_general.product_group_three ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --采购状态
          if instr(in_column_name, 'PURCHASE_STAUTS') > 0 then
          
            if lcl_hm_mtl_general.purchase_stauts is null or
               lcl_hm_mtl_general.purchase_stauts not in ('0', '1') then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，采购状态' || lcl_hm_mtl_general.purchase_stauts ||
                              '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', Purchase Status ' ||
                              lcl_hm_mtl_general.purchase_stauts ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --判断是否空运是否是有效的字段（*）
          if instr(in_column_name, 'BY_AIR') > 0 then
          
            if lcl_hm_mtl_general.by_air not in ('0', '1') then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，是否空运' || lcl_hm_mtl_general.by_air ||
                              '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', By Air ' || lcl_hm_mtl_general.by_air ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          ---ccijianyin
          if instr(in_column_name, 'CCI') > 0 then
          
            if lcl_hm_mtl_general.cci not in ('0', '1') then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，是否商检' || lcl_hm_mtl_general.cci || '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code || ', CCI' ||
                              lcl_hm_mtl_general.cci ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --计划特性和功能键 20140415 张登峰让加 要放在组节点前边
          if instr(in_column_name, 'PLAN_SPECIALITY') > 0 then
          
            if lcl_hm_mtl_general.PLAN_SPECIALITY not in ('0', '1') then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，计划特性' || lcl_hm_mtl_general.PLAN_SPECIALITY ||
                              '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', PLAN_SPECIALITY' ||
                              lcl_hm_mtl_general.PLAN_SPECIALITY ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
            lcl_plan_s_buffur := lcl_hm_mtl_general.PLAN_SPECIALITY;
          end if;
          ---功能建
          if instr(in_column_name, 'IS_FUNCTION_PART') > 0 then
          
            if lcl_hm_mtl_general.IS_FUNCTION_PART not in ('0', '1') then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，是否功能键' ||
                              lcl_hm_mtl_general.IS_FUNCTION_PART || '不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', IS_FUNCTION_PART' ||
                              lcl_hm_mtl_general.IS_FUNCTION_PART ||
                              ' does not exists! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
            lcl_is_func_buffur := lcl_hm_mtl_general.IS_FUNCTION_PART;
          end if;
          --判断备件族和备件族节点
          if instr(in_column_name, 'PART_FAMILY') > 0 or
             instr(in_column_name, 'PART_FAMILY_DIV') > 0 then
          
            lcl_hm_mtl_general.product_group := lcl_product_group;
            if instr(in_column_name, 'PART_FAMILY') > 0 and
               instr(in_column_name, 'PART_FAMILY_DIV') = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，修改备件族节点时必须修改备件族名称';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', modify family Group must also modify part family';
              end if;
              raise lcl_cotinue_exception;
            end if;
            --备件族节点不变，只修改族/细分
            if regexp_instr(in_column_name, 'PART_FAMILY$|PART_FAMILY\|') = 0 and
               instr(in_column_name, 'PART_FAMILY_DIV') > 0 then
              lcl_hm_mtl_general.part_family := lcl_part_family;
            end if;
            lcl_flag := '1'; --备件族相关修改标记
            material.prc_part_family_check_general(lcl_hm_mtl_general,
                                                   in_language,
                                                   lcl_hm_mtl_general.plan_speciality,
                                                   lcl_hm_mtl_general.is_function_part,
                                                   retcode,
                                                   lcl_retmsg);
            if lcl_plan_s_buffur <> 'N' then
              lcl_hm_mtl_general.plan_speciality := lcl_plan_s_buffur;
            end if;
            if lcl_is_func_buffur <> 'N' then
              lcl_hm_mtl_general.is_function_part := lcl_is_func_buffur;
            end if;
            if retcode = 'E' then
              raise lcl_cotinue_exception;
            end if;
          
          end if;
          ---20131227 xuky 增加原厂料号等字段的特殊字符校验
          if instr(in_column_name, 'OLD_MATERIAL_NUMBER') > 0 then
          
            if lcl_hm_mtl_general.old_material_number is null then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，原厂料号' || '不能为空!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', factory part code' || ' can''t be empty! ';
              end if;
              raise lcl_cotinue_exception;
            end if;
            comm_util.prc_special_char_check(lcl_hm_mtl_general.old_material_number,
                                             in_language,
                                             retcode,
                                             lcl_retmsg);
            if retcode = 'E' then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_general.material_code ||
                              '，原厂料号' || lcl_retmsg;
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_general.material_code ||
                              ', factory part code' ||
                              lcl_hm_mtl_general.old_material_number ||
                              lcl_retmsg;
              end if;
              raise lcl_cotinue_exception;
            end if;
            --增加校验原厂料号和工厂的唯一性校验2014-01-28
            prc_mtl_old_mtlnumber_plant('viewBase',
                                        in_language,
                                        lcl_rowid,
                                        lcl_hm_mtl_general.old_material_number,
                                        '',
                                        retcode,
                                        retmsg);
            if retcode = 'E' then
              raise lcl_cotinue_exception;
            end if;
          
          end if;
        
          --其他校验，以后补充
        
          --首先记历史
        
          insert into hm_mtl_general_his
            select * from hm_mtl_general a where a.row_id = lcl_rowid;
          if in_column_name is not null then
            -- 针对单字段的批导
            update hm_mtl_general
               set OLD_MATERIAL_NUMBER       = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'OLD_MATERIAL_NUMBER')),
                                                      1,
                                                      lcl_hm_mtl_general.OLD_MATERIAL_NUMBER,
                                                      OLD_MATERIAL_NUMBER),
                   MATERIAL_DESCRITION       = DECODE(SIGN(regexp_instr(in_column_name,
                                                                        'MATERIAL_DESCRITION$|MATERIAL_DESCRITION\|')),
                                                      1,
                                                      lcl_hm_mtl_general.MATERIAL_DESCRITION,
                                                      MATERIAL_DESCRITION),
                   MATERIAL_DESCRITION_LOCAL = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'MATERIAL_DESCRITION_LOCAL')),
                                                      1,
                                                      lcl_hm_mtl_general.MATERIAL_DESCRITION_LOCAL,
                                                      MATERIAL_DESCRITION_LOCAL),
                   PRODUCT_GROUP_THREE       = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'PRODUCT_GROUP_THREE')),
                                                      1,
                                                      lcl_hm_mtl_general.PRODUCT_GROUP_THREE,
                                                      PRODUCT_GROUP_THREE),
                   PART_FAMILY               = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'PART_FAMILY')),
                                                      1,
                                                      lcl_hm_mtl_general.PART_FAMILY,
                                                      PART_FAMILY),
                   PART_FAMILY_DIV           = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'PART_FAMILY_DIV')),
                                                      1,
                                                      lcl_hm_mtl_general.PART_FAMILY_DIV,
                                                      PART_FAMILY_DIV),
                   PHYSICS_PROPERTY          = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'PHYSICS_PROPERTY')),
                                                      1,
                                                      lcl_hm_mtl_general.PHYSICS_PROPERTY,
                                                      PHYSICS_PROPERTY),
                   PURCHASE_STAUTS           = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                 'PURCHASE_STAUTS')),
                                                      1,
                                                      lcl_hm_mtl_general.PURCHASE_STAUTS,
                                                      PURCHASE_STAUTS),
                   
                   PLAN_SPECIALITY          = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'PLAN_SPECIALITY')),
                                                     1,
                                                     lcl_hm_mtl_general.PLAN_SPECIALITY,
                                                     DECODE(lcl_flag,
                                                            '1',
                                                            lcl_hm_mtl_general.PLAN_SPECIALITY,
                                                            PLAN_SPECIALITY)),
                   IS_FUNCTION_PART         = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'IS_FUNCTION_PART')),
                                                     1,
                                                     lcl_hm_mtl_general.IS_FUNCTION_PART,
                                                     DECODE(lcl_flag,
                                                            '1',
                                                            lcl_hm_mtl_general.IS_FUNCTION_PART,
                                                            IS_FUNCTION_PART)),
                   QUALITY_ENSURE           = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'QUALITY_ENSURE')),
                                                     1,
                                                     lcl_hm_mtl_general.QUALITY_ENSURE,
                                                     QUALITY_ENSURE),
                   MAIN_MATERIAL_EXPRESSION = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'MAIN_MATERIAL_EXPRESSION')),
                                                     1,
                                                     lcl_hm_mtl_general.MAIN_MATERIAL_EXPRESSION,
                                                     MAIN_MATERIAL_EXPRESSION),
                   CONSUMPTION_CATEGORY     = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'CONSUMPTION_CATEGORY')),
                                                     1,
                                                     lcl_hm_mtl_general.CONSUMPTION_CATEGORY,
                                                     CONSUMPTION_CATEGORY),
                   MATERIAL_WEIGHT          = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'MATERIAL_WEIGHT')),
                                                     1,
                                                     lcl_hm_mtl_general.MATERIAL_WEIGHT,
                                                     MATERIAL_WEIGHT),
                   LENGTH_NUMBER            = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'LENGTH_NUMBER')),
                                                     1,
                                                     lcl_hm_mtl_general.LENGTH_NUMBER,
                                                     LENGTH_NUMBER),
                   WIDTH_NUMBER             = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'WIDTH_NUMBER')),
                                                     1,
                                                     lcl_hm_mtl_general.WIDTH_NUMBER,
                                                     WIDTH_NUMBER),
                   HIGH_NUMBER              = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'HIGH_NUMBER')),
                                                     1,
                                                     lcl_hm_mtl_general.HIGH_NUMBER,
                                                     HIGH_NUMBER),
                   MATERIAL_SPEC            = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'MATERIAL_SPEC')),
                                                     1,
                                                     lcl_hm_mtl_general.MATERIAL_SPEC,
                                                     MATERIAL_SPEC),
                   MATERIAL_COLOR           = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'MATERIAL_COLOR')),
                                                     1,
                                                     lcl_hm_mtl_general.MATERIAL_COLOR,
                                                     MATERIAL_COLOR),
                   MIN_SHIP_UNIT            = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'MIN_SHIP_UNIT')),
                                                     1,
                                                     lcl_hm_mtl_general.MIN_SHIP_UNIT,
                                                     MIN_SHIP_UNIT),
                   LEAD_TIME                = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                                'LEAD_TIME')),
                                                     1,
                                                     lcl_hm_mtl_general.Lead_Time,
                                                     LEAD_TIME),
                   --新增四个字段
                   BY_AIR        = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                     'BY_AIR')),
                                          1,
                                          lcl_hm_mtl_general.BY_AIR,
                                          BY_AIR),
                   MIN_SHIP_SIZE = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                     'MIN_SHIP_SIZE')),
                                          1,
                                          lcl_hm_mtl_general.MIN_SHIP_SIZE,
                                          MIN_SHIP_SIZE),
                   CCI           = DECODE(SIGN(INSTR(IN_COLUMN_NAME, 'CCI')),
                                          1,
                                          lcl_hm_mtl_general.CCI,
                                          CCI),
                   
                   CCI_CODE          = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                         'CCI_CODE')),
                                              1,
                                              lcl_hm_mtl_general.CCI_CODE,
                                              CCI_CODE),
                   LAST_UPD_BY       = lcl_hm_mtl_general.CREATED_BY,
                   LAST_UPD          = sysdate,
                   LAST_VERSION_FLAG = '2',
                   OPERATE_STATUS    = DECODE(OPERATE_STATUS,
                                              'CREATE',
                                              'CREATE',
                                              'UPDATE'),
                   ACTION_BATCH_ID   = in_action_batch_id
             where row_id = lcl_rowid;
            -- 更新多语言视图
            if INSTR(IN_COLUMN_NAME, 'MATERIAL_DESCRITION_LOCAL') > 0 and
               in_language != 'EN' then
              lcl_count := 0;
              select count(*)
                into lcl_count
                from hm_mtl_desc_data a
               where a.material_id = lcl_rowid
                 and a.language = in_language;
              if lcl_count = 0 then
                insert into hm_mtl_desc_data
                  (row_id, material_id, language, description, created_by)
                values
                  (comm_util.FUNC_NEW_ROWID,
                   lcl_rowid,
                   in_language,
                   lcl_hm_mtl_general.MATERIAL_DESCRITION_LOCAL,
                   lcl_hm_mtl_general.CREATED_BY);
              else
                --插入历史表
                insert into hm_mtl_desc_data_his
                  select *
                    from hm_mtl_desc_data a
                   where a.language = in_language
                     and a.material_id = lcl_rowid;
                update hm_mtl_desc_data a
                   set a.description = lcl_hm_mtl_general.MATERIAL_DESCRITION_LOCAL,
                       a.last_upd_by = lcl_hm_mtl_general.CREATED_BY,
                       a.last_upd    = sysdate
                 where a.language = in_language
                   and a.material_id = lcl_rowid;
              end if;
            
            end if;
          
            if --INSTR(IN_COLUMN_NAME, 'MATERIAL_DESCRITION') > 0
             regexp_instr(in_column_name,
                          'MATERIAL_DESCRITION$|MATERIAL_DESCRITION\|') > 0 then
              lcl_count := 0;
              select count(*)
                into lcl_count
                from hm_mtl_desc_data a
               where a.language = 'EN'
                 and a.material_id = lcl_rowid;
              if lcl_count = 0 then
                insert into hm_mtl_desc_data
                  (row_id, material_id, language, description, created_by)
                values
                  (comm_util.FUNC_NEW_ROWID,
                   lcl_rowid,
                   'EN',
                   lcl_hm_mtl_general.MATERIAL_DESCRITION,
                   lcl_hm_mtl_general.CREATED_BY);
              else
                --插入历史表
                insert into hm_mtl_desc_data_his
                  select *
                    from hm_mtl_desc_data a
                   where a.language = 'EN'
                     and a.material_id = lcl_rowid;
                update hm_mtl_desc_data a
                   set a.description = lcl_hm_mtl_general.MATERIAL_DESCRITION,
                       a.last_upd_by = lcl_hm_mtl_general.CREATED_BY,
                       a.last_upd    = sysdate
                 where a.language = 'EN'
                   and a.material_id = lcl_rowid;
              end if;
            
            end if;
          
            --暂时取消全字段修改
            /*else
            --全字段批导
            update hm_mtl_general a
               set OLD_MATERIAL_NUMBER = lcl_hm_mtl_general.OLD_MATERIAL_NUMBER,
                   --MATERIAL_DESCRITION      = lcl_hm_mtl_general.MATERIAL_DESCRITION,
                   PRODUCT_GROUP_THREE      = lcl_hm_mtl_general.PRODUCT_GROUP_THREE,
                   PART_FAMILY              = lcl_hm_mtl_general.PART_FAMILY,
                   PART_FAMILY_DIV          = lcl_hm_mtl_general.PART_FAMILY_DIV,
                   PHYSICS_PROPERTY         = lcl_hm_mtl_general.PHYSICS_PROPERTY,
                   PURCHASE_STAUTS          = lcl_hm_mtl_general.PURCHASE_STAUTS,
                   PLAN_SPECIALITY          = lcl_hm_mtl_general.PLAN_SPECIALITY,
                   IS_FUNCTION_PART         = lcl_hm_mtl_general.IS_FUNCTION_PART,
                   QUALITY_ENSURE           = lcl_hm_mtl_general.QUALITY_ENSURE,
                   MAIN_MATERIAL_EXPRESSION = lcl_hm_mtl_general.MAIN_MATERIAL_EXPRESSION,
                   CONSUMPTION_CATEGORY     = lcl_hm_mtl_general.CONSUMPTION_CATEGORY,
                   MATERIAL_WEIGHT          = lcl_hm_mtl_general.MATERIAL_WEIGHT,
                   LENGTH_NUMBER            = lcl_hm_mtl_general.LENGTH_NUMBER,
                   WIDTH_NUMBER             = lcl_hm_mtl_general.WIDTH_NUMBER,
                   HIGH_NUMBER              = lcl_hm_mtl_general.HIGH_NUMBER,
                   MATERIAL_SPEC            = lcl_hm_mtl_general.MATERIAL_SPEC,
                   MATERIAL_COLOR           = lcl_hm_mtl_general.MATERIAL_COLOR,
                   LAST_UPD_BY              = lcl_hm_mtl_general.CREATED_BY,
                   LAST_UPD                 = sysdate,
                   LAST_VERSION_FLAG        = '2',
                   OPERATE_STATUS           = DECODE(OPERATE_STATUS,
                                                     'CREATE',
                                                     'CREATE',
                                                     'UPDATE'),
                   ACTION_BATCH_ID          = in_action_batch_id
             where row_id = lcl_rowid;*/
          end if;
          lcl_rows_finish := lcl_rows_finish + 1;
        
          update hm_action_batch_item a
             set a.success_flag = '1',
                 remark         = 'Part code ' ||
                                  lcl_hm_mtl_general.material_code ||
                                  ' update successful'
           where master_row_id = lcl_hm_mtl_general.row_id
             and action_batch_id = in_action_batch_id;
        exception
          when lcl_cotinue_exception then
            UPDATE hm_action_batch_item
               SET success_flag = '0', remark = lcl_retmsg
             WHERE action_batch_id = in_action_batch_id
               AND master_row_id = cur_row.row_id;
        end;
      end loop;
      retcode := 'S';
      retmsg  := 'Material import :' || lcl_rows_finish || '/' || lcl_rows;
    elsif in_table_name = 'HM_MTL_PLANT' then
      for cur_row in (select *
                        from hm_mtl_plant_imp a
                       where a.action_batch_id = in_action_batch_id) loop
        begin
          lcl_rows         := lcl_rows + 1;
          lcl_count        := 0;
          lcl_hm_mtl_plant := cur_row;
          --编码是否存在
          select count(*), max(row_id), max(product_group)
            into lcl_count, lcl_rowid, lcl_product_group
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_plant.material_id;
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_plant.material_id ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part code ' || lcl_hm_mtl_plant.material_id ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
          lcl_count := 0;
          select count(*), max(row_id)
            into lcl_count, lcl_plant_id
            from hm_mtl_plant a
           where a.plant_code = lcl_hm_mtl_plant.plant_code
             and a.material_id = lcl_rowid;
          --判断指定的工厂是否存在   
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_plant.material_id ||
                            '，采购单位代码' || lcl_hm_mtl_plant.plant_code ||
                            '在系统中不存在';
            else
            
              lcl_retmsg := 'Part code ' || lcl_hm_mtl_plant.material_id ||
                            ', Factory Code ' ||
                            lcl_hm_mtl_plant.plant_code ||
                            ' does not exsit in system';
            end if;
            raise lcl_cotinue_exception;
          end if;
        
          --看看物料在否在权限范围内
          if lcl_mdc_flag is null then
            select count(*)
              into lcl_mdc_flag
              from up_org_user          a,
                   up_org_businessrole  b,
                   up_org_user_busirole c
             where b.role_name = 'MDCMaterial'
               and c.role_id = b.role_id
               and a.user_id = c.user_id
               and a.user_account = lcl_hm_mtl_plant.created_by;
          end if;
          if lcl_mdc_flag = 1 then
            --MDC不需要校验权限
            null;
          else
            --不是MDC，要权限校验
          
            if lcl_plm_Plant is null then
              select count(*)
                into lcl_plm_Plant
                from up_org_user          a,
                     up_org_businessrole  b,
                     up_org_user_busirole c
               where b.role_name = 'plmPlantManger'
                 and c.role_id = b.role_id
                 and a.user_id = c.user_id
                 and a.user_account = lcl_hm_mtl_plant.created_by;
            end if;
          
            if lcl_displm_flag is null then
              select count(*)
                into lcl_displm_flag
                from up_org_user          a,
                     up_org_businessrole  b,
                     up_org_user_busirole c
               where b.role_name = 'disPlmPlantManger'
                 and c.role_id = b.role_id
                 and a.user_id = c.user_id
                 and a.user_account = lcl_hm_mtl_plant.created_by;
            end if;
            lcl_count := 0;
            if lcl_plm_Plant = 1 then
              select count(*)
                into lcl_count
                from hm_role_splits_person a
               where a.codevalue = lcl_product_group
                 and a.delete_flag = '0'
                 and a.kindvalue = 'ProductGroup'
                 and a.org_role = 'plmPlantManger'
                 and a.psn_account = lcl_hm_mtl_plant.created_by;
              if lcl_count = 1 then
                select count(*)
                  into lcl_count
                  from hm_role_splits_person a
                 where a.codevalue = lcl_hm_mtl_plant.plant_code
                   and a.delete_flag = '0'
                   and a.kindvalue = 'PlantCode'
                   and a.org_role = 'plmPlantManger'
                   and a.psn_account = cur_row.created_by;
              end if;
            end if;
          
            lcl_count2 := 0;
            if lcl_displm_flag = 1 then
              select count(*)
                into lcl_count2
                from hm_role_splits_person a
               where a.codevalue = lcl_hm_mtl_plant.plant_code
                 and a.delete_flag = '0'
                 and a.kindvalue = 'PlantCode'
                 and a.org_role = 'disPlmPlantManger'
                 and a.psn_account = cur_row.created_by;
            end if;
          
            if lcl_count = 0 and lcl_count2 = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_plant.material_id ||
                              '，采购单位代码 ' || lcl_hm_mtl_plant.plant_code ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Part code ' || lcl_hm_mtl_plant.material_id ||
                              ', factory Code ' ||
                              lcl_hm_mtl_plant.plant_code ||
                              '  is not in your limits!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          
          end if;
        
          if instr(in_column_name, 'PRODUCING_AREA') > 0 and
             lcl_hm_mtl_plant.producing_area is not null then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_fnd_values a
             where a.delete_flag = '0'
               and a.value = lcl_hm_mtl_plant.producing_area
               and a.value_set_id = 'Country';
            if lcl_count = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_plant.material_id ||
                              '，采购单位代码 ' || lcl_hm_mtl_plant.plant_code ||
                              '，产地' || lcl_hm_mtl_plant.producing_area ||
                              ' 不存在!';
              else
                lcl_retmsg := 'Part code ' || lcl_hm_mtl_plant.material_id ||
                              ', factory Code ' ||
                              lcl_hm_mtl_plant.plant_code ||
                              ', producing area ' ||
                              lcl_hm_mtl_plant.producing_area ||
                              ' does not exists!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
        
          if instr(in_column_name, 'IMPORT_PART') > 0 and
             lcl_hm_mtl_plant.import_part is not null then
          
            if lcl_hm_mtl_plant.import_part not in ('1', '0') then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_plant.material_id ||
                              '，采购单位代码 ' || lcl_hm_mtl_plant.plant_code ||
                              '，长周期采购物料' || lcl_hm_mtl_plant.import_part ||
                              ' 不存在!';
              else
                lcl_retmsg := 'Part code ' || lcl_hm_mtl_plant.material_id ||
                              ', factory Code ' ||
                              lcl_hm_mtl_plant.plant_code ||
                              ', Long-periodic purchase ' ||
                              lcl_hm_mtl_plant.import_part ||
                              ' does not exists!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --其他各种校验，未来添加
        
          if in_column_name is not null then
            --记历史
            insert into hm_mtl_plant_his
              select * from hm_mtl_plant where row_id = lcl_plant_id;
          
            update hm_mtl_plant
               set IMPORT_PART        = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                          'IMPORT_PART')),
                                               1,
                                               lcl_hm_mtl_plant.IMPORT_PART,
                                               IMPORT_PART),
                   PRODUCING_AREA     = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                          'PRODUCING_AREA')),
                                               1,
                                               lcl_hm_mtl_plant.PRODUCING_AREA,
                                               PRODUCING_AREA),
                   MIN_BATCH_QUANTITY = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                          'MIN_BATCH_QUANTITY')),
                                               1,
                                               lcl_hm_mtl_plant.MIN_BATCH_QUANTITY,
                                               MIN_BATCH_QUANTITY),
                   ROUNDING_QUANTITY  = DECODE(SIGN(INSTR(IN_COLUMN_NAME,
                                                          'ROUNDING_QUANTITY')),
                                               1,
                                               lcl_hm_mtl_plant.ROUNDING_QUANTITY,
                                               ROUNDING_QUANTITY),
                   LAST_UPD_BY        = lcl_hm_mtl_plant.CREATED_BY,
                   LAST_UPD           = sysdate,
                   LAST_VERSION_FLAG  = '2',
                   OPERATE_STATUS     = DECODE(OPERATE_STATUS,
                                               'CREATE',
                                               'CREATE',
                                               'UPDATE'),
                   ACTION_BATCH_ID    = in_action_batch_id
             where row_id = lcl_plant_id;
            --暂时取消全字段修改  
            /*else
            update hm_mtl_plant
               set IMPORT_PART        = lcl_hm_mtl_plant.IMPORT_PART,
                   PRODUCING_AREA     = lcl_hm_mtl_plant.PRODUCING_AREA,
                   MIN_BATCH_QUANTITY = lcl_hm_mtl_plant.MIN_BATCH_QUANTITY,
                   ROUNDING_QUANTITY  = lcl_hm_mtl_plant.ROUNDING_QUANTITY,
                   LAST_UPD_BY        = lcl_hm_mtl_plant.CREATED_BY,
                   LAST_UPD           = sysdate,
                   LAST_VERSION_FLAG  = '2',
                   OPERATE_STATUS     = DECODE(OPERATE_STATUS,
                                               'CREATE',
                                               'CREATE',
                                               'UPDATE'),
                   ACTION_BATCH_ID    = in_action_batch_id
             where row_id = lcl_plant_id;*/
          end if;
          lcl_rows_finish := lcl_rows_finish + 1;
        
          --操作完成后需要对基本视图做处理
        
          /*update hm_mtl_general a
            set a.last_version_flag = '2',
                a.operate_status    = decode(a.operate_status,
                                             'NVL',
                                             'DOING',
                                             operate_status)
          where row_id = lcl_rowid;*/
        
          update hm_action_batch_item a
             set a.success_flag = '1',
                 remark         = 'Part code  ' ||
                                  lcl_hm_mtl_plant.material_id ||
                                  ' factory Code ' ||
                                  lcl_hm_mtl_plant.plant_code ||
                                  ' update successful'
           where master_row_id = lcl_hm_mtl_plant.row_id
             and action_batch_id = in_action_batch_id;
        exception
          when lcl_cotinue_exception then
            UPDATE hm_action_batch_item
               SET success_flag = '0', remark = lcl_retmsg
             WHERE action_batch_id = in_action_batch_id
               AND master_row_id = cur_row.row_id;
        end;
      end loop;
      retcode := 'S';
      retmsg  := 'Material import :' || lcl_rows_finish || '/' || lcl_rows;
    elsif in_table_name = 'HM_MTL_DESC_DATA' then
      for cur_row in (select *
                        from hm_mtl_desc_data_imp a
                       where a.action_batch_id = in_action_batch_id) loop
        begin
          lcl_rows             := lcl_rows + 1;
          lcl_count            := 0;
          lcl_hm_mtl_desc_data := cur_row;
          --编码是否存在
          select count(*), max(row_id)
            into lcl_count, lcl_rowid
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_desc_data.material_id;
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_desc_data.material_id ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_desc_data.material_id ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
        
          --语言代码是否存在
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_fnd_values a
           where a.value = lcl_hm_mtl_desc_data.language
             and a.delete_flag = '0'
             and a.value_set_id = 'LanguageType';
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_desc_data.material_id ||
                            '语言代码' || lcl_hm_mtl_desc_data.language ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_desc_data.material_id ||
                            ', Language ' || lcl_hm_mtl_desc_data.language ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
        
          lcl_count := 0;
          select count(*), max(row_id)
            into lcl_count, lcl_plant_id
            from hm_mtl_desc_data a
           where a.language = lcl_hm_mtl_desc_data.language
             and a.material_id = lcl_rowid;
          if lcl_count = 0 then
            --相当于新建
            insert into hm_mtl_desc_data
              (row_id,
               material_id,
               language,
               description,
               created_by,
               action_batch_id)
            values
              (lcl_hm_mtl_desc_data.row_id,
               lcl_rowid,
               lcl_hm_mtl_desc_data.language,
               lcl_hm_mtl_desc_data.description,
               lcl_hm_mtl_desc_data.created_by,
               in_action_batch_id);
          else
            --相当于更新
            if lcl_hm_mtl_desc_data.language = 'EN' then
              --add by  yuany  2014-02-27 更新英文描述时 不可更新为空 （前台必填项）
              if lcl_hm_mtl_desc_data.description is null then
                if in_language = 'ZH' then
                  lcl_retmsg := '备件专用号' || lcl_hm_mtl_desc_data.material_id ||
                                '英文描述为必填，不可为空！';
                else
                  lcl_retmsg := 'Part code ' ||
                                lcl_hm_mtl_desc_data.material_id ||
                                ', English Description can not be null !';
                end if;
              
                raise lcl_cotinue_exception;
              
              end if;
            end if;
            insert into hm_mtl_desc_data_his
              select *
                from hm_mtl_desc_data a
               where a.row_id = lcl_plant_id;
          
            update hm_mtl_desc_data a
               set a.description     = lcl_hm_mtl_desc_data.description,
                   a.last_upd_by     = lcl_hm_mtl_desc_data.created_by,
                   a.last_upd        = sysdate,
                   a.action_batch_id = in_action_batch_id
             where a.row_id = lcl_plant_id;
            if lcl_hm_mtl_desc_data.language = 'EN' then
              --英文的要更新基本视图的物料描述
              insert into hm_mtl_general_his
                select * from hm_mtl_general a where row_id = lcl_rowid;
              update hm_mtl_general a
                 set a.last_upd            = sysdate,
                     a.last_upd_by         = lcl_hm_mtl_desc_data.created_by,
                     a.material_descrition = lcl_hm_mtl_desc_data.description
               where row_id = lcl_rowid;
            end if;
          end if;
        
          --操作完成后需要对基本视图做处理
          --暂时取消
          /*update hm_mtl_general a
            set a.last_version_flag = '2',
                a.operate_status    = decode(a.operate_status,
                                             'NVL',
                                             'DOING',
                                             operate_status)
          where row_id = lcl_rowid;*/
        
          lcl_rows_finish := lcl_rows_finish + 1;
        
          update hm_action_batch_item a
             set a.success_flag = '1',
                 remark         = 'Part code ' ||
                                  lcl_hm_mtl_desc_data.material_id ||
                                  ' language ' ||
                                  lcl_hm_mtl_desc_data.language ||
                                  ' import successful'
           where master_row_id = lcl_hm_mtl_desc_data.row_id
             and action_batch_id = in_action_batch_id;
        exception
          when lcl_cotinue_exception then
            UPDATE hm_action_batch_item
               SET success_flag = '0', remark = lcl_retmsg
             WHERE action_batch_id = in_action_batch_id
               AND master_row_id = cur_row.row_id;
        end;
      end loop;
      retcode := 'S';
      retmsg  := 'Material import :' || lcl_rows_finish || '/' || lcl_rows;
      /*elsif in_table_name = 'BOMListResult.xml' then
      prc_mtl_apply_all_trans(in_action_batch_id,
                              'CreateMtlFromHaierMDM',
                              '1',
                              in_language,
                              retcode,
                              retmsg);
      if retcode = 'E' then
        return;
      end if;
      prc_mtl_apply_all_trans(in_action_batch_id,
                              'ExtendPlant',
                              '0', --特殊处理
                              in_language,
                              retcode,
                              retmsg);  */
    elsif in_table_name = 'HM_MTL_HGMS' then
      for cur_row in (select *
                        from hm_mtl_hgms_imp a
                       where a.action_batch_id = in_action_batch_id) loop
        begin
          lcl_rows        := lcl_rows + 1;
          lcl_count       := 0;
          lcl_hm_mtl_hgms := cur_row;
          --编码是否存在
          select count(*), max(row_id), max(product_group)
            into lcl_count, lcl_rowid, lcl_product_group
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_hgms.material_id;
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_hgms.material_id ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part code ' || lcl_hm_mtl_hgms.material_id ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
          lcl_count := 0;
          select count(*), max(row_id)
            into lcl_count, lcl_plant_id
            from hm_mtl_plant a
           where a.plant_code = lcl_hm_mtl_hgms.production_department
             and a.material_id = lcl_rowid;
        
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_hgms.material_id ||
                            '，采购单位代码' ||
                            lcl_hm_mtl_hgms.production_department ||
                            '在系统中不存在';
            else
              lcl_retmsg := 'Part code ' || lcl_hm_mtl_hgms.material_id ||
                            ', factory Code ' ||
                            lcl_hm_mtl_hgms.production_department ||
                            ' does not exsit in system';
            end if;
          
            raise lcl_cotinue_exception;
          end if;
        
          --看看物料在否在权限范围内
          if lcl_mdc_flag is null then
            select count(*)
              into lcl_mdc_flag
              from up_org_user          a,
                   up_org_businessrole  b,
                   up_org_user_busirole c
             where b.role_name = 'MDCMaterial'
               and c.role_id = b.role_id
               and a.user_id = c.user_id
               and a.user_account = lcl_hm_mtl_hgms.created_by;
          end if;
          if lcl_mdc_flag = 1 then
            --MDC不需要校验权限
            null;
          else
          
            if lcl_plm_Plant is null then
              select count(*)
                into lcl_plm_Plant
                from up_org_user          a,
                     up_org_businessrole  b,
                     up_org_user_busirole c
               where b.role_name = 'plmPlantManger'
                 and c.role_id = b.role_id
                 and a.user_id = c.user_id
                 and a.user_account = lcl_hm_mtl_hgms.created_by;
            end if;
          
            if lcl_displm_flag is null then
              select count(*)
                into lcl_displm_flag
                from up_org_user          a,
                     up_org_businessrole  b,
                     up_org_user_busirole c
               where b.role_name = 'disPlmPlantManger'
                 and c.role_id = b.role_id
                 and a.user_id = c.user_id
                 and a.user_account = lcl_hm_mtl_hgms.created_by;
            end if;
            lcl_count := 0;
            if lcl_plm_Plant = 1 then
              select count(*)
                into lcl_count
                from hm_role_splits_person a
               where a.codevalue = lcl_product_group
                 and a.delete_flag = '0'
                 and a.kindvalue = 'ProductGroup'
                 and a.org_role = 'plmPlantManger'
                 and a.psn_account = lcl_hm_mtl_hgms.created_by;
              if lcl_count = 1 then
                select count(*)
                  into lcl_count
                  from hm_role_splits_person a
                 where a.codevalue = lcl_hm_mtl_hgms.production_department
                   and a.delete_flag = '0'
                   and a.kindvalue = 'PlantCode'
                   and a.org_role = 'plmPlantManger'
                   and a.psn_account = cur_row.created_by;
              end if;
            end if;
          
            lcl_count2 := 0;
            if lcl_displm_flag = 1 then
              select count(*)
                into lcl_count2
                from hm_role_splits_person a
               where a.codevalue = lcl_hm_mtl_hgms.production_department
                 and a.delete_flag = '0'
                 and a.kindvalue = 'PlantCode'
                 and a.org_role = 'disPlmPlantManger'
                 and a.psn_account = cur_row.created_by;
            end if;
          
            if lcl_count = 0 and lcl_count2 = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_hgms.material_id ||
                              '，采购单位代码 ' ||
                              lcl_hm_mtl_hgms.production_department ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Part code ' || lcl_hm_mtl_hgms.material_id ||
                              ', factory Code ' ||
                              lcl_hm_mtl_hgms.production_department ||
                              '  is not in your limits!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          
          end if;
        
          --hgms试图废弃，改为更新工厂视图的主备货工厂
          insert into hm_mtl_plant_his
            select *
              from hm_mtl_plant a
             where (a.priority_factory = '1' or
                   a.plant_code = lcl_hm_mtl_hgms.production_department)
               and a.material_id = lcl_rowid;
        
          update hm_mtl_plant a
             set a.priority_factory = '0',
                 a.last_upd_by      = lcl_hm_mtl_hgms.created_by,
                 a.last_upd         = sysdate
           where a.priority_factory = '1'
             and a.material_id = lcl_rowid;
        
          update hm_mtl_plant a
             set a.priority_factory = '1',
                 a.last_upd_by      = lcl_hm_mtl_hgms.created_by,
                 a.last_upd         = sysdate
           where plant_code = lcl_hm_mtl_hgms.production_department
             and a.material_id = lcl_rowid;
          /*--因为只存在一个HGMS视图，所以可以直接更新
          update hm_mtl_hgms a
             set a.last_upd_by           = lcl_hm_mtl_hgms.created_by,
                 a.last_upd              = sysdate,
                 a.action_batch_id       = in_action_batch_id,
                 a.production_department = lcl_hm_mtl_hgms.production_department
           where a.material_id = lcl_rowid;*/
        
          lcl_rows_finish := lcl_rows_finish + 1;
          if in_language = 'ZH' then
            update hm_action_batch_item a
               set a.success_flag = '1',
                   remark         = '备件编码 ' || lcl_hm_mtl_hgms.material_id ||
                                    ' 主备货工厂  ' ||
                                    lcl_hm_mtl_hgms.production_department ||
                                    ' 更新成功'
             where master_row_id = lcl_hm_mtl_hgms.row_id
               and action_batch_id = in_action_batch_id;
          else
            update hm_action_batch_item a
               set a.success_flag = '1',
                   remark         = 'Part code ' ||
                                    lcl_hm_mtl_hgms.material_id ||
                                    ' production department ' ||
                                    lcl_hm_mtl_hgms.production_department ||
                                    ' update successful'
             where master_row_id = lcl_hm_mtl_hgms.row_id
               and action_batch_id = in_action_batch_id;
          end if;
        
        exception
          when lcl_cotinue_exception then
            UPDATE hm_action_batch_item
               SET success_flag = '0', remark = lcl_retmsg
             WHERE action_batch_id = in_action_batch_id
               AND master_row_id = cur_row.row_id;
        end;
      end loop;
      retcode := 'S';
      retmsg  := 'Material import :' || lcl_rows_finish || '/' || lcl_rows;
    elsif in_table_name in ('CreateMtlFromHaierMDM',
                            'CreateMtlFromOEM',
                            'CreateMtlFromTradeCompany',
                            'ExtendPlant',
                            'BOMListResult.xm') then
      prc_mtl_apply_all_trans(in_action_batch_id,
                              in_table_name, --substr(in_table_name,1,instr(in_table_name,'.')-1),
                              '1',
                              in_language,
                              retcode,
                              retmsg);
    else
      retcode := 'E';
      retmsg  := 'Invalid Import Type';
    end if;
    commit;
  
  exception
    when others then
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_material_import:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_material_import;
  /*procedure prc_material_desc_import(in_action_batch_id in varchar2,                                
                                retcode out varchar2,
                                retmsg  out varchar2) is
  begin
    retcode := 'S';
    retmsg  := 'Material multi desc import :' || lcl_rows_finish||'/'||lcl_rows;
  exception
    when others then
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_material_desc_import:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_material_desc_import; */
  --BOM清单批量导入，处理后转化为prc_material_apply_import能够处理的数据
  procedure prc_mtl_bom_list_import(in_action_batch_id in varchar2,
                                    --in_product_group   in varchar2,
                                    in_plant_code in varchar2, --工厂放弃使用，加入到模板中作为一列，可以导入多个权限内的工厂
                                    in_language   in varchar2,
                                    retcode       out varchar2,
                                    retmsg        out varchar2) is
    lcl_cotinue_exception exception;
    lcl_count      number := 0;
    lcl_count_flag number := 0;
    --lcl_retcode    varchar2(1);
    lcl_retmsg               varchar2(2000);
    lcl_rowid                varchar2(20);
    lcl_multi_plt_status     varchar2(20); --跨工厂物料状态
    lcl_product_group        varchar2(20); --产品大类
    lcl_hrbuno               varchar2(20); --PLM产品部代码
    lcl_primary_uom          varchar2(20); --基本单位
    lcl_desc_default         varchar2(255);
    lcl_desc_local           varchar2(255);
    lcl_desc_local_en        varchar2(255);
    lcl_acquire_type         varchar2(20); --获取类型
    lcl_min_batch_quantity   number;
    lcl_rounding_quantity    number;
    lcl_flag                 varchar2(1); --标记
    lcl_hm_mtl_apply_all     hm_mtl_apply_all%rowtype;
    lcl_language             varchar2(10);
    lcl_hm_mtl_plant         hm_mtl_plant%rowtype;
    lcl_success_message      varchar2(100);
    lcl_purchase_group       varchar2(20);
    lcl_material_id          varchar2(20);
    lcl_SPECIAL_ACQUIRE_TYPE varchar2(20);
    lcl_mrp_row_id           varchar2(20);
    lcl_mdc_flag             number;
  begin
    --首先检查一下，产品大类跟工厂是否存在关系
    /*select count(*)
      into lcl_count
      from hm_plant b
     where b.delete_flag = '0'
       --and b.product_group = in_product_group
       and b.plant_code = in_plant_code;
    if lcl_count = 0 then
      retcode := 'S';
      retmsg  := '产品大类“' || in_plant_code || '”跟工厂“' || in_plant_code ||
                 '”并不存在关联，请检查数据';
      return;
    end if;*/
    for cur_row in (select row_id, material_code, created_by, plant_code
                      from HM_MTL_BOM_IMP a
                     where a.action_batch_id = in_action_batch_id) loop
      begin
        lcl_success_message := '';
        --判断该物料是否在MDM存在
        lcl_rowid := '';
        lcl_count := 0;
        select count(*),
               max(row_id),
               max(primary_uom),
               max(multi_plt_status),
               max(substr(a.hrbuno, 1, 2)),
               max(a.material_descrition)
          into lcl_count,
               lcl_rowid,
               lcl_primary_uom,
               lcl_multi_plt_status,
               lcl_hrbuno,
               lcl_desc_default
          from haiermdm.hm_mtl_general a
         where a.delete_flag = '0'
           and a.material_code = cur_row.material_code;
        if lcl_count = 0 then
        
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号' || cur_row.material_code ||
                          '，在HaierMDM不存在或者已经冻结，无法新建';
          else
            lcl_retmsg := 'Part code ' || cur_row.material_code ||
                          ', does not exist in HaierMDM';
          end if;
          raise lcl_cotinue_exception;
        end if;
        --看用户是否MDC权限
        if lcl_mdc_flag is null then
          select count(*)
            into lcl_mdc_flag
            from up_org_user          a,
                 up_org_businessrole  b,
                 up_org_user_busirole c
           where b.role_name = 'MDCMaterial'
             and c.role_id = b.role_id
             and a.user_id = c.user_id
             and a.user_account = cur_row.created_by;
        end if;
        --判断产品大类经过映射关系后还是否在权限范围内
        lcl_count         := 0;
        lcl_product_group := '';
        select max(product_group)
          into lcl_product_group
          from hm_mtl_cd_pg2hrbuno
         where hrbuno = lcl_hrbuno;
      
        if lcl_mdc_flag = 0 then
          select count(*)
            into lcl_count
            from hm_role_splits_person a
           where a.codevalue = lcl_product_group
             and a.delete_flag = '0'
             and a.kindvalue = 'ProductGroup'
             and a.org_role = 'plmPlantManger'
             and a.psn_account = cur_row.created_by;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || cur_row.material_code || '，产品大类' ||
                            lcl_product_group || ' 不在权限范围内!';
            else
              lcl_retmsg := 'Part code ' || cur_row.material_code ||
                            ', product group A ' || lcl_product_group ||
                            '  is not in your limits!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          --判断工厂是否在权限范围内
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_role_splits_person a
           where a.codevalue = cur_row.plant_code
             and a.delete_flag = '0'
             and a.kindvalue = 'PlantCode'
             and a.org_role = 'plmPlantManger'
             and a.psn_account = cur_row.created_by;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || cur_row.material_code || '，采购单位代码 ' ||
                            cur_row.plant_code || ' 不在权限范围内!';
            else
              lcl_retmsg := 'Part code ' || cur_row.material_code ||
                            ', factory Code ' || cur_row.plant_code ||
                            '  is not in your limits!';
            end if;
            raise lcl_cotinue_exception;
          end if;
        end if;
        ----增加工厂跟产品大类之间的关系校验(MDC不校验）
        if lcl_mdc_flag = 0 then
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_plant a, hm_plant_product_group b
           where b.product_group_code = lcl_product_group
             and b.delete_flag = '0'
             and b.material_id = a.row_id
             and a.delete_flag = '0'
             and a.plant_code = cur_row.plant_code;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || cur_row.material_code || ',产品大类A ' ||
                            lcl_product_group || '与采购单位代码 ' ||
                            cur_row.plant_code || '对应产品大类不匹配!';
            else
              lcl_retmsg := 'Part code ' || cur_row.material_code ||
                            ', product group A ' || lcl_product_group ||
                            ' is not in factory Code ' ||
                            cur_row.plant_code;
            end if;
            raise lcl_cotinue_exception;
          end if;
        end if;
        --判断该物料是否扩展了指定的MRP工厂视图
        lcl_count := 0;
        select count(*),
               max(a.acquire_type),
               max(min_batch_quantity),
               max(rounding_quantity),
               max(SPECIAL_ACQUIRE_TYPE),
               max(row_id)
          into lcl_count,
               lcl_acquire_type,
               lcl_min_batch_quantity,
               lcl_rounding_quantity,
               lcl_SPECIAL_ACQUIRE_TYPE,
               lcl_mrp_row_id
          from haiermdm.hm_mtl_mrp a
         where a.delete_flag = '0'
           and a.plant_code = cur_row.plant_code
           and a.material_id = lcl_rowid;
        if lcl_count = 0 then
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号' || cur_row.material_code ||
                          '在HaierMDM物料MRP视图没有创建' || cur_row.plant_code ||
                          '工厂，无法新建';
          else
            lcl_retmsg := 'Part code ' || cur_row.material_code ||
                          ', factory Code ' || cur_row.plant_code ||
                          ' does not exist in HaierMDM!';
          end if;
          raise lcl_cotinue_exception;
        end if;
        --看SPI中是否已经存在相同的数据
        lcl_material_id := lcl_rowid;
        lcl_count       := 0;
        lcl_rowid       := '';
        lcl_count_flag  := 0;
        lcl_flag        := 'Y'; --初始值
        select count(*), max(row_id)
          into lcl_count, lcl_rowid
          from hm_mtl_general a
         where a.material_code = cur_row.material_code;
        if lcl_count > 0 then
          --这里需要再分解开来，处理基本视图已存在但是工厂视图不存在的情况已经工厂存在的情况
        
          select count(*)
            into lcl_count_flag
            from hm_mtl_plant a
           where a.plant_code = cur_row.plant_code
             and a.material_id = lcl_rowid;
          if lcl_count_flag > 0 then
            --工厂视图已经存在，不需要再次扩展
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || cur_row.material_code || '，采购单位代码 ' ||
                            cur_row.plant_code || ' 在系统中已经存在，不需要新建!';
            else
              lcl_retmsg := 'Part code ' || cur_row.material_code ||
                            ', factory Code ' || cur_row.plant_code ||
                            '  exists, does not need to create';
            end if;
            raise lcl_cotinue_exception;
          else
            --不需要新增扩展只需要获取只可以
            lcl_flag := 'X';
          end if;
        end if;
        --物料基本视图假如已经存在工厂不存在的话，直接新建工厂视图，所有字段从HaierMDM获取，不需要再次处理
        if lcl_flag = 'X' then
          --获取 采购组
          lcl_count := 0;
          select count(*), max(PURCHASE_GROUP_CODE)
            into lcl_count, lcl_purchase_group
            from haiermdm.hm_mtl_purchase a
           where a.delete_flag = '0'
             and a.plant_code = cur_row.plant_code
             and a.material_id = lcl_material_id;
        
          lcl_hm_mtl_plant.purchase_group_code := '';
          lcl_hm_mtl_plant.IMPORT_PART         := '0';
          if lcl_count > 0 then
            lcl_hm_mtl_plant.purchase_group_code := lcl_purchase_group;
            if lcl_purchase_group is not null and
               substr(lcl_purchase_group, 1, 1) = 'O' then
              lcl_hm_mtl_plant.IMPORT_PART := '1';
            end if;
          end if;
        
          lcl_hm_mtl_plant.row_id               := comm_util.FUNC_NEW_ROWID;
          lcl_hm_mtl_plant.material_id          := lcl_rowid;
          lcl_hm_mtl_plant.PLANT_CODE           := cur_row.plant_code;
          lcl_hm_mtl_plant.SELF_PRODUCTION      := lcl_acquire_type;
          lcl_hm_mtl_plant.special_acquire_type := lcl_SPECIAL_ACQUIRE_TYPE;
          lcl_hm_mtl_plant.mdm_mrp_id           := lcl_mrp_row_id;
          lcl_hm_mtl_plant.PRODUCING_AREA       := '';
          lcl_hm_mtl_plant.MIN_BATCH_QUANTITY   := lcl_min_batch_quantity;
          lcl_hm_mtl_plant.ROUNDING_QUANTITY    := lcl_rounding_quantity;
        
          lcl_hm_mtl_plant.created_by := cur_row.created_by;
          lcl_hm_mtl_plant.created    := sysdate;
          --lcl_hm_mtl_plant.last_upd_by := cur_row.last_upd_by;
          lcl_hm_mtl_plant.last_upd    := sysdate;
          lcl_hm_mtl_plant.delete_flag := '0';
          lcl_hm_mtl_plant.active_flag := '1';
        
          lcl_hm_mtl_plant.last_version_flag := '2';
          lcl_hm_mtl_plant.operate_status    := 'CREATE';
          lcl_hm_mtl_plant.lock_flag         := '0';
          --lcl_hm_mtl_general.return_batch_id:= in_hm_mtl_apply_all.return_batch_id;
          lcl_hm_mtl_plant.action_batch_id := in_action_batch_id;
          --lcl_hm_mtl_plant.for_gvs         := in_hm_mtl_apply_all.for_gvs;
          lcl_hm_mtl_plant.audit_flag := '1';
        
          --end if;
          insert into hm_mtl_plant values lcl_hm_mtl_plant;
          --更新基本视图的最后更新时间
          -- update hm_mtl_general mg
          --    set mg.last_upd = sysdate, mg.last_upd_by = cur_row.created_by
          --  where mg.row_id = lcl_rowid;
          if in_language = 'ZH' then
            lcl_success_message := '备件专用号' || cur_row.material_code ||
                                   '，采购单位代码 ' || cur_row.plant_code ||
                                   ' 增加成功';
          else
            lcl_success_message := 'Part code ' || cur_row.material_code ||
                                   ', factory Code ' || cur_row.plant_code ||
                                   '  Successfully created!';
          end if;
        
          UPDATE hm_action_batch_item
             SET success_flag = '2', remark = lcl_success_message
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = cur_row.row_id;
        else
          --填充默认语言和当地语言
          lcl_count := 0;
          select count(*), max(a.description)
            into lcl_count, lcl_desc_local_en
            from haiermdm.hm_mtl_desc_data a
           where a.language = 'E'
             and a.material_id = lcl_rowid;
        
          /*if lcl_count > 0 then
            --说明没有英文描述，所以用默认代替，这是暂时的想法，需要跟用户讨论
            lcl_desc_default :=              
          end if;*/
          --将登陆原因翻译成MDM语言代码
          lcl_count := 0;
          select count(*), max(a.mdm_language)
            into lcl_count, lcl_language
            from hm_cd_language_config a
           where a.language = in_language;
          if lcl_count > 0 then
            --然后看看是否有登陆语言对应的多语言描述，有的话，就作为当地语言
            select max(a.description)
              into lcl_desc_local
              from haiermdm.hm_mtl_desc_data a
             where a.language = lcl_language --实际是这个语言编码跟MDM中多语言的编码很不一样，需要做翻译，这里暂时不管
               and a.material_id = lcl_rowid;
          end if;
          --填充工厂数据
          lcl_hm_mtl_apply_all.row_id              := comm_util.FUNC_NEW_ROWID;
          lcl_hm_mtl_apply_all.material_code       := cur_row.material_code;
          lcl_hm_mtl_apply_all.old_material_number := cur_row.material_code;
          lcl_hm_mtl_apply_all.plant_code          := cur_row.plant_code;
          lcl_hm_mtl_apply_all.product_group       := lcl_product_group;
          lcl_hm_mtl_apply_all.hrbuno              := lcl_hrbuno;
          --lcl_hm_mtl_apply_all.self_production    := lcl_acquire_type;
          /*if lcl_acquire_type = 'E' then
            lcl_hm_mtl_apply_all.self_production    := '1';
          else
            lcl_hm_mtl_apply_all.self_production    := '0';
          end if;*/
          --lcl_hm_mtl_apply_all.self_production    := lcl_acquire_type;
          --lcl_hm_mtl_apply_all.min_batch_quantity := lcl_min_batch_quantity;
          --lcl_hm_mtl_apply_all.rounding_quantity  := lcl_rounding_quantity;
          lcl_hm_mtl_apply_all.action_batch_id := in_action_batch_id;
          lcl_hm_mtl_apply_all.created_by      := cur_row.created_by;
          lcl_hm_mtl_apply_all.language        := in_language;
          lcl_hm_mtl_apply_all.created         := sysdate;
          --if lcl_flag = 'Y' then
          --需要填充基本视图数据
          lcl_hm_mtl_apply_all.material_descrition := lcl_desc_local_en;
          if lcl_desc_local is null then
            lcl_hm_mtl_apply_all.material_descrition_local := lcl_desc_default;
          else
            lcl_hm_mtl_apply_all.material_descrition_local := lcl_desc_local;
          end if;
          --lcl_hm_mtl_apply_all.material_descrition_local := lcl_desc_local;
          lcl_hm_mtl_apply_all.primary_uom      := lcl_primary_uom;
          lcl_hm_mtl_apply_all.multi_plt_status := lcl_multi_plt_status;
        
          lcl_hm_mtl_apply_all.business_type   := '1'; --新建备件
          lcl_hm_mtl_apply_all.purchase_stauts := '1';
          /*else
            lcl_hm_mtl_apply_all.business_type := '0'; --扩展工厂
          end if;*/
          insert into hm_mtl_apply_all values lcl_hm_mtl_apply_all;
          if in_language = 'ZH' then
            lcl_success_message := '备件专用号' || cur_row.material_code ||
                                   '，采购单位代码 ' || cur_row.plant_code ||
                                   ' 可以新建';
          else
            lcl_success_message := 'Part code ' || cur_row.material_code ||
                                   ', factory Code ' || cur_row.plant_code ||
                                   ', now you can create!';
          end if;
          UPDATE hm_action_batch_item
             SET success_flag = '1', remark = lcl_success_message
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = cur_row.row_id;
        end if;
      
      exception
        when lcl_cotinue_exception then
          UPDATE hm_action_batch_item
             SET success_flag = '0', remark = lcl_retmsg
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = cur_row.row_id;
      end;
    end loop;
    commit;
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when others then
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_material_apply_import:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_mtl_bom_list_import;
  --2013-01-27 增加oem工厂 原厂料号和工厂唯一性校验  add by yy
  procedure prc_mtl_oembom_list_import(in_action_batch_id in varchar2,
                                       in_language        in varchar2,
                                       retcode            out varchar2,
                                       retmsg             out varchar2) IS
    lcl_cotinue_exception exception;
    lcl_count             number;
    lcl_hm_mtl_apply_all  hm_mtl_apply_all%rowtype;
    lcl_plantcode         varchar2(20);
    lcl_oldmaterialnumber varchar2(200);
    lcl_success_message   varchar2(500);
    lcl_mdc_flag          number;
    lcl_xPlant            varchar(20); --新添加一个提示
    lcl_xPlant_count      integer;
  begin
    lcl_count := 0;
    retcode   := 'S';
    retmsg    := 'OK';
    for cur_rows in (select row_id,
                            a.old_material_number,
                            created_by,
                            plant_code
                       from HM_MTL_BOM_IMP a
                      where a.action_batch_id = in_action_batch_id) loop
      begin
        lcl_plantcode         := cur_rows.plant_code;
        lcl_oldmaterialnumber := cur_rows.old_material_number;
        --校验此工厂是否在权限内
        --看用户是否MDC权限
        if lcl_mdc_flag is null then
          select count(*)
            into lcl_mdc_flag
            from up_org_user          a,
                 up_org_businessrole  b,
                 up_org_user_busirole c
           where b.role_name = 'MDCMaterial'
             and c.role_id = b.role_id
             and a.user_id = c.user_id
             and a.user_account = cur_rows.created_by;
        end if;
        if lcl_mdc_flag = 0 then
          --判断工厂是否在权限范围内
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_role_splits_person a
           where a.codevalue = cur_rows.plant_code
             and a.delete_flag = '0'
             and a.kindvalue = 'PlantCode'
             and a.org_role = 'disPlmPlantManger'
             and a.psn_account = cur_rows.created_by;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              retmsg := '原厂备件号：' || cur_rows.old_material_number ||
                        ', 采购单位代码 ' || cur_rows.plant_code || ' 不在权限范围内!';
            else
              retmsg := 'Old Material Number :' ||
                        cur_rows.old_material_number || ',  Factory Code ' ||
                        cur_rows.plant_code || '  is not in your limits!';
            end if;
            raise lcl_cotinue_exception;
          end if;
        end if;
      
        --
        lcl_count := 0;
        select count(*)
          into lcl_count
          from view_mtl_old_number_plant
         where plant_code = lcl_plantcode
           and old_material_number = lcl_oldmaterialnumber;
        if lcl_count > 0 then
          if in_language = 'ZH' then
            --retcode := 'E'; 
            retmsg := '原厂备件号:' || lcl_oldmaterialnumber || '已存在工厂：' ||
                      lcl_plantcode || '，不可重复创建！';
          else
            -- retcode := 'E'; 
            retmsg := 'Old Material Number :' || lcl_oldmaterialnumber ||
                      'has already existed the plant：' || lcl_plantcode || '.';
          end if;
          raise lcl_cotinue_exception;
        else
          lcl_hm_mtl_apply_all.row_id := comm_util.FUNC_NEW_ROWID;
          lcl_hm_mtl_apply_all.plant_code := lcl_plantcode;
          lcl_hm_mtl_apply_all.old_material_number := lcl_oldmaterialnumber;
          lcl_hm_mtl_apply_all.action_batch_id := in_action_batch_id;
          lcl_hm_mtl_apply_all.created_by := cur_rows.created_by;
          lcl_hm_mtl_apply_all.language := in_language;
          lcl_hm_mtl_apply_all.created := sysdate;
          lcl_hm_mtl_apply_all. business_type := '1';
          --获得X工厂  没有就算了
          lcl_xPlant       := '';
          lcl_xPlant_count := 0;
          select count(*)
            into lcl_xPlant_count
            from hm_mtl_plant mp
           where mp.material_id in
                 (select mg.row_id
                    from hm_mtl_general mg
                   where mg.old_material_number = lcl_oldmaterialnumber
                     and mg.delete_flag = '0')
             and mp.plant_code like 'X%';
          if lcl_xPlant_count = 0 then
            if in_language = 'ZH' then
              lcl_success_message := '原厂备件号:' || lcl_oldmaterialnumber ||
                                     '工厂:' || lcl_plantcode || ',可以创建';
            else
              lcl_success_message := 'Old Material Number: ' ||
                                     lcl_oldmaterialnumber || 'the Plant:' ||
                                     lcl_plantcode ||
                                     ',you can create！But its already exists under the oem plant ' ||
                                     lcl_xPlant;
            end if;
          else
          
            select mp.plant_code
              into lcl_xPlant
              from hm_mtl_plant mp
             where mp.material_id in
                   (select mg.row_id
                      from hm_mtl_general mg
                     where mg.old_material_number = lcl_oldmaterialnumber
                       and mg.delete_flag = '0')
               and mp.plant_code like 'X%'
               and rownum = 1;
            if lcl_xPlant = '' or lcl_xPlant is null then
              if in_language = 'ZH' then
                lcl_success_message := '原厂备件号:' || lcl_oldmaterialnumber ||
                                       '工厂:' || lcl_plantcode || ',可以创建';
              else
                lcl_success_message := 'Old Material Number: ' ||
                                       lcl_oldmaterialnumber ||
                                       'the Plant:' || lcl_plantcode ||
                                       ',you can create！';
              end if;
            else
              if in_language = 'ZH' then
                lcl_success_message := '原厂备件号:' || lcl_oldmaterialnumber ||
                                       '工厂:' || lcl_plantcode ||
                                       ',可以创建,但是已经在oem工厂' || lcl_xPlant || '存在';
              else
                lcl_success_message := 'Old Material Number: ' ||
                                       lcl_oldmaterialnumber ||
                                       'the Plant:' || lcl_plantcode ||
                                       ',you can create！But its already exists under the oem plant ' ||
                                       lcl_xPlant;
              end if;
            end if;
          end if;
        
          insert into hm_mtl_apply_all values lcl_hm_mtl_apply_all;
          UPDATE hm_action_batch_item
             SET success_flag = '1', remark = lcl_success_message
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = cur_rows.row_id;
        end if;
      
      exception
        when lcl_cotinue_exception then
          UPDATE hm_action_batch_item
             SET success_flag = '0', remark = retmsg
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = cur_rows.row_id;
      end;
    END LOOP;
    commit;
  end prc_mtl_oembom_list_import;
  --in_add_flag  字段是针对BOM明细批导时，会产生两种不同的数据，新建和工厂扩展。为了对这两种情况区别处理
  --所以加上该字段，1表示新建，0表示扩展工厂。其他的业务码时该字段值都是1. 也许以后会找到更好的处理方法
  procedure prc_mtl_apply_all_trans(in_action_batch_id in varchar2,
                                    in_business_type   in varchar2,
                                    in_add_flag        in varchar2, --特殊字段只对BOM明细批导有实际作用，其他类型操作时都为1
                                    in_language        in varchar2,
                                    retcode            out varchar2,
                                    retmsg             out varchar2) is
    lcl_hm_mtl_apply_all HM_MTL_APPLY_ALL%rowtype;
    lcl_cotinue_exception exception;
    lcl_retcode          varchar2(1);
    lcl_retmsg           varchar2(2000);
    lcl_count            number;
    lcl_rowid            varchar2(20);
    lcl_multi_plt_status varchar2(20); --跨工厂物料状态
    lcl_product_group    varchar2(20); --产品大类
    lcl_hrbuno           varchar2(20);
    lcl_primary_uom      varchar2(20); --基本单位
    --lcl_desc_default     varchar2(255);
    --lcl_desc_en          varchar2(255);
    lcl_acquire_type         varchar2(20); --获取类型
    lcl_min_batch_quantity   number;
    lcl_rounding_quantity    number;
    lcl_PLAN_SPECIALITY      VARCHAR2(10);
    lcl_IS_FUNCTION_PART     VARCHAR2(10);
    lcl_SPECIAL_ACQUIRE_TYPE VARCHAR2(10); --特殊获取类型
    lcl_business_type        varchar2(40);
    --lcl_plant_code varchar2(20);
    lcl_plant_code_flag varchar2(10);
    --lcl_plant_exception exception;
    lcl_purchase_group_code varchar2(20);
    lcl_success_message     varchar2(100);
    lcl_mdc_flag            number;
    lcl_mrp_row_id          varchar2(20);
    lcl_material_code       varchar2(20);
    --lcl_material_row_id     varchar2(20);
    lcl_flag varchar2(2);
    lcl_exception exception;
  begin
  
    for cur_row in (select *
                      from HM_MTL_APPLY_ALL a
                     where a.business_type = in_add_flag
                       and a.action_batch_id = in_action_batch_id) loop
      begin
        lcl_success_message           := '';
        lcl_business_type             := in_business_type;
        lcl_count                     := 0;
        lcl_rowid                     := '';
        lcl_hm_mtl_apply_all          := cur_row;
        lcl_hm_mtl_apply_all.language := in_language;
        if lcl_mdc_flag is null then
          --看用户是否MDC权限
          select count(*)
            into lcl_mdc_flag
            from up_org_user          a,
                 up_org_businessrole  b,
                 up_org_user_busirole c
           where b.role_name = 'MDCMaterial'
             and c.role_id = b.role_id
             and a.user_id = c.user_id
             and a.user_account = lcl_hm_mtl_apply_all.created_by;
        end if;
        --先来一把通用检查
        prc_input_all_check(lcl_business_type,
                            lcl_hm_mtl_apply_all,
                            lcl_retcode,
                            lcl_retmsg);
        if lcl_retcode = 'E' then
          --检查不通过
          raise lcl_cotinue_exception;
        end if;
        --检查工厂跟大类以及贸易公司的关系
        --检查采购状态
        if lcl_hm_mtl_apply_all.purchase_stauts is not null and
           lcl_hm_mtl_apply_all.purchase_stauts not in ('0', '1') then
        
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号“' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '”，采购状态' || lcl_hm_mtl_apply_all.purchase_stauts ||
                          '不存在!';
          else
            lcl_retmsg := 'Part code "' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '", Purchase Status ' ||
                          lcl_hm_mtl_apply_all.purchase_stauts ||
                          ' does not exists! ';
          end if;
          raise lcl_cotinue_exception;
        end if;
        --检查是否空运
        if lcl_hm_mtl_apply_all.by_air is not null and
           lcl_hm_mtl_apply_all.by_air not in ('0', '1') then
        
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号“' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '”，是否空运' || lcl_hm_mtl_apply_all.by_air || '不存在!';
          else
            lcl_retmsg := 'Part code "' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '", Allow Air ' || lcl_hm_mtl_apply_all.by_air ||
                          ' does not exists! ';
          end if;
          raise lcl_cotinue_exception;
        end if;
        --cci
        if lcl_hm_mtl_apply_all.cci is not null and
           lcl_hm_mtl_apply_all.cci not in ('0', '1') then
        
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号“' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '”，是否商检' || lcl_hm_mtl_apply_all.cci || '不存在!';
          else
            lcl_retmsg := 'Part code "' ||
                          lcl_hm_mtl_apply_all.material_descrition ||
                          '", CCI ' || lcl_hm_mtl_apply_all.cci ||
                          ' does not exists! ';
          end if;
          raise lcl_cotinue_exception;
        end if;
        --检查物理分类是否是有效的
        if lcl_hm_mtl_apply_all.physics_property is not null then
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_fnd_values a
           where a.delete_flag = '0'
             and a.value = lcl_hm_mtl_apply_all.physics_property
             and a.value_set_id = 'PhysicsProperty';
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号“' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '”，物理分类' ||
                            lcl_hm_mtl_apply_all.physics_property || '不存在!';
            else
              lcl_retmsg := 'Part code "' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '", Physics Property ' ||
                            lcl_hm_mtl_apply_all.physics_property ||
                            ' does not exists! ';
            end if;
            raise lcl_cotinue_exception;
          end if;
          lcl_count := 0;
        end if;
        ------------------------------------
        if lcl_hm_mtl_apply_all.producing_area is not null then
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_fnd_values a
           where a.delete_flag = '0'
             and a.value = lcl_hm_mtl_apply_all.producing_area
             and a.value_set_id = 'Country';
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号“' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '”，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                            '，产地' || lcl_hm_mtl_apply_all.producing_area ||
                            ' 不存在!';
            else
              lcl_retmsg := 'Part code "' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '", factory Code ' ||
                            lcl_hm_mtl_apply_all.plant_code ||
                            ', producing area ' ||
                            lcl_hm_mtl_apply_all.producing_area ||
                            ' does not exists!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          lcl_count := 0;
        end if;
        if lcl_hm_mtl_apply_all.SELF_PRODUCTION is not null then
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_fnd_values a
           where a.delete_flag = '0'
             and a.value = lcl_hm_mtl_apply_all.SELF_PRODUCTION
             and a.value_set_id = 'PurchaseType';
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号“' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '”，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                            '，物料类型' || lcl_hm_mtl_apply_all.SELF_PRODUCTION ||
                            ' 不存在!';
            else
              lcl_retmsg := 'Part code "' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '", factory Code ' ||
                            lcl_hm_mtl_apply_all.plant_code ||
                            ', material Type ' ||
                            lcl_hm_mtl_apply_all.SELF_PRODUCTION ||
                            ' does not exists!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          lcl_count := 0;
        end if;
        --检查旧物料号是否存在特殊字符
        if lcl_business_type in
           ('CreateMtlFromHaierMDM', 'CreateMtlFromOEM') then
          if lcl_hm_mtl_apply_all.old_material_number is null then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '，原厂料号' || '不能为空!';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            ', factory part code' || ' can''t be empty! ';
            end if;
            raise lcl_cotinue_exception;
          end if;
          comm_util.prc_special_char_check(lcl_hm_mtl_apply_all.old_material_number,
                                           in_language,
                                           retcode,
                                           lcl_retmsg);
          if retcode = 'E' then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            '，原厂料号' ||
                            lcl_hm_mtl_apply_all.old_material_number ||
                            lcl_retmsg;
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_descrition ||
                            ', factory part code' ||
                            lcl_hm_mtl_apply_all.old_material_number ||
                            lcl_retmsg;
            end if;
            raise lcl_cotinue_exception;
          end if;
        
        end if;
        --针对不同的业务类型处理
        if lcl_business_type = 'CreateMtlFromHaierMDM' then
          --检查工厂是否存在权限
        
          if in_language = 'ZH' then
            lcl_success_message := '备件专用号' ||
                                   lcl_hm_mtl_apply_all.material_code ||
                                   '，采购单位代码' ||
                                   lcl_hm_mtl_apply_all.plant_code || '，';
          else
            lcl_success_message := 'Part code ' ||
                                   lcl_hm_mtl_apply_all.material_code ||
                                   ', factory Code ' ||
                                   lcl_hm_mtl_apply_all.plant_code || ', ';
          end if;
        
          if lcl_mdc_flag = 1 then
            null;
          else
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_role_splits_person a
             where a.codevalue = lcl_hm_mtl_apply_all.plant_code
               and a.delete_flag = '0'
               and a.kindvalue = 'PlantCode'
               and a.org_role = 'plmPlantManger'
               and a.psn_account = cur_row.created_by;
            if lcl_count = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              '  is not in your limits!';
              end if;
            
              raise lcl_cotinue_exception;
            end if;
          end if;
        
          --PLM上线工厂新建备件时，很多字段字段从HaierMDM获取，如果对应的信息不存在就报错
          --编码在SPIMDM是否存在
          lcl_count           := 0;
          lcl_plant_code_flag := 0;
          select count(*)
            into lcl_count
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_apply_all.material_code;
        
          if lcl_count > 0 then
            --假如是同一个批次中存在同一个编码，不同工厂的，第二条数据算作扩展工厂
            for cur_plant in (select a.plant_code
                                from hm_mtl_apply_all     a,
                                     hm_action_batch_item b
                               where a.row_id != lcl_hm_mtl_apply_all.row_id
                                    --a.plant_code != lcl_hm_mtl_apply_all.plant_code
                                 and a.material_code =
                                     lcl_hm_mtl_apply_all.material_code
                                 and a.row_id = b.master_row_id
                                 and b.success_flag = '1'
                                 and b.action_batch_id = in_action_batch_id) loop
              lcl_plant_code_flag := 1;
              if lcl_hm_mtl_apply_all.plant_code = cur_plant.plant_code then
                if in_language = 'ZH' then
                  lcl_retmsg := '备件专用号' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                '，采购单位代码 ' ||
                                lcl_hm_mtl_apply_all.plant_code ||
                                ' 在系统中已经存在，不需要新建!';
                else
                  lcl_retmsg := 'Part code ' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                ', factory Code ' ||
                                lcl_hm_mtl_apply_all.plant_code ||
                                '  exists, does not need to create';
                end if;
                raise lcl_cotinue_exception;
              end if;
            end loop;
            if lcl_plant_code_flag = 0 then
              --原先已经存在同样的物料              
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              ' 在系统中已经存在，不需要新建!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              '  exists, does not need to create';
              end if;
              raise lcl_cotinue_exception;
            end if;
          
          end if;
          if lcl_plant_code_flag = 1 then
            --同批次已经新建过物料，相当于扩张工厂
            lcl_business_type := 'ExtendPlant';
          else
            --编码在HaierMDM是否存在
            lcl_count := 0;
            if regexp_like(lcl_hm_mtl_apply_all.material_code, '^A[0-9]{3}') then
              select count(*),
                     max(row_id),
                     max(multi_plt_status),
                     max(substr(a.hrbuno, 1, 2)),
                     max(a.primary_uom)
                into lcl_count,
                     lcl_rowid,
                     lcl_multi_plt_status,
                     lcl_hrbuno,
                     lcl_primary_uom
                from haiermdm.hm_mtl_general a
               where a.delete_flag = '0'
                 and substr(a.hrbuno, 1, 2) in ('01', '15')
                 and a.material_code =
                     substr(lcl_hm_mtl_apply_all.material_code, 2);
              lcl_flag := 'A';
            else
              select count(*),
                     max(row_id),
                     max(multi_plt_status),
                     max(substr(a.hrbuno, 1, 2)),
                     max(a.primary_uom)
                into lcl_count,
                     lcl_rowid,
                     lcl_multi_plt_status,
                     lcl_hrbuno,
                     lcl_primary_uom
                from haiermdm.hm_mtl_general a
               where a.delete_flag = '0'
                 and a.material_code = lcl_hm_mtl_apply_all.material_code;
              lcl_flag := 'B';
            end if;
            if lcl_count = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，在HaierMDM不存在或者冻结，无法新建';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ' does not  exist in HaierMDM';
              end if;
              raise lcl_cotinue_exception;
            end if;
            --获取PLM产品部代码对应的产品大类
          
            lcl_product_group := '';
            select max(product_group)
              into lcl_product_group
              from hm_mtl_cd_pg2hrbuno
             where hrbuno = lcl_hrbuno;
            --检查产品大类是否存在权限 MDC不需要检查
            if lcl_mdc_flag = 0 then
              lcl_count := 0;
              select count(*)
                into lcl_count
                from hm_role_splits_person a
               where a.codevalue = lcl_product_group
                 and a.delete_flag = '0'
                 and a.kindvalue = 'ProductGroup'
                 and a.org_role = 'plmPlantManger'
                 and a.psn_account = cur_row.created_by;
              if lcl_count = 0 then
              
                if in_language = 'ZH' then
                  lcl_retmsg := '备件专用号' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                '，产品大类A ' || lcl_product_group ||
                                '不在权限范围内!';
                else
                  lcl_retmsg := 'Part code ' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                ', product group A ' || lcl_product_group ||
                                ' is not in your limits!';
                end if;
                raise lcl_cotinue_exception;
              end if;
            end if;
            ----增加工厂跟产品大类之间的关系校验(MDC不校验)
            if lcl_mdc_flag = 0 then
              lcl_count := 0;
              select count(*)
                into lcl_count
                from hm_plant a, hm_plant_product_group b
               where b.product_group_code = lcl_product_group
                 and b.delete_flag = '0'
                 and b.material_id = a.row_id
                 and a.delete_flag = '0'
                 and a.plant_code = lcl_hm_mtl_apply_all.plant_code;
              if lcl_count = 0 then
              
                if in_language = 'ZH' then
                  lcl_retmsg := '备件专用号' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                ',产品大类A ' || lcl_product_group ||
                                '与采购单位代码 ' ||
                                lcl_hm_mtl_apply_all.plant_code ||
                                '对应产品大类不匹配!';
                else
                  lcl_retmsg := 'Part code ' ||
                                lcl_hm_mtl_apply_all.material_code ||
                                ', product group A ' || lcl_product_group ||
                                ' is not in factory Code ' ||
                                lcl_hm_mtl_apply_all.plant_code;
                end if;
                raise lcl_cotinue_exception;
              end if;
            end if;
            --HaierMDM该物料MRP视图是否已经扩展了指定工厂
            lcl_count := 0;
            select count(*),
                   max(acquire_type),
                   max(rounding_quantity),
                   max(min_batch_quantity),
                   max(SPECIAL_ACQUIRE_TYPE),
                   max(row_id)
              into lcl_count,
                   lcl_acquire_type,
                   lcl_rounding_quantity,
                   lcl_min_batch_quantity,
                   lcl_SPECIAL_ACQUIRE_TYPE,
                   lcl_mrp_row_id
              from haiermdm.hm_mtl_mrp b
             where b.delete_flag = '0'
               and b.plant_code = lcl_hm_mtl_apply_all.plant_code
               and b.material_id = lcl_rowid;
            if lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '在HaierMDM物料MRP视图没有创建' ||
                              lcl_hm_mtl_apply_all.plant_code || '工厂，无法新建';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              ' does not exist in HaierMDM!';
              end if;
              raise lcl_cotinue_exception;
            end if;
            --获取采购视图的采购组字段
            select max(purchase_group_code)
              into lcl_purchase_group_code
              from haiermdm.hm_mtl_purchase b
             where b.delete_flag = '0'
               and b.plant_code = lcl_hm_mtl_apply_all.plant_code
               and b.material_id = lcl_rowid;
            lcl_hm_mtl_apply_all.purchase_group_code := lcl_purchase_group_code;
            if substr(lcl_purchase_group_code, 1, 1) = 'O' then
              lcl_hm_mtl_apply_all.import_part := '1';
            else
              lcl_hm_mtl_apply_all.import_part := '0';
            end if;
          
            --处理物理分类
            lcl_count                             := 0;
            lcl_hm_mtl_apply_all.physics_property := substr(lcl_hm_mtl_apply_all.material_code,
                                                            4,
                                                            2);
            select count(*)
              into lcl_count
              from hm_fnd_values a
             where a.delete_flag = '0'
               and a.value = lcl_hm_mtl_apply_all.physics_property
               and a.value_set_id = 'PhysicsProperty';
            if lcl_count = 0 then
              --物理分类没有找到，为空
              lcl_hm_mtl_apply_all.physics_property := '';
            end if;
            --用从HaierMDM继承的字段覆盖
            if lcl_flag = 'A' then
              lcl_product_group := '05';
              -- lcl_hm_mtl_apply_all.product_group_three:='AC';
            end if;
            lcl_hm_mtl_apply_all.multi_plt_status     := lcl_multi_plt_status;
            lcl_hm_mtl_apply_all.product_group        := lcl_product_group;
            lcl_hm_mtl_apply_all.hrbuno               := lcl_hrbuno;
            lcl_hm_mtl_apply_all.primary_uom          := lcl_primary_uom;
            lcl_hm_mtl_apply_all.self_production      := lcl_acquire_type;
            lcl_hm_mtl_apply_all.min_batch_quantity   := lcl_min_batch_quantity;
            lcl_hm_mtl_apply_all.rounding_quantity    := lcl_rounding_quantity;
            lcl_hm_mtl_apply_all.special_acquire_type := lcl_SPECIAL_ACQUIRE_TYPE;
            lcl_hm_mtl_apply_all.mdm_mrp_id           := lcl_mrp_row_id;
            lcl_hm_mtl_apply_all.ACQUIRE_FLAG         := 'A'; --PLM
            /*if lcl_multi_plt_status = '07' then
              --相当于淘汰状态
              lcl_hm_mtl_apply_all.purchase_stauts := 0;
            else
              --可以采购
              lcl_hm_mtl_apply_all.purchase_stauts := 1;
            end if;*/
            --校验必输字段
            prc_must_input_check_apply(lcl_hm_mtl_apply_all,
                                       in_language,
                                       lcl_PLAN_SPECIALITY,
                                       lcl_IS_FUNCTION_PART,
                                       retcode,
                                       lcl_retmsg);
            if retcode = 'E' then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code || '，' ||
                              lcl_retmsg;
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code || ', ' ||
                              lcl_retmsg;
              end if;
              raise lcl_cotinue_exception;
            end if;
            lcl_hm_mtl_apply_all.plan_speciality  := lcl_PLAN_SPECIALITY;
            lcl_hm_mtl_apply_all.is_function_part := lcl_IS_FUNCTION_PART;
          end if;
        
        end if;
        if lcl_business_type in
           ('CreateMtlFromOEM', 'CreateMtlFromTradeCompany') then
        
          if in_language = 'ZH' then
            lcl_success_message := '原厂备件号' ||
                                   lcl_hm_mtl_apply_all.old_material_number ||
                                   '，采购单位代码' ||
                                   lcl_hm_mtl_apply_all.plant_code || '，';
          else
            lcl_success_message := 'Factory part code ' ||
                                   lcl_hm_mtl_apply_all.old_material_number ||
                                   ', factory Code ' ||
                                   lcl_hm_mtl_apply_all.plant_code || ', ';
          end if;
          --检查工厂是否存在权限
          if lcl_mdc_flag = 0 then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_role_splits_person a
             where a.codevalue = lcl_hm_mtl_apply_all.plant_code
               and a.delete_flag = '0'
               and a.kindvalue = 'PlantCode'
               and a.org_role = 'disPlmPlantManger'
               and a.psn_account = cur_row.created_by;
            if lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '原厂备件号' ||
                              lcl_hm_mtl_apply_all.old_material_number ||
                              '，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Factory part code ' ||
                              lcl_hm_mtl_apply_all.old_material_number ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              '  is not in your limits!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --校验原厂料号 和工厂唯一
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_mtl_general a, hm_mtl_plant b
           where b.delete_flag = '0'
             and a.row_id = b.material_id
             and b.plant_code = lcl_hm_mtl_apply_all.plant_code
             and a.old_material_number =
                 lcl_hm_mtl_apply_all.old_material_number;
          if lcl_count > 0 then
            if in_language = 'ZH' then
            
              lcl_retmsg := '原厂备件号:' ||
                            lcl_hm_mtl_apply_all.old_material_number ||
                            '已存在工厂：' || lcl_hm_mtl_apply_all.plant_code ||
                            '，不可重复创建！';
            else
            
              lcl_retmsg := 'Old Material Number ' ||
                            lcl_hm_mtl_apply_all.old_material_number ||
                            'has already existed in plant：' ||
                            lcl_hm_mtl_apply_all.plant_code || '.';
            end if;
            raise lcl_cotinue_exception;
          end if;
          ----增加工厂跟产品大类之间的关系校验(MDC不校验）
          if lcl_mdc_flag = 0 then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_plant a, hm_plant_product_group b
             where b.product_group_code =
                   lcl_hm_mtl_apply_all.product_group
               and b.delete_flag = '0'
               and b.material_id = a.row_id
               and a.delete_flag = '0'
               and a.plant_code = lcl_hm_mtl_apply_all.plant_code;
            if lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              ',产品大类A ' ||
                              lcl_hm_mtl_apply_all.product_group ||
                              '与采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              '对应产品大类不匹配!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', product group A ' ||
                              lcl_hm_mtl_apply_all.product_group ||
                              ' is not in factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code;
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --自动发码
          --lcl_hm_mtl_apply_all.product_group := '53';
          lcl_hm_mtl_apply_all.primary_uom  := 'EA';
          lcl_hm_mtl_apply_all.ACQUIRE_FLAG := 'B'; --非PLM
          if lcl_hm_mtl_apply_all.part_family is not null or
             lcl_hm_mtl_apply_all.part_family_div is not null then
          
            prc_must_input_check_apply(lcl_hm_mtl_apply_all,
                                       in_language,
                                       lcl_PLAN_SPECIALITY,
                                       lcl_IS_FUNCTION_PART,
                                       retcode,
                                       lcl_retmsg);
            if retcode = 'E' then
              if in_language = 'ZH' then
                lcl_retmsg := '原厂备件号' ||
                              lcl_hm_mtl_apply_all.old_material_number || '，' ||
                              lcl_retmsg;
              else
                lcl_retmsg := 'Factory part code ' ||
                              lcl_hm_mtl_apply_all.old_material_number || ', ' ||
                              lcl_retmsg;
              end if;
              raise lcl_cotinue_exception;
            end if;
            lcl_hm_mtl_apply_all.plan_speciality  := lcl_PLAN_SPECIALITY;
            lcl_hm_mtl_apply_all.is_function_part := lcl_IS_FUNCTION_PART;
          end if;
        
          generate_code.generate_material_code(lcl_hm_mtl_apply_all.material_code,
                                               lcl_retcode,
                                               lcl_retmsg);
          if lcl_retcode = 'E' then
            --发码失败
          
            if in_language = 'ZH' then
              lcl_retmsg := '原厂备件号' ||
                            lcl_hm_mtl_apply_all.old_material_number || '，' ||
                            lcl_retmsg;
            else
              lcl_retmsg := 'Factory part code ' ||
                            lcl_hm_mtl_apply_all.old_material_number || ', ' ||
                            lcl_retmsg;
            end if;
            raise lcl_cotinue_exception;
          end if;
        end if;
        if lcl_business_type = 'ExtendPlant' then
          if in_language = 'ZH' then
            lcl_success_message := '备件专用号' ||
                                   lcl_hm_mtl_apply_all.material_code ||
                                   '，采购单位代码' ||
                                   lcl_hm_mtl_apply_all.plant_code || '，';
          else
            lcl_success_message := 'Part code ' ||
                                   lcl_hm_mtl_apply_all.material_code ||
                                   ', factory Code ' ||
                                   lcl_hm_mtl_apply_all.plant_code || ', ';
          end if;
          --检查物料编码是否存在
          lcl_count := 0;
          select count(*), max(row_id), max(product_group)
            into lcl_count, lcl_rowid, lcl_product_group
            from hm_mtl_general a
           where a.material_code = lcl_hm_mtl_apply_all.material_code;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                            '不存在';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_code ||
                            ' does not exists!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          lcl_hm_mtl_apply_all.material_id := lcl_rowid;
          --检查工厂是否已经存在
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_mtl_plant a
           where a.delete_flag = '0'
             and a.plant_code = lcl_hm_mtl_apply_all.plant_code
             and a.material_id = lcl_rowid;
          if lcl_count > 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                            '，采购单位代码' || lcl_hm_mtl_apply_all.plant_code ||
                            '已经存在';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_code ||
                            ', factory Code  ' ||
                            lcl_hm_mtl_apply_all.plant_code ||
                            ' has   existed!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          if lcl_mdc_flag = 0 then
            --检查工厂是否存在权限
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_role_splits_person a
             where a.codevalue = lcl_hm_mtl_apply_all.plant_code
               and a.delete_flag = '0'
               and a.kindvalue = 'PlantCode'
               and a.org_role in ('plmPlantManger', 'disPlmPlantManger')
               and a.psn_account = cur_row.created_by;
            if lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              ' 不在权限范围内!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              '  is not in your limits!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          --校验工厂和原厂料号唯一
          prc_mtl_old_mtlnumber_plant('viewPlant',
                                      in_language,
                                      lcl_rowid,
                                      '',
                                      lcl_hm_mtl_apply_all.plant_code,
                                      lcl_retcode,
                                      lcl_retmsg);
          if lcl_retcode = 'E' then
            raise lcl_cotinue_exception;
          end if;
          ----增加工厂跟产品大类之间的关系校验(MDC 不校验）
          if lcl_mdc_flag = 0 then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_plant a, hm_plant_product_group b
             where b.product_group_code = lcl_product_group
               and b.delete_flag = '0'
               and b.material_id = a.row_id
               and a.delete_flag = '0'
               and a.plant_code = lcl_hm_mtl_apply_all.plant_code;
            if lcl_count = 0 then
            
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              ',产品大类A ' || lcl_product_group || '与采购单位代码 ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              '对应产品大类不匹配!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', product group A ' || lcl_product_group ||
                              ' is not in factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code;
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
          lcl_material_code := lcl_hm_mtl_apply_all.material_code;
          if lcl_product_group = '05' and
             regexp_like(lcl_material_code, '^A[0-9]{3}') then
            lcl_material_code := substr(lcl_material_code, 2);
          end if;
          --编码在HaierMDM是否存在
          lcl_count := 0;
          select count(*), max(row_id)
            into lcl_count, lcl_rowid
            from haiermdm.hm_mtl_general a
           where a.delete_flag = '0'
             and a.material_code = lcl_material_code;
          if lcl_count = 0 then
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                            '，在HaierMDM不存在或者冻结，无法新建';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_code ||
                            ' does not  exist in HaierMDM';
            end if;
            raise lcl_cotinue_exception;
          end if;
          --HaierMDM该物料MRP视图是否已经扩展了指定工厂
          lcl_count := 0;
          select count(*),
                 max(acquire_type),
                 max(rounding_quantity),
                 max(min_batch_quantity),
                 max(SPECIAL_ACQUIRE_TYPE),
                 max(row_id)
            into lcl_count,
                 lcl_acquire_type,
                 lcl_rounding_quantity,
                 lcl_min_batch_quantity,
                 lcl_SPECIAL_ACQUIRE_TYPE,
                 lcl_mrp_row_id
            from haiermdm.hm_mtl_mrp b
           where b.delete_flag = '0'
             and b.plant_code = lcl_hm_mtl_apply_all.plant_code
             and b.material_id = lcl_rowid;
          if lcl_count = 0 then
          
            if in_language = 'ZH' then
              lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                            '在HaierMDM物料MRP视图没有创建' ||
                            lcl_hm_mtl_apply_all.plant_code || '工厂，无法新建';
            else
              lcl_retmsg := 'Part code ' ||
                            lcl_hm_mtl_apply_all.material_code ||
                            ', factory Code ' ||
                            lcl_hm_mtl_apply_all.plant_code ||
                            ' does not exist in HaierMDM!';
            end if;
            raise lcl_cotinue_exception;
          end if;
          lcl_hm_mtl_apply_all.self_production      := lcl_acquire_type;
          lcl_hm_mtl_apply_all.rounding_quantity    := lcl_rounding_quantity;
          lcl_hm_mtl_apply_all.min_batch_quantity   := lcl_min_batch_quantity;
          lcl_hm_mtl_apply_all.special_acquire_type := lcl_SPECIAL_ACQUIRE_TYPE;
          lcl_hm_mtl_apply_all.mdm_mrp_id           := lcl_mrp_row_id;
          --检查获取类型是否在权限范围内    
          /*if lcl_hm_mtl_apply_all.self_production is not null then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_fnd_values a
             where a.delete_flag = '0'
               and a.value = lcl_hm_mtl_apply_all.self_production
               and a.value_set_id = 'PurchaseType';
          
            if lcl_count = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，获取类型' ||
                              lcl_hm_mtl_apply_all.self_production ||
                              ' 不存在!';
              else
                lcl_retmsg := 'Parts Code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', Procurement Type  ' ||
                              lcl_hm_mtl_apply_all.self_production ||
                              ' does not exists!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;*/
          if lcl_hm_mtl_apply_all.producing_area is not null then
            lcl_count := 0;
            select count(*)
              into lcl_count
              from hm_fnd_values a
             where a.delete_flag = '0'
               and a.value = lcl_hm_mtl_apply_all.producing_area
               and a.value_set_id = 'Country';
            if lcl_count = 0 then
              if in_language = 'ZH' then
                lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code ||
                              '，采购单位代码 ' || lcl_hm_mtl_apply_all.plant_code ||
                              '，产地' || lcl_hm_mtl_apply_all.producing_area ||
                              ' 不存在!';
              else
                lcl_retmsg := 'Part code ' ||
                              lcl_hm_mtl_apply_all.material_code ||
                              ', factory Code ' ||
                              lcl_hm_mtl_apply_all.plant_code ||
                              ', producing area ' ||
                              lcl_hm_mtl_apply_all.producing_area ||
                              ' does not exists!';
              end if;
              raise lcl_cotinue_exception;
            end if;
          end if;
        
          --获取采购视图的采购组字段
          select max(purchase_group_code)
            into lcl_purchase_group_code
            from haiermdm.hm_mtl_purchase b
           where b.delete_flag = '0'
             and b.plant_code = lcl_hm_mtl_apply_all.plant_code
             and b.material_id = lcl_rowid;
          lcl_hm_mtl_apply_all.purchase_group_code := lcl_purchase_group_code;
          if lcl_purchase_group_code is not null and
             substr(lcl_purchase_group_code, 1, 1) = 'O' then
            lcl_hm_mtl_apply_all.import_part := '1';
          else
            lcl_hm_mtl_apply_all.import_part := '0';
          end if;
        
        end if;
      
        --处理基本视图
        prc_base_trans(lcl_business_type,
                       lcl_hm_mtl_apply_all,
                       lcl_retcode,
                       lcl_retmsg);
        /*if lcl_business_type = 'CreateMtlFromHaierMDM' and
           lcl_hm_mtl_apply_all.product_group in ('05', '06') then
          --A开头已经存在的 跳过此次插入 yy 2013-12-31
          lcl_count := 0;
          select count(*)
            into lcl_count
            from hm_mtl_general a
           where a.material_code =
                 'A' || lcl_hm_mtl_apply_all.material_code;
          if lcl_count = 0 then
            --end
            lcl_material_code                        := lcl_hm_mtl_apply_all.material_code;
            lcl_material_row_id                      := lcl_hm_mtl_apply_all.row_id;
            lcl_hm_mtl_apply_all.row_id              := comm_util.FUNC_NEW_ROWID;
            lcl_hm_mtl_apply_all.material_code       := 'A' ||
                                                        lcl_material_code;
            lcl_hm_mtl_apply_all.product_group       := '05';
            lcl_hm_mtl_apply_all.product_group_three := 'AC';
            prc_base_trans(lcl_business_type,
                           lcl_hm_mtl_apply_all,
                           lcl_retcode,
                           lcl_retmsg);
            lcl_hm_mtl_apply_all.material_code := lcl_material_code;
            lcl_hm_mtl_apply_all.row_id        := lcl_material_row_id;
          end if;
        end if;*/
        --如果返回E只当成普通错误，则后续程序不知道是普通的错误还是异常，如果是异常，则需要做回滚，
        --否则当普通错误处理会导致程序不能执行完，出现缺少视图和数据的问题
        --所以一旦这里出现E，则直接抛出异常，并做回滚
        if lcl_retcode = 'E' then
          /*lcl_retmsg := '编码' || lcl_hm_mtl_apply_all.material_code || ', ' ||
                        lcl_retmsg;
          if in_language = 'ZH' then
            lcl_retmsg := '备件专用号' || lcl_hm_mtl_apply_all.material_code || '，' ||
                          lcl_retmsg;
          else
            lcl_retmsg := 'Part code ' ||
                          lcl_hm_mtl_apply_all.material_code || ', ' ||
                          lcl_retmsg;
          end if;
          raise lcl_cotinue_exception;*/
          raise lcl_exception; --非捕捉异常
        end if;
        UPDATE hm_action_batch_item
           SET success_flag = '1',
               remark       = lcl_success_message || 'Successful'
         WHERE action_batch_id = in_action_batch_id
           AND master_row_id = lcl_hm_mtl_apply_all.row_id;
      exception
        when lcl_cotinue_exception then
          UPDATE hm_action_batch_item
             SET success_flag = '0', remark = lcl_retmsg
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = lcl_hm_mtl_apply_all.row_id;
      end;
    end loop;
    commit; --提交
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when lcl_exception then
      ROLLBACK;
      retcode := 'E';
      retmsg  := lcl_retmsg;
    when others then
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_mtl_apply_all_trans:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_mtl_apply_all_trans;
  /*procedure prc_mtl_apply_plant_trans(in_action_batch_id in varchar2,
                                    in_business_type   in varchar2,
                                    retcode            out varchar2,
                                    retmsg             out varchar2) is
    lcl_hm_mtl_apply_plant HM_MTL_APPLY_PLANT%rowtype;
    lcl_cotinue_exception exception;
    lcl_retcode          varchar2(1);
    lcl_retmsg           varchar2(2000);
    lcl_count            number;
    lcl_rowid            varchar2(20);
   --lcl_acquire_type     varchar2(20); --获取类型
  begin
  
    for cur_row in (select *
                      from HM_MTL_APPLY_PLANT a
                     where a.action_batch_id = in_action_batch_id) loop
      begin
        lcl_count            := 0;
        lcl_rowid            := '';
        lcl_hm_mtl_apply_plant := cur_row; 
          
      exception
        when lcl_cotinue_exception then
          UPDATE hm_action_batch_item
             SET success_flag = '0', remark = lcl_retmsg
           WHERE action_batch_id = in_action_batch_id
             AND master_row_id = lcl_hm_mtl_apply_plant.row_id;  
      end ;
    end loop;                                   
  end   prc_mtl_apply_plant_trans; */
  PROCEDURE prc_base_trans(in_business_type    IN VARCHAR2,
                           in_hm_mtl_apply_all IN HM_MTL_APPLY_ALL%rowtype,
                           retcode             OUT VARCHAR2,
                           retmsg              OUT VARCHAR2) IS
    lcl_hm_mtl_general hm_mtl_general%rowtype;
    --lcl_flag   varchar2(10);--工厂类型标记，如果是
  begin
    retcode := 'S';
    retmsg  := 'OK';
    if in_business_type in ('CreateMtlFromTradeCompany',
                            'CreateMtlFromHaierMDM',
                            'CreateMtlFromOEM') then
    
      lcl_hm_mtl_general.row_id                    := in_hm_mtl_apply_all.row_id;
      lcl_hm_mtl_general.material_code             := in_hm_mtl_apply_all.material_code;
      lcl_hm_mtl_general.old_material_number       := in_hm_mtl_apply_all.old_material_number;
      lcl_hm_mtl_general.material_descrition       := in_hm_mtl_apply_all.material_descrition;
      lcl_hm_mtl_general.material_descrition_local := in_hm_mtl_apply_all.material_descrition_local;
      lcl_hm_mtl_general.product_group             := in_hm_mtl_apply_all.product_group; --取自HaierMDM
      lcl_hm_mtl_general.hrbuno                    := in_hm_mtl_apply_all.hrbuno;
      lcl_hm_mtl_general.product_group_three       := in_hm_mtl_apply_all.product_group_three;
      lcl_hm_mtl_general.PART_FAMILY               := in_hm_mtl_apply_all.PART_FAMILY;
      lcl_hm_mtl_general.PART_FAMILY_DIV           := in_hm_mtl_apply_all.PART_FAMILY_DIV;
      lcl_hm_mtl_general.purchase_stauts           := in_hm_mtl_apply_all.purchase_stauts;
      lcl_hm_mtl_general.plan_speciality           := in_hm_mtl_apply_all.plan_speciality;
      lcl_hm_mtl_general.is_function_part          := in_hm_mtl_apply_all.is_function_part;
      lcl_hm_mtl_general.lead_time                 := in_hm_mtl_apply_all.lead_time;
    
      for cur_row in (select a.plan_speciality, a.is_function_part
                        from hm_mtl_part_family_div a
                       where a.part_family = lcl_hm_mtl_general.PART_FAMILY
                         and a.part_family_div =
                             lcl_hm_mtl_general.PART_FAMILY_DIV) loop
        lcl_hm_mtl_general.plan_speciality  := cur_row.plan_speciality;
        lcl_hm_mtl_general.is_function_part := cur_row.is_function_part;
      end loop;
    
      lcl_hm_mtl_general.physics_property         := in_hm_mtl_apply_all.physics_property;
      lcl_hm_mtl_general.primary_uom              := in_hm_mtl_apply_all.primary_uom;
      lcl_hm_mtl_general.min_ship_unit            := in_hm_mtl_apply_all.min_ship_unit;
      lcl_hm_mtl_general.quality_ensure           := in_hm_mtl_apply_all.quality_ensure;
      lcl_hm_mtl_general.main_material_expression := in_hm_mtl_apply_all.main_material_expression;
      lcl_hm_mtl_general.consumption_category     := in_hm_mtl_apply_all.consumption_category;
      lcl_hm_mtl_general.material_weight          := in_hm_mtl_apply_all.material_weight;
      lcl_hm_mtl_general.length_number            := in_hm_mtl_apply_all.length_number;
      lcl_hm_mtl_general.width_number             := in_hm_mtl_apply_all.width_number;
      lcl_hm_mtl_general.high_number              := in_hm_mtl_apply_all.high_number;
      lcl_hm_mtl_general.multi_plt_status         := in_hm_mtl_apply_all.multi_plt_status;
      lcl_hm_mtl_general.material_spec            := in_hm_mtl_apply_all.material_spec;
      lcl_hm_mtl_general.material_color           := in_hm_mtl_apply_all.material_color;
      --新增四个字段
      lcl_hm_mtl_general.by_air        := in_hm_mtl_apply_all.by_air;
      lcl_hm_mtl_general.cci           := in_hm_mtl_apply_all.cci;
      lcl_hm_mtl_general.cci_code      := in_hm_mtl_apply_all.cci_code;
      lcl_hm_mtl_general.min_ship_size := in_hm_mtl_apply_all.min_ship_size;
      ------增加备注字段--
      lcl_hm_mtl_general.remark     := in_hm_mtl_apply_all.remark;
      lcl_hm_mtl_general.created_by := in_hm_mtl_apply_all.created_by;
      lcl_hm_mtl_general.created    := sysdate;
      --lcl_hm_mtl_general.last_upd_by       := in_hm_mtl_apply_all.last_upd_by;
      lcl_hm_mtl_general.last_upd          := sysdate;
      lcl_hm_mtl_general.delete_flag       := '0';
      lcl_hm_mtl_general.active_flag       := '1';
      lcl_hm_mtl_general.remark            := in_hm_mtl_apply_all.remark;
      lcl_hm_mtl_general.last_version_flag := '2';
      lcl_hm_mtl_general.operate_status    := 'CREATE';
      lcl_hm_mtl_general.lock_flag         := '0';
      lcl_hm_mtl_general.acquire_flag      := in_hm_mtl_apply_all.acquire_flag; --PLM物料
      --lcl_hm_mtl_general.return_batch_id:= in_hm_mtl_apply_all.return_batch_id;
      lcl_hm_mtl_general.action_batch_id         := in_hm_mtl_apply_all.action_batch_id;
      lcl_hm_mtl_general.for_gvs                 := in_hm_mtl_apply_all.for_gvs;
      lcl_hm_mtl_general.audit_flag              := '1';
      lcl_hm_mtl_general.new_material_expression := '1';
      lcl_hm_mtl_general.for_tsp                 := '0';
      insert into hm_mtl_general values lcl_hm_mtl_general;
      -- 生成多语言视图
      insert into hm_mtl_desc_data
        (row_id,
         material_id,
         language,
         description,
         created_by,
         action_batch_id)
      values
        (comm_util.FUNC_NEW_ROWID,
         in_hm_mtl_apply_all.row_id,
         'EN',
         in_hm_mtl_apply_all.material_descrition,
         in_hm_mtl_apply_all.created_by,
         in_hm_mtl_apply_all.action_batch_id);
      if in_hm_mtl_apply_all.material_descrition_local is not null /*and in_hm_mtl_apply_all.language != 'EN'*/
       then
        insert into hm_mtl_desc_data
          (row_id,
           material_id,
           language,
           description,
           created_by,
           action_batch_id)
        values
          (comm_util.FUNC_NEW_ROWID,
           in_hm_mtl_apply_all.row_id,
           in_hm_mtl_apply_all.language,
           in_hm_mtl_apply_all.material_descrition_local,
           in_hm_mtl_apply_all.created_by,
           in_hm_mtl_apply_all.action_batch_id);
      end if;
      --添加多种语言
      for cur_row in (select t.value
                        from hm_fnd_values t
                       where not exists
                       (select null
                                from hm_mtl_desc_data a
                               where a.language = t.value
                                 and a.material_id =
                                     in_hm_mtl_apply_all.row_id)
                         and t.language = 'EN'
                         and t.value_set_id = 'LanguageType') loop
        insert into hm_mtl_desc_data
          (row_id,
           material_id,
           language,
           description,
           created_by,
           action_batch_id)
        values
          (comm_util.FUNC_NEW_ROWID,
           in_hm_mtl_apply_all.row_id,
           cur_row.value,
           in_hm_mtl_apply_all.material_descrition,
           in_hm_mtl_apply_all.created_by,
           in_hm_mtl_apply_all.action_batch_id);
      end loop;
      insert into hm_mtl_hgms
        (row_id,
         material_id,
         PRODUCTION_DEPARTMENT,
         created_by,
         action_batch_id)
      values
        (comm_util.FUNC_NEW_ROWID,
         in_hm_mtl_apply_all.row_id,
         in_hm_mtl_apply_all.plant_code,
         in_hm_mtl_apply_all.created_by,
         in_hm_mtl_apply_all.action_batch_id);
    end if;
    /*if in_business_type = 'CreateMtlFromTradeCompany' or
       in_hm_mtl_apply_all.company_code is not null then
      --CreateMtlFromHaierMDM
      insert into hm_mtl_company
        (row_id, material_id, company_code, created_by, action_batch_id)
      values
        (comm_util.FUNC_NEW_ROWID,
         in_hm_mtl_apply_all.row_id,
         in_hm_mtl_apply_all.company_code,
         in_hm_mtl_apply_all.created_by,
         in_hm_mtl_apply_all.action_batch_id);
    end if;*/
    prc_plant_trans(in_business_type, in_hm_mtl_apply_all, retcode, retmsg);
  
  exception
    when others then
      retcode := 'E';
      retmsg  := 'prc_base_trans:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_base_trans;
  PROCEDURE prc_plant_trans(in_business_type    IN VARCHAR2,
                            in_hm_mtl_apply_all IN HM_MTL_APPLY_ALL%rowtype,
                            retcode             OUT VARCHAR2,
                            retmsg              OUT VARCHAR2) is
    lcl_hm_mtl_plant hm_mtl_plant%rowtype;
    lcl_count        number := 0;
  begin
    if in_business_type = 'ExtendPlant' then
      lcl_hm_mtl_plant.material_id      := in_hm_mtl_apply_all.material_id;
      lcl_hm_mtl_plant.priority_factory := in_hm_mtl_apply_all.priority_factory;
      lcl_hm_mtl_plant.plant_code       := in_hm_mtl_apply_all.plant_code;
      if lcl_hm_mtl_plant.priority_factory = '1' then
        --将以前的主工厂标记设置为0
        insert into hm_mtl_plant_his
          select *
            from hm_mtl_plant a
           where a.plant_code != lcl_hm_mtl_plant.plant_code
             and a.delete_flag = '0'
             and a.priority_factory = '1'
             and a.material_id = lcl_hm_mtl_plant.material_id;
        if sql%rowcount > 0 then
          update hm_mtl_plant a
             set a.last_upd_by      = lcl_hm_mtl_plant.created_by,
                 a.last_upd         = sysdate,
                 a.priority_factory = '0'
           where a.plant_code != lcl_hm_mtl_plant.plant_code
             and a.delete_flag = '0'
             and a.priority_factory = '1'
             and a.material_id = lcl_hm_mtl_plant.material_id;
        end if;
        insert into hm_mtl_plant_his
          select *
            from hm_mtl_plant a
           where a. plant_code = lcl_hm_mtl_plant.plant_code
             and a.material_id = lcl_hm_mtl_plant.material_id;
        update hm_mtl_plant a
           set a.last_upd_by = lcl_hm_mtl_plant.created_by,
               a.last_upd    = sysdate,
               -- a.delete_flag      = '0',
               a.action_batch_id  = lcl_hm_mtl_plant.action_batch_id,
               a.priority_factory = '1'
         where a.plant_code = in_hm_mtl_apply_all.plant_code
           and a.material_id = lcl_hm_mtl_plant.material_id;
      else
        lcl_count                         := 0;
        lcl_hm_mtl_plant.priority_factory := '0';
        select count(*)
          into lcl_count
          from hm_mtl_plant a
         where a.priority_factory = '1'
           and a.delete_flag = '0'
           and a.plant_code != lcl_hm_mtl_plant.plant_code
           and a.material_id = lcl_hm_mtl_plant.material_id;
      
        if lcl_count = 0 then
          --当前没有工厂是主工厂，必须把当前的默认成主工厂，防止误操作
          lcl_hm_mtl_plant.priority_factory := '1';
        end if;
      
        insert into hm_mtl_plant_his
          select *
            from hm_mtl_plant a
           where a.plant_code = lcl_hm_mtl_plant.plant_code
             and a.material_id = lcl_hm_mtl_plant.material_id;
      
        update hm_mtl_plant a
           set a.last_upd_by = lcl_hm_mtl_plant.created_by,
               a.last_upd    = sysdate,
               --a.delete_flag      = '0',
               a.action_batch_id  = lcl_hm_mtl_plant.action_batch_id,
               a.priority_factory = lcl_hm_mtl_plant.priority_factory
         where a.plant_code = lcl_hm_mtl_plant.plant_code
           and a.material_id = lcl_hm_mtl_plant.material_id;
        --
      end if;
    
    else
      lcl_hm_mtl_plant.material_id      := in_hm_mtl_apply_all.row_id;
      lcl_hm_mtl_plant.priority_factory := '1'; --主备货工厂
    end if;
    lcl_hm_mtl_plant.row_id := comm_util.FUNC_NEW_ROWID;
  
    lcl_hm_mtl_plant.PLANT_CODE           := in_hm_mtl_apply_all.PLANT_CODE;
    lcl_hm_mtl_plant.SELF_PRODUCTION      := in_hm_mtl_apply_all.SELF_PRODUCTION;
    lcl_hm_mtl_plant.IMPORT_PART          := in_hm_mtl_apply_all.IMPORT_PART;
    lcl_hm_mtl_plant.PRODUCING_AREA       := in_hm_mtl_apply_all.PRODUCING_AREA;
    lcl_hm_mtl_plant.MIN_BATCH_QUANTITY   := in_hm_mtl_apply_all.MIN_BATCH_QUANTITY;
    lcl_hm_mtl_plant.ROUNDING_QUANTITY    := in_hm_mtl_apply_all.ROUNDING_QUANTITY;
    lcl_hm_mtl_plant.special_acquire_type := in_hm_mtl_apply_all.special_acquire_type;
    lcl_hm_mtl_plant.purchase_group_code  := in_hm_mtl_apply_all.purchase_group_code;
    lcl_hm_mtl_plant.created_by           := in_hm_mtl_apply_all.created_by;
    lcl_hm_mtl_plant.mdm_mrp_id           := in_hm_mtl_apply_all.mdm_mrp_id;
    lcl_hm_mtl_plant.created              := sysdate;
    lcl_hm_mtl_plant.last_upd_by          := in_hm_mtl_apply_all.last_upd_by;
    lcl_hm_mtl_plant.last_upd             := sysdate;
    lcl_hm_mtl_plant.delete_flag          := '0';
    lcl_hm_mtl_plant.active_flag          := '1';
  
    lcl_hm_mtl_plant.last_version_flag := '2';
    lcl_hm_mtl_plant.operate_status    := 'CREATE';
    lcl_hm_mtl_plant.lock_flag         := '0';
    --lcl_hm_mtl_general.return_batch_id:= in_hm_mtl_apply_all.return_batch_id;
    lcl_hm_mtl_plant.action_batch_id := in_hm_mtl_apply_all.action_batch_id;
    lcl_hm_mtl_plant.for_gvs         := in_hm_mtl_apply_all.for_gvs;
    lcl_hm_mtl_plant.audit_flag      := '1';
  
    --end if;
    --如果工厂是标记删除，修改删除标记，更新信息。addby yy 2014-03-21
    lcl_count := 0;
    select count(*)
      into lcl_count
      from hm_mtl_plant a
     where a.delete_flag = '1'
       and a.plant_code = lcl_hm_mtl_plant.plant_code
       and a.material_id = lcl_hm_mtl_plant.material_id;
    if lcl_count = 1 then
      update hm_mtl_plant a
         set PLANT_CODE           = in_hm_mtl_apply_all.PLANT_CODE,
             SELF_PRODUCTION      = in_hm_mtl_apply_all.SELF_PRODUCTION,
             IMPORT_PART          = in_hm_mtl_apply_all.IMPORT_PART,
             PRODUCING_AREA       = in_hm_mtl_apply_all.PRODUCING_AREA,
             MIN_BATCH_QUANTITY   = in_hm_mtl_apply_all.MIN_BATCH_QUANTITY,
             ROUNDING_QUANTITY    = in_hm_mtl_apply_all.ROUNDING_QUANTITY,
             special_acquire_type = in_hm_mtl_apply_all.special_acquire_type,
             purchase_group_code  = in_hm_mtl_apply_all.purchase_group_code,
             mdm_mrp_id           = in_hm_mtl_apply_all.mdm_mrp_id,
             last_upd_by          = in_hm_mtl_apply_all.last_upd_by,
             last_upd             = sysdate,
             delete_flag          = '0',
             active_flag          = '1',
             action_batch_id      = in_hm_mtl_apply_all.action_batch_id,
             for_gvs              = in_hm_mtl_apply_all.for_gvs,
             audit_flag           = '1'
       where delete_flag = '1'
         and a.plant_code = lcl_hm_mtl_plant.plant_code
         and a.material_id = lcl_hm_mtl_plant.material_id;
      --更新基本视图的最后更新时间
      --   update hm_mtl_general mg
      --     set mg.last_upd = sysdate, mg.last_upd_by = in_hm_mtl_apply_all.last_upd_by
      --    where mg.row_id = lcl_hm_mtl_plant.material_id;
    else
      insert into hm_mtl_plant values lcl_hm_mtl_plant;
      --更新基本视图的最后更新时间
      --   update hm_mtl_general mg
      --    set mg.last_upd = sysdate, mg.last_upd_by = in_hm_mtl_apply_all.last_upd_by
      --  where mg.row_id = lcl_hm_mtl_plant.material_id;
    end if;
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when others then
      retcode := 'E';
      retmsg  := 'prc_base_trans:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_plant_trans;
  PROCEDURE prc_input_all_check(in_business_type    IN VARCHAR2,
                                in_hm_mtl_apply_all IN OUT HM_MTL_APPLY_ALL%ROWTYPE,
                                --in_hm_mtl_apply_plant IN OUT HM_MTL_APPLY_PLANT%ROWTYPE,
                                retcode OUT VARCHAR2,
                                retmsg  OUT VARCHAR2) IS
    --ls_fieldvalue VARCHAR2(2000);
    --li_fieldvalue      NUMBER(22,7);
    --ls_field_label_en VARCHAR2(2000);
  
    --l_retcode_temp VARCHAR2(10);
    str_sql VARCHAR2(1000); --查询SQL
  
    lcl_value VARCHAR2(4000);
  
    l_hm_business_fields HM_BUSINESS_FIELDS%rowtype;
  
    TYPE cur_type IS REF CURSOR;
    cur_type_rows cur_type;
  begin
    str_sql := ' select * from hm_business_fields ' ||
               ' where business_code = :ls_businesscode ' || --'''|| ls_businesscode_create ||''' '||
               ' AND delete_flag =''0'' ';
  
    ----COMMIT;
  
    OPEN cur_type_rows FOR str_sql
      USING in_business_type;
    LOOP
      FETCH cur_type_rows
        INTO l_hm_business_fields;
      EXIT WHEN cur_type_rows%NOTFOUND;
    
      --初始化临时变量
      --l_retcode_temp := 'S';
      lcl_value := '';
      prc_get_field_value(l_hm_business_fields.field_name,
                          in_hm_mtl_apply_all,
                          lcl_value);
      if l_hm_business_fields.must_input_flag = '1' and lcl_value is null then
        retcode := 'E';
        retmsg  := l_hm_business_fields.field_label_en ||
                   ' can''t be empty!';
        return;
      end if;
    
      if lcl_value is not null then
        if l_hm_business_fields.check_value_length < length(lcl_value) then
          retcode := 'E';
          retmsg  := l_hm_business_fields.field_label_en ||
                     ' length more than ' ||
                     l_hm_business_fields.check_value_length;
          return;
        end if;
        --检查值集是否正确
        if l_hm_business_fields.check_value_set is not null then
          comm_util.prc_getfndvalues(l_hm_business_fields.field_label_en,
                                     lcl_value,
                                     l_hm_business_fields.check_value_set,
                                     '',
                                     
                                     retcode,
                                     retmsg);
          if retcode = 'E' then
            return;
          end if;
        end if;
      end if;
    
    END LOOP;
    CLOSE cur_type_rows;
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when others then
      retcode := 'E';
      retmsg  := 'prc_input_all_check:operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_input_all_check;
  PROCEDURE prc_get_field_value(in_field_name       IN VARCHAR2,
                                in_hm_mtl_apply_all IN OUT HM_MTL_APPLY_ALL%ROWTYPE,
                                out_check_value     OUT VARCHAR2) is
  begin
    IF in_field_name = 'MATERIAL_CODE' THEN
      out_check_value                   := upper(trim(in_hm_mtl_apply_all.MATERIAL_CODE));
      in_hm_mtl_apply_all.MATERIAL_CODE := out_check_value;
    END IF;
    IF in_field_name = 'OLD_MATERIAL_NUMBER' THEN
      out_check_value                         := upper(trim(in_hm_mtl_apply_all.OLD_MATERIAL_NUMBER));
      in_hm_mtl_apply_all.OLD_MATERIAL_NUMBER := out_check_value;
    END IF;
    IF in_field_name = 'MATERIAL_DESCRITION' THEN
      out_check_value                         := upper(trim(in_hm_mtl_apply_all.MATERIAL_DESCRITION));
      in_hm_mtl_apply_all.MATERIAL_DESCRITION := out_check_value;
    END IF;
    IF in_field_name = 'MATERIAL_DESCRITION_LOCAL' THEN
      out_check_value                               := upper(trim(in_hm_mtl_apply_all.MATERIAL_DESCRITION_LOCAL));
      in_hm_mtl_apply_all.MATERIAL_DESCRITION_LOCAL := out_check_value;
    END IF;
    IF in_field_name = 'PRODUCT_GROUP' THEN
      out_check_value                   := upper(trim(in_hm_mtl_apply_all.PRODUCT_GROUP));
      in_hm_mtl_apply_all.PRODUCT_GROUP := out_check_value;
    END IF;
    IF in_field_name = 'PRODUCT_GROUP_THREE' THEN
      out_check_value                         := upper(trim(in_hm_mtl_apply_all.PRODUCT_GROUP_THREE));
      in_hm_mtl_apply_all.PRODUCT_GROUP_THREE := out_check_value;
    END IF;
    IF in_field_name = 'PART_FAMILY' THEN
      out_check_value                 := upper(trim(in_hm_mtl_apply_all.PART_FAMILY));
      in_hm_mtl_apply_all.PART_FAMILY := out_check_value;
    END IF;
    IF in_field_name = 'PART_FAMILY_DIV' THEN
      out_check_value                     := upper(trim(in_hm_mtl_apply_all.PART_FAMILY_DIV));
      in_hm_mtl_apply_all.PART_FAMILY_DIV := out_check_value;
    END IF;
    IF in_field_name = 'PHYSICS_PROPERTY' THEN
      out_check_value                      := upper(trim(in_hm_mtl_apply_all.PHYSICS_PROPERTY));
      in_hm_mtl_apply_all.PHYSICS_PROPERTY := out_check_value;
    END IF;
    IF in_field_name = 'PURCHASE_STAUTS' THEN
      out_check_value                     := upper(trim(in_hm_mtl_apply_all.PURCHASE_STAUTS));
      in_hm_mtl_apply_all.PURCHASE_STAUTS := out_check_value;
    END IF;
    IF in_field_name = 'PLAN_SPECIALITY' THEN
      out_check_value                     := upper(trim(in_hm_mtl_apply_all.PLAN_SPECIALITY));
      in_hm_mtl_apply_all.PLAN_SPECIALITY := out_check_value;
    END IF;
    IF in_field_name = 'PRIMARY_UOM' THEN
      out_check_value                 := upper(trim(in_hm_mtl_apply_all.PRIMARY_UOM));
      in_hm_mtl_apply_all.PRIMARY_UOM := out_check_value;
    END IF;
  
    IF in_field_name = 'LANGUAGE' THEN
      out_check_value              := upper(trim(in_hm_mtl_apply_all.LANGUAGE));
      in_hm_mtl_apply_all.LANGUAGE := out_check_value;
    END IF;
    IF in_field_name = 'HRBUNO' THEN
      out_check_value            := upper(trim(in_hm_mtl_apply_all.HRBUNO));
      in_hm_mtl_apply_all.HRBUNO := out_check_value;
    END IF;
    IF in_field_name = 'COMPANY_CODE' THEN
      out_check_value                  := upper(trim(in_hm_mtl_apply_all.COMPANY_CODE));
      in_hm_mtl_apply_all.COMPANY_CODE := out_check_value;
    END IF;
  
    IF in_field_name = 'IS_FUNCTION_PART' THEN
      out_check_value                      := upper(trim(in_hm_mtl_apply_all.IS_FUNCTION_PART));
      in_hm_mtl_apply_all.IS_FUNCTION_PART := out_check_value;
    END IF;
    IF in_field_name = 'QUALITY_ENSURE' THEN
      out_check_value                    := upper(trim(in_hm_mtl_apply_all.QUALITY_ENSURE));
      in_hm_mtl_apply_all.QUALITY_ENSURE := out_check_value;
    END IF;
    IF in_field_name = 'MAIN_MATERIAL_EXPRESSION' THEN
      out_check_value                              := upper(trim(in_hm_mtl_apply_all.MAIN_MATERIAL_EXPRESSION));
      in_hm_mtl_apply_all.MAIN_MATERIAL_EXPRESSION := out_check_value;
    END IF;
    IF in_field_name = 'CONSUMPTION_CATEGORY' THEN
      out_check_value                          := upper(trim(in_hm_mtl_apply_all.CONSUMPTION_CATEGORY));
      in_hm_mtl_apply_all.CONSUMPTION_CATEGORY := out_check_value;
    END IF;
    IF in_field_name = 'MATERIAL_WEIGHT' THEN
      out_check_value                     := upper(trim(in_hm_mtl_apply_all.MATERIAL_WEIGHT));
      in_hm_mtl_apply_all.MATERIAL_WEIGHT := out_check_value;
    END IF;
    IF in_field_name = 'LENGTH_NUMBER' THEN
      out_check_value                   := upper(trim(in_hm_mtl_apply_all.LENGTH_NUMBER));
      in_hm_mtl_apply_all.LENGTH_NUMBER := out_check_value;
    END IF;
    IF in_field_name = 'WIDTH_NUMBER' THEN
      out_check_value                  := upper(trim(in_hm_mtl_apply_all.WIDTH_NUMBER));
      in_hm_mtl_apply_all.WIDTH_NUMBER := out_check_value;
    END IF;
    IF in_field_name = 'HIGH_NUMBER' THEN
      out_check_value                 := upper(trim(in_hm_mtl_apply_all.HIGH_NUMBER));
      in_hm_mtl_apply_all.HIGH_NUMBER := out_check_value;
    END IF;
    IF in_field_name = 'MULTI_PLT_STATUS' THEN
      out_check_value                      := upper(trim(in_hm_mtl_apply_all.MULTI_PLT_STATUS));
      in_hm_mtl_apply_all.MULTI_PLT_STATUS := out_check_value;
    END IF;
    IF in_field_name = 'MATERIAL_SPEC' THEN
      out_check_value                   := upper(trim(in_hm_mtl_apply_all.MATERIAL_SPEC));
      in_hm_mtl_apply_all.MATERIAL_SPEC := out_check_value;
    END IF;
    IF in_field_name = 'MATERIAL_COLOR' THEN
      out_check_value                    := upper(trim(in_hm_mtl_apply_all.MATERIAL_COLOR));
      in_hm_mtl_apply_all.MATERIAL_COLOR := out_check_value;
    END IF;
    IF in_field_name = 'PLANT_CODE' THEN
      out_check_value                := upper(trim(in_hm_mtl_apply_all.PLANT_CODE));
      in_hm_mtl_apply_all.PLANT_CODE := out_check_value;
    END IF;
    IF in_field_name = 'SELF_PRODUCTION' THEN
      out_check_value                     := upper(trim(in_hm_mtl_apply_all.SELF_PRODUCTION));
      in_hm_mtl_apply_all.SELF_PRODUCTION := out_check_value;
    END IF;
    IF in_field_name = 'IMPORT_PART' THEN
      out_check_value                 := upper(trim(in_hm_mtl_apply_all.IMPORT_PART));
      in_hm_mtl_apply_all.IMPORT_PART := out_check_value;
    END IF;
    IF in_field_name = 'PRODUCING_AREA' THEN
      out_check_value                    := upper(trim(in_hm_mtl_apply_all.PRODUCING_AREA));
      in_hm_mtl_apply_all.PRODUCING_AREA := out_check_value;
    END IF;
    IF in_field_name = 'MIN_BATCH_QUANTITY' THEN
      out_check_value                        := upper(trim(in_hm_mtl_apply_all.MIN_BATCH_QUANTITY));
      in_hm_mtl_apply_all.MIN_BATCH_QUANTITY := out_check_value;
    END IF;
    IF in_field_name = 'ROUNDING_QUANTITY' THEN
      out_check_value                       := upper(trim(in_hm_mtl_apply_all.ROUNDING_QUANTITY));
      in_hm_mtl_apply_all.ROUNDING_QUANTITY := out_check_value;
    END IF;
  
  end prc_get_field_value;
  procedure prc_must_input_check_apply(in_hm_mtl_apply_all  IN OUT HM_MTL_APPLY_ALL%ROWTYPE,
                                       in_language          in varchar2,
                                       out_PLAN_SPECIALITY  OUT VARCHAR2,
                                       out_IS_FUNCTION_PART OUT VARCHAR2,
                                       retcode              OUT VARCHAR2,
                                       retmsg               OUT VARCHAR2) is
    lcl_count number;
  begin
    --校验字段值输入是否合法
    lcl_count := 0;
    select count(*)
      into lcl_count
      from hm_fnd_values a
     where a.delete_flag = '0'
       and a.value = in_hm_mtl_apply_all.part_family
       and a.parent_value_low = in_hm_mtl_apply_all.product_group
       and a.value_set_id = 'PartFamily';
    if lcl_count = 0 then
      retcode := 'E';
    
      if in_language = 'ZH' then
        retmsg := '备件族节点' || in_hm_mtl_apply_all.part_family || '，不在产品大类' ||
                  in_hm_mtl_apply_all.product_group || '下!';
      else
        retmsg := 'Family Group ' || in_hm_mtl_apply_all.part_family ||
                  ' does not exists! ';
      end if;
      return;
    end if;
  
    lcl_count := 0;
    select count(*), max(PLAN_SPECIALITY), max(IS_FUNCTION_PART)
      into lcl_count, out_PLAN_SPECIALITY, out_IS_FUNCTION_PART
      from hm_mtl_part_family_div a
     where a.delete_flag = '0'
       and a.part_family_div = in_hm_mtl_apply_all.part_family_div
       and a.part_family = in_hm_mtl_apply_all.part_family;
    if lcl_count = 0 then
      retcode := 'E';
      if in_language = 'ZH' then
        retmsg := '备件族名称' || in_hm_mtl_apply_all.part_family_div ||
                  '，不在备件族节点' || in_hm_mtl_apply_all.part_family || '下!';
      else
        retmsg := 'Family Name ' || in_hm_mtl_apply_all.part_family_div ||
                  ' does not exists! ';
      end if;
    
      return;
    end if;
  
    --校验TSP大类是否存在
    lcl_count := 0;
    select count(*)
      into lcl_count
      from hm_fnd_values a
     where a.delete_flag = '0'
       and a.value = in_hm_mtl_apply_all.product_group_three
       and a.value_set_id = 'ProductGroupTSP';
    if lcl_count = 0 then
      retcode := 'E';
    
      if in_language = 'ZH' then
        retmsg := 'TSP大类' || in_hm_mtl_apply_all.product_group_three ||
                  '不存在!';
      else
        retmsg := 'Product group B (forhgms) ' ||
                  in_hm_mtl_apply_all.product_group_three ||
                  ' does not exists! ';
      end if;
      return;
    end if;
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when others then
      retcode := 'E';
      retmsg  := 'procedure prc_must_input_check_apply: operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_must_input_check_apply;
  procedure prc_part_family_check_general(in_hm_mtl_apply_all  IN OUT HM_MTL_GENERAL%ROWTYPE,
                                          in_language          in varchar2,
                                          out_PLAN_SPECIALITY  OUT VARCHAR2,
                                          out_IS_FUNCTION_PART OUT VARCHAR2,
                                          retcode              OUT VARCHAR2,
                                          retmsg               OUT VARCHAR2) is
    lcl_count number;
  begin
    --校验字段值输入是否合法
    lcl_count := 0;
    select count(*)
      into lcl_count
      from hm_fnd_values a
     where a.delete_flag = '0'
       and a.value = in_hm_mtl_apply_all.part_family
       and a.parent_value_low = in_hm_mtl_apply_all.product_group
       and a.value_set_id = 'PartFamily';
    if lcl_count = 0 then
      retcode := 'E';
    
      if in_language = 'ZH' then
        retmsg := '备件专用号' || in_hm_mtl_apply_all.material_code || ',备件族节点' ||
                  in_hm_mtl_apply_all.part_family || '，不在产品大类' ||
                  in_hm_mtl_apply_all.product_group || '下!';
      else
        retmsg := 'Part code ' || in_hm_mtl_apply_all.material_code ||
                  ' family group ' || in_hm_mtl_apply_all.part_family ||
                  ' does not exists! ';
      end if;
      return;
    end if;
  
    lcl_count := 0;
    select count(*), max(PLAN_SPECIALITY), max(IS_FUNCTION_PART)
      into lcl_count, out_PLAN_SPECIALITY, out_IS_FUNCTION_PART
      from hm_mtl_part_family_div a
     where a.delete_flag = '0'
       and a.part_family_div = in_hm_mtl_apply_all.part_family_div
       and a.part_family = in_hm_mtl_apply_all.part_family;
    if lcl_count = 0 then
      retcode := 'E';
      if in_language = 'ZH' then
        retmsg := '备件专用号' || in_hm_mtl_apply_all.material_code || '， 备件族名称' ||
                  in_hm_mtl_apply_all.part_family_div || '，不在备件族节点' ||
                  in_hm_mtl_apply_all.part_family || '下!';
      else
        retmsg := 'Part code ' || in_hm_mtl_apply_all.material_code ||
                  ', part family ' || in_hm_mtl_apply_all.part_family_div ||
                  ' does not exists! ';
      end if;
    
      return;
    end if;
  
    retcode := 'S';
    retmsg  := 'OK';
  exception
    when others then
      retcode := 'E';
      retmsg  := 'procedure prc_must_input_check_apply: operate failure! Exception Code:' ||
                 SQLCODE || ';Exception message:' || SQLERRM;
  end prc_part_family_check_general;
  --校验原厂料号和工厂唯一
  procedure prc_mtl_old_mtlnumber_plant(in_style               in varchar2,
                                        in_language            in varchar2,
                                        in_material_id         in VARCHAR2,
                                        in_old_material_number in VARCHAR2,
                                        in_plantcode           in VARCHAR2,
                                        retcode                OUT VARCHAR2,
                                        retmsg                 OUT VARCHAR2) IS
    lcl_hm_mtl_apply_all HM_MTL_APPLY_ALL%rowtype;
    lcl_oldmtlnumber     VARCHAR2(40);
    lcl_plantcode        VARCHAR2(20);
    lcl_mateiralId       VARCHAR2(20);
    lcl_count            number;
  begin
    lcl_count := 0;
    retcode   := 'S';
    retmsg    := 'OK';
    select max(old_material_number)
      into lcl_oldmtlnumber
      from hm_mtl_general
     where row_id = in_material_id;
    if in_style = 'viewBase' then
      --基本视图修改原厂料号时校验原厂料号和工厂唯一
    
      if lcl_oldmtlnumber != in_old_material_number then
      
        FOR cur_rows IN (SELECT plant_code
                           FROM hm_mtl_plant
                          WHERE delete_flag = '0'
                            and material_id = in_material_id) LOOP
          lcl_plantcode := cur_rows.plant_code;
          select count(*)
            into lcl_count
            from hm_mtl_general a, hm_mtl_plant b
           where b.delete_flag = '0'
             and a.row_id = b.material_id
             and b.plant_code = lcl_plantcode
             and a.old_material_number = in_old_material_number;
          if lcl_count > 0 and substr(lcl_plantcode, 1, 1) = 'X' then
            if in_language = 'ZH' then
              retcode := 'E';
              retmsg  := '原厂备件号:' || in_old_material_number || '已存在工厂：' ||
                         lcl_plantcode || '，不可重复创建！';
            else
              retcode := 'E';
              retmsg  := 'Old Material Number ' || in_old_material_number ||
                         ' has already existed in plant：' || lcl_plantcode || '.';
            end if;
          end if;
        END LOOP;
      
      end if;
    end if;
    if in_style = 'viewPlant' then
      --工厂扩展校验原厂料号和工厂唯一
      select max(a.row_id)
        into lcl_mateiralId
        from hm_mtl_general a, hm_mtl_plant b
       where b.delete_flag = '0'
         and a.row_id = b.material_id
         and plant_code = in_plantcode
         and old_material_number = lcl_oldmtlnumber;
      select count(*)
        into lcl_count
        from view_mtl_old_number_plant
       where plant_code = in_plantcode
         and old_material_number = lcl_oldmtlnumber;
      if lcl_count > 0 and in_material_id != lcl_mateiralId and
         substr(in_plantcode, 1, 1) = 'X' then
        if in_language = 'ZH' then
          retcode := 'E';
          retmsg  := '原厂备件号:' || lcl_oldmtlnumber || '已存在工厂：' ||
                     in_plantcode || '，不可重复创建！';
        else
          retcode := 'E';
          retmsg  := 'Old Material Number ' || lcl_oldmtlnumber ||
                     ' has already existed in plant ' || in_plantcode || '.';
        end if;
      end if;
    end if;
  
  end prc_mtl_old_mtlnumber_plant;
  

end material;
