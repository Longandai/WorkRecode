CREATE OR REPLACE PACKAGE BODY HGVS IS

  --提取指定供应商数据，调用SAP创建供应商主数据的RFC
  PROCEDURE getVendor
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type22,
    itab_base      OUT vendor_base_table,
    itab_company   OUT vendor_company_table,
    itab_purchase  OUT vendor_purchase_table,
    partner_data   OUT vendor_partner_table2,
    contact_data   OUT vendor_contact_table2,
    bank_data      OUT vendor_bank_table,
    withholding_tax_data OUT vendor_withholding_tax_table
  ) IS
  
    l_vendor_code  varchar2(20);
    l_return_batch_id     varchar2(20);
    l_bank_num_length     varchar2(20);
    --组装itab_base所需定义
    l_vendor_base      vendor_base_type := vendor_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL,NULL);
  
    CURSOR cur_vendor_base IS
      SELECT * FROM hm_vendors t
       WHERE t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0'  and  t.row_id = key_id;
    cur_base_row cur_vendor_base%ROWTYPE;
    
    --组装bank_data所需定义
    l_vendor_bank     vendor_bank_type := vendor_bank_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_vendor_bank IS
      SELECT T.*,TT.BANK_NAME BANK_NAME_T 
        FROM hm_vendor_bank_accounts t, HM_BANKS TT
       WHERE /*t.active_range in ('ALL','BIL')
         AND*/ T.BANK_BRANCH_CODE = TT.BANK_BRANCH_CODE(+)
         and t.for_gvs = '1' and t.delete_flag = '0'
         and tt.new_flag='1'--代表是供应商的
         AND t.vendor_id = key_id ; 
    cur_bank_row cur_vendor_bank%ROWTYPE;
        
    --组装contact_data所需定义
    l_vendor_contact     vendor_contact_type2 := vendor_contact_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_vendor_contact IS
      SELECT * FROM hm_vendor_contacts t
       WHERE t.vendor_id = key_id 
         and t.delete_flag='0'; 
    cur_contact_row cur_vendor_contact%ROWTYPE;
        
    --组装itab_company所需定义
    l_vendor_company   vendor_company_type := vendor_company_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                  NULL, NULL, NULL);
  
    CURSOR cur_vendor_company IS
      SELECT * FROM hm_vendor_company_data t
       WHERE t.vendor_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_company_row cur_vendor_company%ROWTYPE;
    
    --组装itab_purchase所需定义
    l_vendor_purchase   vendor_purchase_type := vendor_purchase_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                     NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_vendor_purchase IS
      SELECT * FROM hm_vendor_pur_data t
       WHERE t.vendor_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_purchase_row cur_vendor_purchase%ROWTYPE;
    
    --组装partner_data所需定义
    l_vendor_partner     vendor_partner_type2 := vendor_partner_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_vendor_partner IS
      SELECT tt.*,t.purchase_grp_code FROM hm_vendor_partners tt, hm_vendor_pur_data t, hm_fnd_values ttt
       WHERE tt.pur_grp_id = t.row_id
         and t.vendor_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
         and t.for_gvs = '1' and t.delete_flag = '0' 
         and tt.delete_flag='0'
         and tt.partner_function = ttt.value
         and ttt.value_set_id = 'VendorPartnerFunction'
         and tt.partner_subject_id not like 'TEMP%'
       order by
             ttt.sort_order ; 
    cur_partner_row cur_vendor_partner%ROWTYPE;
    --组装withholding_tax_data所需定义
    l_vendor_withholding_tax     vendor_withholding_tax_type := vendor_withholding_tax_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                                            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                                            NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_vendor_withholding_tax IS
      SELECT tt.*,t.company_code
      FROM HM_VENDOR_TAX tt,hm_vendor_company_data t
       WHERE t.row_id = tt.company_id
         and tt.delete_flag = '0'
         and tt.for_gvs='1'
         and tt.last_version_flag = '2' and tt.operate_status in ('CREATE','UPDATE')
         and tt.vendor_id = key_id;
    cur_withholding_tax_row cur_vendor_withholding_tax%ROWTYPE;
    --组装partnerplant_data所需定义
    /*l_vendor_partnerplant     vendor_partnerplant_type := vendor_partnerplant_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_vendor_partnerplant IS
      SELECT tt.*,t.purchase_grp_code FROM hm_vendor_partners_plant tt, hm_vendor_pur_data t, hm_fnd_values ttt
       WHERE tt.pur_grp_id = t.row_id
         and t.vendor_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
         and t.for_gvs = '1' and t.delete_flag = '0' 
         and tt.partner_function = ttt.value
         and ttt.value_set_id = 'VendorPartnerFunction'
       order by
             ttt.sort_order ; 

    cur_partnerplant_row cur_vendor_partnerplant%ROWTYPE;*/

  BEGIN
    
    retcode := 'S';
    retmsg  := '操作成功';

    select vendor_code into l_vendor_code 
    from hm_vendors where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type22(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'VENDOR';
    sap_input.DATA_KEY1 := l_vendor_code;
    sap_input.DATA_KEY7 := l_return_batch_id;    
    sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
    sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := vendor_base_table();
    bank_data := vendor_bank_table();
    
    open cur_vendor_base;
    loop fetch cur_vendor_base into cur_base_row;
      exit when cur_vendor_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_vendor_base.ROW_ID := cur_base_row.row_id;
      if cur_base_row.OPERATE_STATUS = 'CREATE' then
        /*if cur_base_row.ACCOUNT_GRP_CODE in ('0101','0111') then*/
          l_vendor_base.VENDOR_CODE := cur_base_row.vendor_code;  
        /*else
          l_vendor_base.VENDOR_CODE := '';  
        end if;*/
      else
        l_vendor_base.VENDOR_CODE := cur_base_row.vendor_code;  
      end if;
      
      l_vendor_base.VENDOR_NAME := substr(cur_base_row.vendor_name,1,40);
      l_vendor_base.VENDOR_TITLE := cur_base_row.vendor_title;
      l_vendor_base.POSTAL_CODE_CITY := cur_base_row.postal_code_city;
      l_vendor_base.ACCOUNT_GRP_CODE := cur_base_row.account_grp_code;
      l_vendor_base.COUNTRY := cur_base_row.country;
      l_vendor_base.REGION := cur_base_row.region;
      l_vendor_base.name2  := cur_base_row.name2;
      l_vendor_base.name3  := cur_base_row.name3;
      l_vendor_base.name4  := cur_base_row.name4;
      l_vendor_base.TIME_ZONE := cur_base_row.TIME_ZONE;
      l_vendor_base.city := cur_base_row.city;
      l_vendor_base.LANGUAGE := cur_base_row.LANGUAGE;
      l_vendor_base.SEARCH_TERM := cur_base_row.search_term;
      l_vendor_base.STREET_ROOM := cur_base_row.street_room;
      l_vendor_base.PHONE_NUMBER := cur_base_row.phone_number;
      l_vendor_base.MOBILE_PHONE := cur_base_row.MOBILE_PHONE;
      l_vendor_base.FAX_NUMBER := cur_base_row.fax_number;
      l_vendor_base.EMAIL := cur_base_row.EMAIL;
      l_vendor_base.DATA_LINE := cur_base_row.DATA_LINE;
      l_vendor_base.CUSTOMER_CODE := cur_base_row.customer_code;
      l_vendor_base.TAX_NUMBER1 := cur_base_row.TAX_NUMBER1;
      l_vendor_base.TAX_NUMBER2 := cur_base_row.TAX_NUMBER2;
      l_vendor_base.TAX_NUMBER3 := cur_base_row.TAX_NUMBER3;
      l_vendor_base.SALES_PUR_TAX := cur_base_row.SALES_PUR_TAX;
      l_vendor_base.TAX_BASE   := cur_base_row.TAX_BASE ;
      l_vendor_base.VAT_REG_NO   := cur_base_row.VAT_REG_NO ;
      l_vendor_base.NAME_OF_REPRESENTATIVE   := cur_base_row.NAME_OF_REPRESENTATIVE ;
      l_vendor_base.TYPE_OF_BUSINESS   := cur_base_row.TYPE_OF_BUSINESS ;
      l_vendor_base.TYPE_OF_INDUSTRY   := cur_base_row.TYPE_OF_INDUSTRY ;
      l_vendor_base.INTL_AREA_CODE := cur_base_row.intl_area_code;
      l_vendor_base.INTL_AREA_CODE2 := cur_base_row.intl_area_code2;
      l_vendor_base.CHECK_DIGIT := cur_base_row.CHECK_DIGIT;
      l_vendor_base.DATE_OF_BIRTH := cur_base_row.DATE_OF_BIRTH;   
      l_vendor_base.DATE_OF_PLACE := cur_base_row.DATE_OF_PLACE; 
      l_vendor_base.SEX := cur_base_row.SEX;      
 
      l_vendor_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_vendor_base.master_type := 'VENDOR';
      l_vendor_base.DATA_KEY1 := l_vendor_base.VENDOR_CODE;
      l_vendor_base.DATA_KEY7 := l_return_batch_id;    
      l_vendor_base.DATA_KEY8 := user_name;
      l_vendor_base.PASS_KEY1 := 'BASE';
      l_vendor_base.PASS_KEY2 := l_vendor_base.ROW_ID;
      l_vendor_base.PASS_KEY3 := l_vendor_base.ROW_ID;
      l_vendor_base.PASS_KEY4 := worklist_id;
      l_vendor_base.OPERATE_STATUS := l_vendor_base.OPERATE_STATUS;
      l_vendor_base.TRADING_PARTNER := cur_base_row.trading_partner;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_vendor_base;
      
    end loop;
    close cur_vendor_base;
    
    if sap_input.VIEW_BASE = 'X' THEN
      --组装bank_data
      bank_data := vendor_bank_table();
      
      open cur_vendor_bank;
      loop fetch cur_vendor_bank into cur_bank_row;
        exit when cur_vendor_bank%notfound;
        
        l_vendor_bank.ROW_ID := cur_bank_row.row_id;
        l_vendor_bank.VENDOR_ID := cur_bank_row.VENDOR_ID;
        l_vendor_bank.VENDOR_CODE := l_vendor_code;
        l_vendor_bank.BANK_COUNTRY := cur_bank_row.bank_country;
        l_vendor_bank.BANK_BRANCH_CODE := cur_bank_row.bank_branch_code;
        --cuiyj判断如果银行账号超过所在国家允许的最长长度，则自动截取放到另一个字段20140403
        select h.bank_num_length
          into l_bank_num_length
          from hm_country_banknum_length h
         where h.bank_country = l_vendor_bank.BANK_COUNTRY;
        if l_bank_num_length is not null then
           l_vendor_bank.BANK_ACCOUNT_NUM := substr(cur_bank_row.bank_account_num,1,l_bank_num_length);
           l_vendor_bank.BANK_NUMBER_SUB := substr(cur_bank_row.bank_account_num,l_bank_num_length+1);
        end if;
        --end
        --l_vendor_bank.BANK_ACCOUNT_NUM := cur_bank_row.bank_account_num;
        l_vendor_bank.ACCOUNT_HOLDER_NAME := cur_bank_row.account_holder_name; 
        l_vendor_bank.BANK_NAME := cur_bank_row.bank_name;
        l_vendor_bank.BANK_CONTROL_KEY := cur_bank_row.BANK_CONTROL_KEY; 
        l_vendor_bank.PARTNER_BANK_TYPE := cur_bank_row.PARTNER_BANK_TYPE; 
        l_vendor_bank.INSTRUCTION_KEY := cur_bank_row.INSTRUCTION_KEY;   
        l_vendor_bank.IBAN01 := substr(cur_bank_row.iban_code,1,4); 
        l_vendor_bank.IBAN02 := substr(cur_bank_row.iban_code,5,4); 
        l_vendor_bank.IBAN03 := substr(cur_bank_row.iban_code,9,4); 
        l_vendor_bank.IBAN04 := substr(cur_bank_row.iban_code,13,4); 
        l_vendor_bank.IBAN05 := substr(cur_bank_row.iban_code,17,4); 
        l_vendor_bank.IBAN06 := substr(cur_bank_row.iban_code,21,4); 
        l_vendor_bank.IBAN07 := substr(cur_bank_row.iban_code,25,4); 
        l_vendor_bank.IBAN08 := substr(cur_bank_row.iban_code,29,4); 
        l_vendor_bank.IBAN09 := substr(cur_bank_row.iban_code,33,2); 
        if cur_bank_row.BANK_VALDATE is not null then
        l_vendor_bank.BANK_VALDATE:= substr(cur_bank_row.bank_valdate,1,4)||'-'||substr(cur_bank_row.bank_valdate,5,2)||'-'||substr(cur_bank_row.bank_valdate,7,2);  
        end if;    
        bank_data.extend;
        bank_data(bank_data.count) := l_vendor_bank;
              
      end loop;
      close cur_vendor_bank;

      --组装contact_data
      contact_data := vendor_contact_table2();
      
      open cur_vendor_contact;
      loop fetch cur_vendor_contact into cur_contact_row;
        exit when cur_vendor_contact%notfound;
        
        l_vendor_contact.ROW_ID := cur_contact_row.row_id;
        l_vendor_contact.VENDOR_ID := cur_contact_row.VENDOR_ID;
        l_vendor_contact.VENDOR_CODE := l_vendor_code;
        l_vendor_contact.FIRST_NAME := cur_contact_row.FIRST_NAME;
        l_vendor_contact.CONTACT_NAME := cur_contact_row.CONTACT_NAME;
        l_vendor_contact.TELEPHONE_NUMBER := cur_contact_row.TELEPHONE_NUMBER;
        l_vendor_contact.DEPARTMENT := cur_contact_row.DEPARTMENT;
        l_vendor_contact.FUNCTION := cur_contact_row.FUNCTION;
  
        contact_data.extend;
        contact_data(contact_data.count) := l_vendor_contact;
              
      end loop;
      close cur_vendor_contact;
      
    end if;
    
     --组装withholding_tax_data
      
      withholding_tax_data := vendor_withholding_tax_table();
        
      open cur_vendor_withholding_tax;
      loop fetch cur_vendor_withholding_tax into cur_withholding_tax_row;
        exit when cur_vendor_withholding_tax%notfound;
        sap_input.VIEW_P0000 := 'X';--注意，此处用VIEW_P0000来代替VIEW_TAX，否则需要修改很多地方
        l_vendor_withholding_tax.ROW_ID := cur_withholding_tax_row.row_id;
        l_vendor_withholding_tax.VENDOR_CODE := l_vendor_code;
        l_vendor_withholding_tax.COMPANY_CODE := cur_withholding_tax_row.company_code;
        l_vendor_withholding_tax.WITH_T_TYPE := cur_withholding_tax_row.WITH_T_TYPE;
        l_vendor_withholding_tax.W_TAX_CODE := cur_withholding_tax_row.W_TAX_CODE;
        l_vendor_withholding_tax.LIABLE := cur_withholding_tax_row.LIABLE;
        l_vendor_withholding_tax.EXEMPTION_NUMBER := cur_withholding_tax_row.EXEMPTION_NUMBER;
        l_vendor_withholding_tax.EXEM := cur_withholding_tax_row.EXEM;
        l_vendor_withholding_tax.EXEMPT_FROM := cur_withholding_tax_row.EXEMPT_FROM;
        l_vendor_withholding_tax.EXEMPT_TO := cur_withholding_tax_row.EXEMPT_TO;
        
        l_vendor_withholding_tax.remark := cur_withholding_tax_row.remark;      
        l_vendor_withholding_tax.master_type := 'VENDOR';
        l_vendor_withholding_tax.DATA_KEY1 := l_vendor_code;
        l_vendor_withholding_tax.DATA_KEY2 := '';
        l_vendor_withholding_tax.DATA_KEY7 := l_return_batch_id;    
        l_vendor_withholding_tax.DATA_KEY8 := user_name;
        l_vendor_withholding_tax.PASS_KEY1 := 'TAX';
        l_vendor_withholding_tax.PASS_KEY2 := cur_withholding_tax_row.ROW_ID;
        l_vendor_withholding_tax.PASS_KEY3 := cur_withholding_tax_row.VENDOR_ID;
        l_vendor_withholding_tax.PASS_KEY4 := worklist_id;
        l_vendor_withholding_tax.OPERATE_STATUS := cur_withholding_tax_row.OPERATE_STATUS;  
        
        withholding_tax_data.extend;
        withholding_tax_data(withholding_tax_data.count) := l_vendor_withholding_tax;
                
      end loop;
      close cur_vendor_withholding_tax;
    --组装itab_company
    itab_company := vendor_company_table();
    
    open cur_vendor_company;
    loop fetch cur_vendor_company into cur_company_row;
      exit when cur_vendor_company%notfound;
      
      sap_input.VIEW_COMPANY := 'X';

      l_vendor_company.row_id := cur_company_row.row_id;
      l_vendor_company.vendor_id := cur_company_row.vendor_id;
      l_vendor_company.VENDOR_CODE := l_vendor_code;
      l_vendor_company.company_code := cur_company_row.company_code;
      l_vendor_company.sequence_no := cur_company_row.sequence_no;
      l_vendor_company.reconcile_account := cur_company_row.reconcile_account;
      l_vendor_company.payment_method := cur_company_row.payment_method;
      l_vendor_company.CLRG_WITH_CUST := cur_company_row.CLRG_WITH_CUST;
      l_vendor_company.payment_term := cur_company_row.payment_term;
      l_vendor_company.cash_mgt_group := cur_company_row.cash_mgt_group;
      l_vendor_company.CHK_CASHNG_TIME := cur_company_row.CHK_CASHNG_TIME;
      l_vendor_company.CHK_DOUBLE_INV := cur_company_row.CHK_DOUBLE_INV;
      l_vendor_company.PERSONNEL_NUMBER := cur_company_row.PERSONNEL_NUMBER;
      l_vendor_company.INTEREST_FREQ := cur_company_row.INTEREST_FREQ;
      l_vendor_company.AUTO_PAY_TRANS_HOUSE_BANK := cur_company_row.AUTO_PAY_TRANS_HOUSE_BANK;
      l_vendor_company.BILL_OF_EXCHANGE_LIMIT := cur_company_row.BILL_OF_EXCHANGE_LIMIT;      
      l_vendor_company.DUNNING_LEVEL := cur_company_row.DUNNING_LEVEL;
      l_vendor_company.DUNN_PROCEDURE := cur_company_row.DUNN_PROCEDURE;    
      l_vendor_company.created_by := cur_company_row.created_by;
      l_vendor_company.created := cur_company_row.created;
      l_vendor_company.last_upd_by := cur_company_row.last_upd_by;
      l_vendor_company.last_upd := cur_company_row.last_upd;
      l_vendor_company.modification_num := cur_company_row.modification_num;
      l_vendor_company.last_version_flag := cur_company_row.last_version_flag;
      l_vendor_company.version := cur_company_row.version;
      l_vendor_company.active_flag := cur_company_row.active_flag;
      l_vendor_company.lock_flag := cur_company_row.lock_flag;
      l_vendor_company.delete_flag := cur_company_row.delete_flag;
      l_vendor_company.operate_status := cur_company_row.operate_status;
      l_vendor_company.remark := cur_company_row.remark;      
      l_vendor_company.master_type := 'VENDOR';
      l_vendor_company.DATA_KEY1 := l_vendor_company.VENDOR_CODE;
      l_vendor_company.DATA_KEY2 := l_vendor_company.COMPANY_CODE;
      l_vendor_company.DATA_KEY7 := l_return_batch_id;    
      l_vendor_company.DATA_KEY8 := user_name;
      l_vendor_company.PASS_KEY1 := 'COMPANY';
      l_vendor_company.PASS_KEY2 := l_vendor_company.ROW_ID;
      l_vendor_company.PASS_KEY3 := l_vendor_company.VENDOR_ID;
      l_vendor_company.PASS_KEY4 := worklist_id;
      l_vendor_company.OPERATE_STATUS := l_vendor_company.OPERATE_STATUS;
       
      itab_company.extend;
      itab_company(itab_company.count) := l_vendor_company;
      
    end loop;
    close cur_vendor_company;
  
    --组装itab_purchase
    itab_purchase := vendor_purchase_table();
    
    open cur_vendor_purchase;
    loop fetch cur_vendor_purchase into cur_purchase_row;
      exit when cur_vendor_purchase%notfound;
      
      sap_input.VIEW_PURCHASE := 'X';

      l_vendor_purchase.row_id := cur_purchase_row.row_id;
      l_vendor_purchase.vendor_id := cur_purchase_row.vendor_id;
      l_vendor_purchase.vendor_code := l_vendor_code;
      l_vendor_purchase.purchase_grp_code := cur_purchase_row.purchase_grp_code;
      l_vendor_purchase.order_currency := cur_purchase_row.order_currency;
      l_vendor_purchase.payment_term := cur_purchase_row.payment_term;
      l_vendor_purchase.INCOTERMS1 := cur_purchase_row.INCOTERMS1;
      l_vendor_purchase.INCOTERMS2 := cur_purchase_row.INCOTERMS2;
      l_vendor_purchase.MINIMUM_ORDER_VALUE := cur_purchase_row.MINIMUM_ORDER_VALUE;
      l_vendor_purchase.SCHEMA_GROUP_VENDOR := cur_purchase_row.SCHEMA_GROUP_VENDOR;
      l_vendor_purchase.PRICING_DATE_CONTROL := cur_purchase_row.PRICING_DATE_CONTROL;
      l_vendor_purchase.GR_BASED_INV_VERIF := cur_purchase_row.GR_BASED_INV_VERIF;
      l_vendor_purchase.AUTOEVALGRSETMT_DEL := cur_purchase_row.AUTOEVALGRSETMT_DEL;
      l_vendor_purchase.AUTOEVALGRSETMT_RET := cur_purchase_row.AUTOEVALGRSETMT_RET;
      l_vendor_purchase.AUTOMATIC_PURCHASE_ORDER := cur_purchase_row.AUTOMATIC_PURCHASE_ORDER;
      l_vendor_purchase.SUBSQUENT_SETTLEMENT := cur_purchase_row.SUBSQUENT_SETTLEMENT;
      l_vendor_purchase.OFFICE_OF_ENTRY := cur_purchase_row.OFFICE_OF_ENTRY;
      l_vendor_purchase.SERV_LEVEL := cur_purchase_row.SERV_LEVEL;
      l_vendor_purchase.PLAN_DELIVER_TIME := cur_purchase_row.PLAN_DELIVER_TIME;
      l_vendor_purchase.EKGRP := cur_purchase_row.ekgrp;
      
      
      
      
      
      l_vendor_purchase.created_by := cur_purchase_row.created_by;
      l_vendor_purchase.created := cur_purchase_row.created;
      l_vendor_purchase.last_upd_by := cur_purchase_row.last_upd_by;
      l_vendor_purchase.last_upd := cur_purchase_row.last_upd;
      l_vendor_purchase.modification_num := cur_purchase_row.modification_num;
      l_vendor_purchase.last_version_flag := cur_purchase_row.last_version_flag;
      l_vendor_purchase.version := cur_purchase_row.version;
      l_vendor_purchase.active_flag := cur_purchase_row.active_flag;
      l_vendor_purchase.lock_flag := cur_purchase_row.lock_flag;
      l_vendor_purchase.delete_flag := cur_purchase_row.delete_flag;
      l_vendor_purchase.operate_status := cur_purchase_row.operate_status;
      l_vendor_purchase.remark := cur_purchase_row.remark;
      
      l_vendor_purchase.master_type := 'VENDOR';
      l_vendor_purchase.DATA_KEY1 := l_vendor_purchase.VENDOR_CODE;
      l_vendor_purchase.DATA_KEY2 := l_vendor_purchase.PURCHASE_GRP_CODE;
      l_vendor_purchase.DATA_KEY7 := l_return_batch_id;    
      l_vendor_purchase.DATA_KEY8 := user_name;
      l_vendor_purchase.PASS_KEY1 := 'PURCHASE';
      l_vendor_purchase.PASS_KEY2 := l_vendor_purchase.ROW_ID;
      l_vendor_purchase.PASS_KEY3 := l_vendor_purchase.VENDOR_ID;
      l_vendor_purchase.PASS_KEY4 := worklist_id;
      l_vendor_purchase.OPERATE_STATUS := l_vendor_purchase.OPERATE_STATUS;
       
      itab_purchase.extend;
      itab_purchase(itab_purchase.count) := l_vendor_purchase;
      
    end loop;
    close cur_vendor_purchase;

    --组装partner_data
    if sap_input.VIEW_PURCHASE = 'X' THEN
      partner_data := vendor_partner_table2();
      --partnerplant_data := vendor_partnerplant_table();
      
      open cur_vendor_partner;
      loop fetch cur_vendor_partner into cur_partner_row;
        exit when cur_vendor_partner%notfound;
        
        l_vendor_partner.ROW_ID := cur_partner_row.row_id;
        l_vendor_partner.PUR_GRP_ID := cur_partner_row.PUR_GRP_ID;
        l_vendor_partner.VENDOR_CODE := l_vendor_code;
        l_vendor_partner.PURCHASE_GRP_CODE := cur_partner_row.PURCHASE_GRP_CODE;
        l_vendor_partner.PARTNER_SUBJECT_ID := cur_partner_row.PARTNER_SUBJECT_ID;
        l_vendor_partner.PARTNER_FUNCTION := cur_partner_row.PARTNER_FUNCTION;
        l_vendor_partner.PARTNER_COUNTER := cur_partner_row.PARTNER_COUNTER;
        l_vendor_partner.PARTNER_REFERENCE := cur_partner_row.PARTNER_REFERENCE;
        
        partner_data.extend;
        partner_data(partner_data.count) := l_vendor_partner;
              
      end loop;
      close cur_vendor_partner;

      /*open cur_vendor_partnerplant;
      loop fetch cur_vendor_partnerplant into cur_partnerplant_row;
        exit when cur_vendor_partnerplant%notfound;
        
        l_vendor_partnerplant.ROW_ID := cur_partnerplant_row.row_id;
        l_vendor_partnerplant.PUR_GRP_ID := cur_partnerplant_row.PUR_GRP_ID;
        l_vendor_partnerplant.VENDOR_CODE := l_vendor_code;
        l_vendor_partnerplant.PURCHASE_GRP_CODE := cur_partnerplant_row.PURCHASE_GRP_CODE;
        l_vendor_partnerplant.PLANT_CODE := cur_partnerplant_row.plant_code;
        l_vendor_partnerplant.PARTNER_SUBJECT_ID := cur_partnerplant_row.PARTNER_SUBJECT_ID;
        l_vendor_partnerplant.PARTNER_FUNCTION := cur_partnerplant_row.PARTNER_FUNCTION;
        l_vendor_partnerplant.PARTNER_COUNTER := cur_partnerplant_row.PARTNER_COUNTER;
        l_vendor_partnerplant.PARTNER_REFERENCE := cur_partnerplant_row.PARTNER_REFERENCE;
        
        partnerplant_data.extend;
        partnerplant_data(partnerplant_data.count) := l_vendor_partnerplant;
              
      end loop;
      close cur_vendor_partnerplant;*/

    end if;

    IF sap_input.VIEW_BASE = 'X' OR sap_input.VIEW_COMPANY = 'X' OR sap_input.VIEW_PURCHASE = 'X' OR 
       sap_input.VIEW_SALES = 'X' OR sap_input.VIEW_PLANT = 'X' OR sap_input.VIEW_MRP = 'X' OR 
       sap_input.VIEW_STORAGE = 'X' OR sap_input.VIEW_QM = 'X' OR sap_input.VIEW_COST = 'X' OR 
       sap_input.VIEW_COST1 = 'X' OR sap_input.VIEW_COST2 = 'X' OR sap_input.VIEW_IM = 'X' OR 
       sap_input.VIEW_WM = 'X' OR sap_input.VIEW_MRP2 = 'X' OR sap_input.VIEW_SALESORG = 'X' OR 
       sap_input.VIEW_SALESPLANT = 'X' OR sap_input.VIEW_P0000 = 'X' OR sap_input.VIEW_P0001 = 'X' OR 
       sap_input.VIEW_P0002 = 'X' OR sap_input.VIEW_P0006 = 'X' THEN
      sap_input.NULL_VIEW := '';
    ELSE
      sap_input.NULL_VIEW := 'X';
    END IF;
           
   EXCEPTION
    WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getVendor;


	--提取指定物料数据，调用SAP创建物料主数据的RFC---new20080326
  PROCEDURE getMaterial
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    submit_views   in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type22,
    itab_base      OUT material_base_table3,
    desc_data      out material_desc_table,
    unit_data      out material_unit_table,
    itab_purchase  out material_purchase_table,
    sourcelist_data OUT material_sourcelist_table,
    itab_cost      out material_acco_table,
    itab_salesorg out material_sales_table2,
    itab_class      out MATERIAL_CLASS_TABLE,
    itab_tax      out MATERIAL_TAX_TABLE,
    itab_STORAGE      out MATERIAL_STORAGE_TABLE
  ) IS
  
    l_material_code  varchar2(20);
    l_industry       varchar2(10);
    l_material_type  varchar2(250);
    l_material_descrition varchar2(250);
    l_primary_uom         varchar2(10);
    l_order_uom           varchar2(10);
    l_variable_uom        varchar2(10);
    
    l_return_batch_id     varchar2(20);

    l_str_split_table  str_split_table := str_split_table();
            
    --组装itab_base所需定义
    l_material_base      material_base_type3 := material_base_type3(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_material_base IS
      SELECT t.* FROM hm_mtl_general t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_material_base%ROWTYPE;
    
    CURSOR cur_material_info(p_row_id IN VARCHAR2) IS
      SELECT t.* FROM hm_mtl_general t
       WHERE t.row_id = p_row_id ;
    
    --组装unit_data所需定义
    l_material_unit      material_unit_type := material_unit_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL);
    
    CURSOR cur_material_unit IS
/*      SELECT tt.*, t.material_code FROM hm_mtl_unit_data tt, hm_mtl_general t
       WHERE tt.material_id = t.row_id
         and tt.UNIT_TARGET <> t.PRIMARY_UOM
         and t.row_id = key_id ;
*/    
    SELECT * FROM hm_mtl_unit_data t
     WHERE t.material_id = key_id ;
    cur_unit_row cur_material_unit%ROWTYPE;
    
    --组装desc_data所需定义
    l_material_desc      material_desc_type := material_desc_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_material_desc IS
    SELECT * FROM hm_mtl_desc_data t
     WHERE t.material_id = key_id ;
    cur_desc_row cur_material_desc%ROWTYPE;
    --组装itab_class所需定义
    l_material_class material_class_type := material_class_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    --组装itab_purchase所需定义
    l_material_purchase      material_purchase_type := material_purchase_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL,NULL);
  
    CURSOR cur_material_purchase IS
      SELECT * FROM hm_mtl_purchase t
       WHERE t.material_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_purchase_row cur_material_purchase%ROWTYPE;
    
    --组装sourcelist_data所需定义
    l_material_sourcelist      material_sourcelist_type := material_sourcelist_type(NULL, NULL, NULL, NULL, NULL, NULL);
    
    --组装itab_tax所需定义
    l_material_tax material_tax_type := material_tax_type(NULL, NULL, NULL, NULL,NULL, NULL);
    CURSOR cur_material_tax IS
      SELECT * FROM hm_mtl_tax t
       WHERE t.material_id = key_id --and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE') --deleted by zhangbiao 20100225
       and t.delete_flag = '0';
    cur_tax_row cur_material_tax%ROWTYPE;
    --组装itab_STORAGE所需定义
    l_material_STORAGE material_STORAGE_type := material_STORAGE_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                          NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_material_STORAGE IS
      SELECT * FROM hm_mtl_STORAGE_data t
       WHERE t.material_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.delete_flag = '0';
    cur_STORAGE_row cur_material_STORAGE%ROWTYPE;
   
    --以上itab_account, itab_cost组装，
    --将被下面的 itab_cost,itab_cost1,itab_cost2 替代
    l_material_acco       material_acco_type := material_acco_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    CURSOR cur_material_acco IS
      SELECT *
        FROM hm_mtl_accounting ac
       WHERE AC.material_id = key_id and AC.last_version_flag = '2' and AC.operate_status in ('CREATE','UPDATE')
         and ac.for_gvs = '1' and ac.delete_flag = '0';

      cur_acco_row cur_material_acco%ROWTYPE;
        
      
    --组装itab_salesorg所需定义
    l_material_salesorg       material_sales_type2 := material_sales_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL);
    
    CURSOR cur_material_salesorg IS
      SELECT * FROM hm_mtl_sales_org_data t
       WHERE t.material_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_salesorg_row cur_material_salesorg%ROWTYPE;
    
        
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select t.material_code, t.industry, t.material_type, 
           t.material_descrition,t.primary_uom,
           t.order_uom, t.variable_uom
      into l_material_code, l_industry, l_material_type,
           l_material_descrition, l_primary_uom,
           l_order_uom, l_variable_uom
      from hm_mtl_general t where t.row_id = key_id;
        
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type22(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                 NULL, NULL, NULL, NULL, NULL);

    sap_input.MASTER_TYPE := 'MATERIAL';
    sap_input.DATA_KEY1 := l_material_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := material_base_table3();
    desc_data := material_desc_table();
    unit_data := material_unit_table();
    itab_class := material_class_table();
    open cur_material_base;
    loop fetch cur_material_base into cur_base_row;
      exit when cur_material_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_material_base.ROW_ID := cur_base_row.row_id;
      
      l_material_base.MATERIAL_CODE := cur_base_row.MATERIAL_CODE;
      l_material_base.MATERIAL_DESCRITION := substr(cur_base_row.MATERIAL_DESCRITION,1,40);
      --l_material_base.ABANDON_FLAG := cur_base_row.ABANDON_FLAG;
      l_material_base.INDUSTRY := cur_base_row.INDUSTRY;
      l_material_base.MATERIAL_TYPE := cur_base_row.MATERIAL_TYPE;
      l_material_base.PRIMARY_UOM := cur_base_row.PRIMARY_UOM;
      l_material_base.MTL_GROUP_CODE := cur_base_row.MTL_GROUP_CODE;
      l_material_base.OLD_MATERIAL_NUMBER := cur_base_row.OLD_MATERIAL_NUMBER;
      l_material_base.EXT_MTL_GROUP_CODE := cur_base_row.EXT_MTL_GROUP_CODE;
      l_material_base.DEPARTMENT := cur_base_row.DEPARTMENT;
      --l_material_base.LAB_STUDIO := cur_base_row.LAB_STUDIO;
      --l_material_base.PRODUCT_ALLOCATION := cur_base_row.PRODUCT_ALLOCATION;
      --l_material_base.MULTI_PLT_STATUS := cur_base_row.MULTI_PLT_STATUS;
      l_material_base.NORMAL_PRJ_CLASS_GRP := cur_base_row.NORMAL_PRJ_CLASS_GRP;
      l_material_base.MEASURE := cur_base_row.MEASURE;
      l_material_base.MEASURE_FT3 := cur_base_row.measure_ft3;
      l_material_base.MTL_GRP_PACK := cur_base_row.MTL_GRP_PACK;
      l_material_base.EAN_UPC1 := cur_base_row.EAN_UPC1;
      l_material_base.EAN := cur_base_row.EAN;
      l_material_base.INDUSTRY_STD_DESC := cur_base_row.INDUSTRY_STD_DESC;
      --l_material_base.DOCUMENT_NO := cur_base_row.DOCUMENT_NO;
      --l_material_base.EFFECTIVE_START_DATE := cur_base_row.EFFECTIVE_START_DATE;
      --l_material_base.PARA_EFFECT_VAL := cur_base_row.PARA_EFFECT_VAL;
      --l_material_base.PRIVILEGE := cur_base_row.PRIVILEGE;
      l_material_base.WEIGHT_UOM_CODE := cur_base_row.WEIGHT_UOM_CODE;
      l_material_base.WEIGHT := cur_base_row.WEIGHT;
      l_material_base.VOLUME_UOM_CODE := cur_base_row.VOLUME_UOM_CODE;
      l_material_base.VOLUME := cur_base_row.VOLUME;
      l_material_base.NET_WEIGHT := cur_base_row.NET_WEIGHT;
      --l_material_base.MTL_CLASS := cur_base_row.MTL_CLASS;
      --l_material_base.CAD_FLAG := cur_base_row.CAD_FLAG;
      l_material_base.BASIC_MTL := cur_base_row.BASIC_MTL;
      --l_material_base.DG_PARA_PROFILE := cur_base_row.DG_PARA_PROFILE;
      --l_material_base.ENV_RELATED := cur_base_row.ENV_RELATED;
      --l_material_base.HIGH_STICK := cur_base_row.HIGH_STICK;
      --l_material_base.BATCH_LIQUID := cur_base_row.BATCH_LIQUID;
      --l_material_base.NO_LINK := cur_base_row.NO_LINK;
      l_material_base.JOURNAL_PAGE_NUMBER := cur_base_row.JOURNAL_PAGE_NUMBER;
      l_material_base.JOURNAL_PAGE_FORMAT := cur_base_row.JOURNAL_PAGE_FORMAT;
      l_material_base.PAGES := cur_base_row.PAGES;
      --l_material_base.HALF_CONFIG_MTL := cur_base_row.HALF_CONFIG_MTL;
      --l_material_base.CONFIG_MTL := cur_base_row.CONFIG_MTL;
      --l_material_base.VARIANT := cur_base_row.VARIANT;
      l_material_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_material_base.CREATED := cur_base_row.CREATED;
      l_material_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_material_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_material_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_material_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_material_base.VERSION := cur_base_row.VERSION;
      l_material_base.ACTIVE_FLAG := cur_base_row.ACTIVE_FLAG;
      l_material_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_material_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_material_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_material_base.REMARK := cur_base_row.REMARK;
      l_material_base.CHARGE_OF_REFRIGANT := cur_base_row.charge_of_refrigant;
      l_material_base.MFR_PART_NUMBER := cur_base_row.mfr_part_number;
      l_material_base.MANUFACTURE := cur_base_row.manufacture;
      l_material_base.HPIITEMCODE := cur_base_row.hpiitemcode;
      IF length(l_material_base.MANUFACTURE) = 4 THEN
        l_material_base.MANUFACTURE := lpad(l_material_base.MANUFACTURE,10,'0');
      END IF;
      l_material_base.ORDER_UOM := cur_base_row.order_uom;
      l_material_base.VARIABLE_UOM := cur_base_row.VARIABLE_UOM;
      
      --added by zhangbiao 20081102 isoemflag,productland
      --l_material_base.IS_OEM_FLAG := cur_base_row.IS_OEM_FLAG;
      --l_material_base.PRODUCT_LAND := cur_base_row.PRODUCT_LAND;      
      
      l_material_base.master_type := 'MATERIAL';
      l_material_base.DATA_KEY1 := l_material_base.MATERIAL_CODE;
      l_material_base.DATA_KEY7 := l_return_batch_id;    
      l_material_base.DATA_KEY8 := user_name;
      l_material_base.PASS_KEY1 := 'BASE';
      l_material_base.PASS_KEY2 := l_material_base.ROW_ID;
      l_material_base.PASS_KEY3 := l_material_base.ROW_ID;
      l_material_base.PASS_KEY4 := worklist_id;
      l_material_base.OPERATE_STATUS := l_material_base.OPERATE_STATUS;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_material_base;
      
      l_material_unit.MATERIAL_CODE := l_material_base.MATERIAL_CODE;
      l_material_unit.UNIT_TARGET := l_material_base.PRIMARY_UOM;
      l_material_unit.UNIT_TARGET2BUNCHBASE := 1;
      l_material_unit.BUNCHBASE := 1;
      
      unit_data.extend;
      unit_data(unit_data.count) := l_material_unit;
      
      --组装itab_class
      l_material_class.MATERIAL_CODE := l_material_base.MATERIAL_CODE;
      l_material_class.KLART := '001';
      
      l_material_class.CLASS_TYPE := 'SPECNUMBER';
      l_material_class.CLASS_DESC := 'SPECNUMBER';
      ----l_material_class.CLASS_VALUE := cur_base_row.special_technical_number;
      ----itab_class.extend;
      ----itab_class(itab_class.count) := l_material_class;

      ---ZHANGBIAO 20090803分割字符串成表格
      l_str_split_table := str_split_table();
      --l_str_split_table := comm_util.FUNC_SPLIT(replace(cur_base_row.special_technical_number,chr(13),''),chr(10));--chr(13)||chr(10)
      l_str_split_table := comm_util.FUNC_SPLIT(cur_base_row.special_technical_number,',');
      for i in 1..l_str_split_table.count 
      loop             
        l_material_class.CLASS_VALUE := l_str_split_table(i);
            
        itab_class.extend;
        itab_class(itab_class.count) := l_material_class;
      end loop;

           
      l_material_class.CLASS_TYPE := 'ZPACKAGE';
      l_material_class.CLASS_DESC := 'ZMETAL';
      l_material_class.CLASS_VALUE := cur_base_row.package_weight_metal;
      itab_class.extend;
      itab_class(itab_class.count) := l_material_class;
      
       l_material_class.CLASS_DESC := 'ZPLASTIC';
       l_material_class.CLASS_VALUE := cur_base_row.package_weight_PLASTIC;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
       
       l_material_class.CLASS_DESC := 'ZPOLYSTIREN';
       l_material_class.CLASS_VALUE := cur_base_row.package_weight_POLYSTIREN;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
       
       l_material_class.CLASS_DESC := 'ZWOOD';
       l_material_class.CLASS_VALUE := cur_base_row.package_weight_WOOD;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
       
       l_material_class.CLASS_DESC := 'ZPAPER';
       l_material_class.CLASS_VALUE := cur_base_row.package_weight_paper;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;

       --欧洲物料新增加字段
       l_material_class.CLASS_TYPE := 'ZCLASSIFICATION';
       l_material_class.CLASS_DESC := 'LABELLING';
       l_material_class.CLASS_VALUE := cur_base_row.labelling;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
       
       l_material_class.CLASS_DESC := 'OPTIONS';
       l_material_class.CLASS_VALUE := cur_base_row.options;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
       
       l_material_class.CLASS_DESC := 'CATEGORY';
       l_material_class.CLASS_VALUE := cur_base_row.category;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
    
       l_material_class.CLASS_DESC := 'TYPE';
       l_material_class.CLASS_VALUE := cur_base_row.Type;
       itab_class.extend;
       itab_class(itab_class.count) := l_material_class;
          
       for cur_row in (select material_code from hm_mtl_general a,hm_mtl_sales_org_data b where a.row_id = b.material_id and b.delete_flag = '0' and b.sales_group = '62B0' and a.material_code = l_material_base.MATERIAL_CODE)
       loop
         l_material_class.KLART := '023';      
         l_material_class.CLASS_TYPE := 'ZHRT_BATCH';
         
         l_material_class.CLASS_DESC := 'ZHRT_DECNUM1';
         l_material_class.CLASS_VALUE := l_material_base.BASIC_MTL;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'ZHRT_COO1';
         l_material_class.CLASS_VALUE := cur_base_row.primary_uom;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'ZHRT_MARA_MATERIAL';
         l_material_class.CLASS_VALUE := cur_base_row.material_code;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         /*l_material_class.CLASS_DESC := 'ZHRT_CUSTOFF';
         l_material_class.CLASS_VALUE := '';
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;*/
         
         l_material_class.CLASS_DESC := 'ZHRT_MCH1_DATE';
         l_material_class.CLASS_VALUE := '';
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
       end loop;
       -- 日本销售组织的class视图数据
       for cur_row in (select material_code from hm_mtl_general a,hm_mtl_sales_org_data b where a.row_id = b.material_id and b.delete_flag = '0' and b.sales_group = '6400' and a.material_code = l_material_base.MATERIAL_CODE)
       loop
         itab_class.delete;
         l_material_class.KLART := '001';      
         l_material_class.CLASS_TYPE := 'ZHJSMAT';
         
         l_material_class.CLASS_DESC := 'HJSMAT01';
         l_material_class.CLASS_VALUE := cur_base_row.conversion_weight;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HJSMAT02';
         l_material_class.CLASS_VALUE := cur_base_row.saisu;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HJSMAT03';
         l_material_class.CLASS_VALUE := cur_base_row.inventory_manage_flag;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HJSMAT04';
         l_material_class.CLASS_VALUE := cur_base_row.i_box_code;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HJSMAT05';
         l_material_class.CLASS_VALUE := cur_base_row.sizes;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HJSMAT06';
         l_material_class.CLASS_VALUE := cur_base_row.sales_price;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         /*l_material_class.CLASS_DESC := 'HJSMAT07';
         if trim (cur_base_row.distribution_period) is not null then
           l_material_class.CLASS_VALUE := to_char(to_date(cur_base_row.distribution_period,'yyyy-mm-dd'),'yyyymmdd');
         else
           l_material_class.CLASS_VALUE := '';
         end if;         
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;*/
         
         l_material_class.CLASS_DESC := 'HJSMAT08';
         l_material_class.CLASS_VALUE := cur_base_row.package_quantity;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         /*l_material_class.CLASS_DESC := 'ZHRT_CUSTOFF';
         l_material_class.CLASS_VALUE := '';
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'ZHRT_MCH1_DATE';
         l_material_class.CLASS_VALUE := '';
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;*/
       end loop;
        -- 6440class视图数据
       for cur_row in (select material_code from hm_mtl_general a,hm_mtl_sales_org_data b where a.row_id = b.material_id and b.delete_flag = '0' and b.sales_group = '6440' and a.material_code = l_material_base.MATERIAL_CODE)
       loop
         itab_class.delete;
         l_material_class.KLART := '001';      
         l_material_class.CLASS_TYPE := 'ZHASMAT';
         
         l_material_class.CLASS_DESC := 'HASMAT09';
         l_material_class.CLASS_VALUE := cur_base_row.ifpinfan;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HASMAT10';
         l_material_class.CLASS_VALUE := cur_base_row.pinfan;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HASMAT11';
         l_material_class.CLASS_VALUE := cur_base_row.hz;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HASMAT12';
         l_material_class.CLASS_VALUE := cur_base_row.capacity;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HASMAT13';
         l_material_class.CLASS_VALUE := cur_base_row.series;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         l_material_class.CLASS_DESC := 'HASMAT14';
         l_material_class.CLASS_VALUE := cur_base_row.gas_kind;
         itab_class.extend;
         itab_class(itab_class.count) := l_material_class;
         
         
       end loop;
      end loop;
    close cur_material_base;    

    if sap_input.VIEW_BASE = 'X' then
      open cur_material_desc;
      loop fetch cur_material_desc into cur_desc_row;
        exit when cur_material_desc%notfound;
        
        l_material_desc.ROW_ID := cur_desc_row.ROW_ID;
        l_material_desc.MATERIAL_ID := cur_desc_row.MATERIAL_ID;
        l_material_desc.MATERIAL_CODE := l_material_code;
        l_material_desc.LANGUAGE := substr(cur_desc_row.LANGUAGE,1,1);
        l_material_desc.DESCRIPTION := cur_desc_row.DESCRIPTION;
        l_material_desc.CREATED_BY := cur_desc_row.CREATED_BY;
        l_material_desc.CREATED := cur_desc_row.CREATED;
        l_material_desc.LAST_UPD_BY := cur_desc_row.LAST_UPD_BY;
        l_material_desc.LAST_UPD := cur_desc_row.LAST_UPD;
        l_material_desc.MODIFICATION_NUM := cur_desc_row.MODIFICATION_NUM;
        l_material_desc.LAST_VERSION_FLAG := cur_desc_row.LAST_VERSION_FLAG;
        l_material_desc.VERSION := cur_desc_row.VERSION;
        l_material_desc.ACTIVE_FLAG := cur_desc_row.ACTIVE_FLAG;
        l_material_desc.LOCK_FLAG := cur_desc_row.LOCK_FLAG;
        l_material_desc.DELETE_FLAG := cur_desc_row.DELETE_FLAG;
        l_material_desc.OPERATE_STATUS := cur_desc_row.OPERATE_STATUS;
        l_material_desc.REMARK := cur_desc_row.REMARK;
       
        desc_data.extend;
        desc_data(desc_data.count) := l_material_desc;
        
      end loop;
      close cur_material_desc;
      
      open cur_material_unit;
      loop fetch cur_material_unit into cur_unit_row;
        exit when cur_material_unit%notfound;
        
        l_material_unit.MATERIAL_CODE := l_material_code;
        l_material_unit.UNIT_TARGET := cur_unit_row.unit_target;
        l_material_unit.UNIT_TARGET2BUNCHBASE := cur_unit_row.unit_target2bunchbase;
        l_material_unit.BUNCHBASE := cur_unit_row.bunchbase;
          
        unit_data.extend;
        unit_data(unit_data.count) := l_material_unit;
        
      end loop;
      close cur_material_unit;
    end if;

    --组装itab_purchase
    itab_purchase := material_purchase_table();
    sourcelist_data := material_sourcelist_table();
    
    open cur_material_purchase;
    loop fetch cur_material_purchase into cur_purchase_row;
      exit when cur_material_purchase%notfound;
      
      sap_input.VIEW_PLANT := 'X';

      l_material_purchase.ROW_ID := cur_purchase_row.ROW_ID;
      l_material_purchase.MATERIAL_ID := cur_purchase_row.MATERIAL_ID;
      l_material_purchase.MATERIAL_CODE := l_material_code;
      l_material_purchase.PLANT_CODE := cur_purchase_row.PLANT_CODE;
      l_material_purchase.PURCHASE_GROUP_CODE := cur_purchase_row.PURCHASE_GROUP_CODE;

      --if l_order_uom is not null then
      --  l_material_purchase.ORDER_UOM := l_order_uom;
      --else
      --  l_material_purchase.ORDER_UOM := cur_purchase_row.ORDER_UOM;
      --end if;

      --l_material_purchase.RECIEVE_PROCCESS_TIME := cur_purchase_row.RECIEVE_PROCCESS_TIME;
     -- l_material_purchase.PLT_MTL_STATUS := cur_purchase_row.PLT_MTL_STATUS;
      --l_material_purchase.QUOTA_ALLOCATION := cur_purchase_row.QUOTA_ALLOCATION;
      l_material_purchase.AUTO_PUR_ORDER := cur_purchase_row.AUTO_PUR_ORDER;
      l_material_purchase.SOURCING_LIST_REQUIRED_FLAG := cur_purchase_row.SOURCING_LIST_REQUIRED_FLAG;
      l_material_purchase.profit_center := cur_purchase_row.profit_center;
      l_material_purchase.AVAILABILITY_CHECK := cur_purchase_row.availability_check;
      l_material_purchase.COMMERCIAL_CODE := cur_purchase_row.commercial_code;
      l_material_purchase.HANDLING_GROUP := cur_purchase_row.handling_group;
      --if l_variable_uom is not null then
       -- l_material_purchase.VARIABLE_UOM := l_variable_uom;
      --else
      --  l_material_purchase.VARIABLE_UOM := cur_purchase_row.VARIABLE_UOM;
      --end if;

      --l_material_purchase.EFFECTIVE_START_DATE := cur_purchase_row.EFFECTIVE_START_DATE;
      --l_material_purchase.TAX_FLAG := cur_purchase_row.TAX_FLAG;
     -- l_material_purchase.TRANS_GRP := cur_purchase_row.TRANS_GRP;
      ---l_material_purchase.DISCOUNT_MARK := cur_purchase_row.DISCOUNT_MARK;
      /*l_material_purchase.PURCHASE_VALUE_CODE := cur_purchase_row.PURCHASE_VALUE_CODE;
      l_material_purchase.POST_TO_INSPECT_INV := cur_purchase_row.POST_TO_INSPECT_INV;
      l_material_purchase.BATCH_MGT := cur_purchase_row.BATCH_MGT;
      l_material_purchase.OVER_RECIVING_UMLIMIT_FLAG := cur_purchase_row.OVER_RECIVING_UMLIMIT_FLAG;
      l_material_purchase.CONFIRM_REQUIRED_FLAG := cur_purchase_row.CONFIRM_REQUIRED_FLAG;
      l_material_purchase.KEY_COMPONENT := cur_purchase_row.KEY_COMPONENT;
      l_material_purchase.JIT_PLN_MARK := cur_purchase_row.JIT_PLN_MARK;*/
      
      l_material_purchase.CREATED_BY := cur_purchase_row.CREATED_BY;
      l_material_purchase.CREATED := cur_purchase_row.CREATED;
      l_material_purchase.LAST_UPD_BY := cur_purchase_row.LAST_UPD_BY;
      l_material_purchase.LAST_UPD := cur_purchase_row.LAST_UPD;
      l_material_purchase.MODIFICATION_NUM := cur_purchase_row.MODIFICATION_NUM;
      l_material_purchase.LAST_VERSION_FLAG := cur_purchase_row.LAST_VERSION_FLAG;
      l_material_purchase.VERSION := cur_purchase_row.VERSION;
      l_material_purchase.ACTIVE_FLAG := cur_purchase_row.ACTIVE_FLAG;
      l_material_purchase.LOCK_FLAG := cur_purchase_row.LOCK_FLAG;
      l_material_purchase.DELETE_FLAG := cur_purchase_row.DELETE_FLAG;
      l_material_purchase.OPERATE_STATUS := cur_purchase_row.OPERATE_STATUS;
      l_material_purchase.REMARK := cur_purchase_row.REMARK;
      l_material_purchase.IFDELISTED:=cur_purchase_row.ifdelisted;--cuiyj20120726是否下市

      l_material_purchase.MASTER_TYPE := 'MATERIAL';
      l_material_purchase.DATA_KEY1 := l_material_purchase.MATERIAL_CODE;
      l_material_purchase.DATA_KEY2 := l_material_purchase.PLANT_CODE;
      l_material_purchase.DATA_KEY7 := l_return_batch_id;
      l_material_purchase.DATA_KEY8 := user_name;
      l_material_purchase.PASS_KEY1 := 'PURCHASE';
      l_material_purchase.PASS_KEY2 := l_material_purchase.ROW_ID;
      l_material_purchase.PASS_KEY3 := l_material_purchase.MATERIAL_ID;
      l_material_purchase.PASS_KEY4 := worklist_id;
      l_material_purchase.OPERATE_STATUS := l_material_purchase.OPERATE_STATUS;
      
      itab_purchase.extend;
      itab_purchase(itab_purchase.count) := l_material_purchase;
      
      FOR cur_rows IN cur_material_info(l_material_purchase.MATERIAL_ID)
      LOOP
        IF cur_rows.soucelist_vendor IS NOT NULL AND l_material_purchase.PLANT_CODE IN ('6100','6110','6150','6460') THEN
        
          l_material_sourcelist.MATERIAL_CODE := cur_rows.material_code;
          l_material_sourcelist.PLANT_CODE := l_material_purchase.PLANT_CODE;

          ---ZHANGBIAO 20090803分割字符串成表格
          l_str_split_table := str_split_table();
          --l_str_split_table := comm_util.FUNC_SPLIT(replace(cur_rows.soucelist_vendor,chr(13),''),chr(10));--chr(13)||chr(10)
          l_str_split_table := comm_util.FUNC_SPLIT(cur_rows.soucelist_vendor,',');
          for i in 1..l_str_split_table.count 
          loop             
            l_material_sourcelist.VENDOR_CODE := l_str_split_table(i);
            IF i = 1 THEN
              l_material_sourcelist.FIX_FLAG := 'X';
            ELSE
              l_material_sourcelist.FIX_FLAG := '';
            END IF;
            
            sourcelist_data.extend;
            sourcelist_data(sourcelist_data.count) := l_material_sourcelist;
          end loop;
                  
        END IF;
      END LOOP;
      
    end loop;
    close cur_material_purchase; 

    --组装itab_sales
    --itab_sales  := material_sales_table2();
    --组装itab_wm
    itab_STORAGe  := material_STORAGe_table();
    
    open cur_material_STORAGe;
    loop fetch cur_material_STORAGe into cur_STORAGe_row;
      exit when cur_material_STORAGe%notfound;
      sap_input.VIEW_STORAGE := 'X';
      
      l_material_STORAGe.row_id := cur_STORAGe_row.row_id;
      
      l_material_STORAGe.material_id := cur_STORAGe_row.material_id;
      l_material_STORAGe.material_code := l_material_code;
      l_material_STORAGe.PLANT_CODE := cur_STORAGe_row.Plant_Code;
      l_material_STORAGE.STORAGE_LOCATION := cur_STORAGe_row.Storage_Location;
      
      l_material_STORAGE.MASTER_TYPE := 'MATERIAL';
      l_material_STORAGE.DATA_KEY1 := l_material_STORAGE.MATERIAL_CODE;
      l_material_STORAGE.DATA_KEY2 := l_material_STORAGE.PLANT_CODE;
      l_material_STORAGE.DATA_KEY7 := l_return_batch_id;
      l_material_STORAGE.DATA_KEY8 := user_name;
      l_material_STORAGE.PASS_KEY1 := 'STORAGE';
      l_material_STORAGE.PASS_KEY2 := l_material_STORAGE.ROW_ID;
      l_material_STORAGE.PASS_KEY3 := l_material_STORAGE.MATERIAL_ID;
      l_material_STORAGE.PASS_KEY4 := worklist_id;
      
      itab_STORAGe.extend;
      itab_STORAGe(itab_STORAGe.count) := l_material_STORAGE;
    end loop;
    close cur_material_STORAGe;
    --组装itab_cost, itab_cost1, itab_cost2
    itab_cost  := material_acco_table();
    /*itab_cost1  := material_acco_table();
    itab_cost2  := material_acco_table();*/
    
    open cur_material_acco;
    loop fetch cur_material_acco into cur_acco_row;
      exit when cur_material_acco%notfound;
      
      l_material_acco.MATERIAL_ID := cur_acco_row.MATERIAL_ID;
      l_material_acco.MATERIAL_CODE := l_MATERIAL_CODE;
      l_material_acco.PLANT_CODE := cur_acco_row.PLANT_CODE;
      l_material_acco.VALUATION_CLASS := cur_acco_row.VALUATION_CLASS;
      --l_material_acco.VALUATION_TYPE := cur_acco_row.VALUATION_TYPE;
      l_material_acco.VALUATION_OBJ := cur_acco_row.VALUATION_OBJ;
      l_material_acco.STD_PRICE := cur_acco_row.std_price;
      l_material_acco.PRICE_UOM := cur_acco_row.PRICE_UOM;
      --6440
      l_material_acco.PLAN_COST := cur_acco_row.plan_cost;
      if cur_acco_row.COST_BEGIN_DATE is not null then
         l_material_acco.COST_BEGIN_DATE := to_date(cur_acco_row.COST_BEGIN_DATE,'yyyy-MM-dd');
      end if;
      --l_material_acco.PLAN_PRICE := cur_acco_row.PLAN_PRICE;
      /*if cur_acco_row.PLAN_PRICE_DATE is not null then
        l_material_acco.PLAN_PRICE_DATE := TO_CHAR(cur_acco_row.PLAN_PRICE_DATE,'YYYY.MM.DD');
      else
        l_material_acco.PLAN_PRICE_DATE := '0000.00.00';
      end if*/--;
      --l_material_acco.PLT_MTL_STATUS := cur_acco_row.PLT_MTL_STATUS;
      --l_material_acco.NO_COSTING := cur_acco_row.NO_COSTING;
      l_material_acco.QS_COST_ACCOUNTING_FLAG := cur_acco_row.QS_COST_ACCOUNTING_FLAG;
      --l_material_acco.PROFIT_CENTER_CODE := cur_acco_row.PROFIT_CENTER_CODE;
      --l_material_acco.MTL_ITEM_SOURCE := cur_acco_row.MTL_ITEM_SOURCE;
      l_material_acco.COST_ACCOUNTING_BATCH := cur_acco_row.COST_ACCOUNTING_BATCH;
      l_material_acco.price_control := cur_acco_row.price_control;
      /*l_material_acco.PLAN_PRICE1 := cur_acco_row.PLAN_PRICE1;
      if cur_acco_row.PLAN_PRICE1_DATE is not null then
        l_material_acco.PLAN_PRICE1_DATE := TO_CHAR(cur_acco_row.PLAN_PRICE1_DATE,'YYYY.MM.DD');
      else
        l_material_acco.PLAN_PRICE1_DATE := '0000.00.00';
      end if;*/
      --l_material_acco.CREATED_BY := cur_acco_row.CREATED_BY;
      --l_material_acco.CREATED := cur_acco_row.CREATED;
      --l_material_acco.LAST_UPD_BY := cur_acco_row.LAST_UPD_BY;
      --l_material_acco.LAST_UPD := cur_acco_row.LAST_UPD;
      --l_material_acco.MODIFICATION_NUM := cur_acco_row.MODIFICATION_NUM;
      --l_material_acco.LAST_VERSION_FLAG := cur_acco_row.LAST_VERSION_FLAG;
      --l_material_acco.VERSION := cur_acco_row.VERSION;
      --l_material_acco.ACTIVE_FLAG := cur_acco_row.ACTIVE_FLAG;
      --l_material_acco.LOCK_FLAG := cur_acco_row.LOCK_FLAG;
      --l_material_acco.DELETE_FLAG := cur_acco_row.DELETE_FLAG;
      --l_material_acco.REMARK := cur_acco_row.REMARK;
      --l_material_acco.RETURN_BATCH_ID := cur_acco_row.RETURN_BATCH_ID;
      --l_material_acco.ACTION_BATCH_ID := cur_acco_row.ACTION_BATCH_ID;
      --l_material_acco.SPLIT_FLAG := cur_acco_row.SPLIT_FLAG; --不可以开放
      l_material_acco.OPERATE_STATUS := cur_acco_row.OPERATE_STATUS;
      
      l_material_acco.MASTER_TYPE := 'MATERIAL';
      l_material_acco.DATA_KEY1 := l_material_acco.MATERIAL_CODE;
      l_material_acco.DATA_KEY2 := l_material_acco.PLANT_CODE;
      --l_material_acco.DATA_KEY3 := l_material_acco.SPLIT_FLAG;
      --l_material_acco.DATA_KEY4 := l_material_acco.VALUATION_TYPE;
      l_material_acco.DATA_KEY7 := l_return_batch_id;
      l_material_acco.DATA_KEY8 := user_name;
      l_material_acco.PASS_KEY3 := l_material_acco.MATERIAL_ID;
      l_material_acco.PASS_KEY4 := worklist_id;
      
      ---if cur_acco_row.SPLIT_FLAG = '0' then
        sap_input.VIEW_COST  := 'X';
      
        l_material_acco.PASS_KEY1 := 'ACCO';
        l_material_acco.PASS_KEY2 := cur_acco_row.row_id;          
      
        itab_cost.extend;
        itab_cost(itab_cost.count) := l_material_acco;

/*        l_material_acco.PASS_KEY1 := 'ACCOUNT';
        l_material_acco.PASS_KEY2 := cur_acco_row.AC_ROW_ID;          
      
        itab_cost.extend;
        itab_cost(itab_cost.count) := l_material_acco;
*/
      /*elsif cur_acco_row.SPLIT_FLAG = '1' then
        sap_input.VIEW_COST1  := 'X';
      
        l_material_acco.PASS_KEY1 := 'ACCO1';
        l_material_acco.PASS_KEY2 := cur_acco_row.ROW_ID;          
      
        itab_cost1.extend;
        itab_cost1(itab_cost1.count) := l_material_acco;

\*        l_material_acco.PASS_KEY1 := 'ACCOUNT';
        l_material_acco.PASS_KEY2 := cur_acco_row.AC_ROW_ID;          
      
        itab_cost1.extend;
        itab_cost1(itab_cost1.count) := l_material_acco;
*\
      elsif cur_acco_row.SPLIT_FLAG = '2' then
        sap_input.VIEW_COST2  := 'X';
      
        l_material_acco.PASS_KEY1 := 'ACCOUNT';
        l_material_acco.PASS_KEY2 := cur_acco_row.ROW_ID;          
      
        itab_cost2.extend;
        itab_cost2(itab_cost2.count) := l_material_acco;

\*        l_material_acco.PASS_KEY1 := 'ACCOUNT';
        l_material_acco.PASS_KEY2 := cur_acco_row.AC_ROW_ID;          
      
        itab_cost2.extend;
        itab_cost2(itab_cost2.count) := l_material_acco;
*\
      end if;*/
      
    end loop;
    close cur_material_acco;    


  
    --组装itab_salesorg
    itab_salesorg  := material_sales_table2();
    
    open cur_material_salesorg;
    loop fetch cur_material_salesorg into cur_salesorg_row;
      exit when cur_material_salesorg%notfound;
      
      sap_input.VIEW_SALESORG  := 'X';
      
      l_material_salesorg.ROW_ID := cur_salesorg_row.ROW_ID;
      l_material_salesorg.MATERIAL_ID := cur_salesorg_row.MATERIAL_ID;
      l_material_salesorg.MATERIAL_CODE := l_material_code;
      --l_material_salesorg.INDUSTRY := l_industry;
      --l_material_salesorg.MATERIAL_TYPE := l_material_type;
      --l_material_salesorg.PLANT_CODE := cur_salesorg_row.PLANT_CODE;
      l_material_salesorg.SALES_GROUP := cur_salesorg_row.SALES_GROUP;
      l_material_salesorg.DISTRIBUTION_CHANNEL := cur_salesorg_row.DISTRIBUTION_CHANNEL;
      l_material_salesorg.SHIP_PLANT := cur_salesorg_row.SHIP_PLANT;
      --l_material_salesorg.MTL_TAX_CATEGORY := cur_salesorg_row.MTL_TAX_CATEGORY;
      l_material_salesorg.MTL_SALE_STAT_GRP := cur_salesorg_row.MTL_SALE_STAT_GRP;
      l_material_salesorg.MTL_SALE_PRICE_GRP := cur_salesorg_row.MTL_SALE_PRICE_GRP;
      l_material_salesorg.MTL_SALE_ACCOUNT_SET_GRP := cur_salesorg_row.MTL_SALE_ACCOUNT_SET_GRP;
      l_material_salesorg.MTL_SALE_PRJ_CLASS_GRP := cur_salesorg_row.MTL_SALE_PRJ_CLASS_GRP;
      l_material_salesorg.product_hierarchy := cur_salesorg_row.product_hierarchy;
      l_material_salesorg.MATERIAL_GROUP_1 := cur_salesorg_row.MATERIAL_GROUP_1;
      l_material_salesorg.BRAND :=cur_salesorg_row.brand;
      l_material_salesorg.MATERIAL_GROUP_3 := cur_salesorg_row.MATERIAL_GROUP_3;
      l_material_salesorg.MATERIAL_GROUP_4 := cur_salesorg_row.MATERIAL_GROUP_4;
      l_material_salesorg.MATERIAL_GROUP_5 := cur_salesorg_row.MATERIAL_GROUP_5;
      l_material_salesorg.PRODUXT_ATTRIBUTE_1 := cur_salesorg_row.produxt_attribute_1;
      l_material_salesorg.UNIVERSAL_PARTS := cur_salesorg_row.universal_parts;
      l_material_salesorg.VOLUME_REBATE_GROUP := cur_salesorg_row.volume_rebate_group;
      l_material_salesorg.CASH_DISCOUNT_INDICATOR := cur_salesorg_row.cash_discount_indicator;
      --l_material_salesorg.AVAILABILITY_CHECK := cur_salesorg_row.AVAILABILITY_CHECK;
      --l_material_salesorg.LOADING_GRP := cur_salesorg_row.LOADING_GRP;
      --l_material_salesorg.TRANS_GRP := cur_salesorg_row.TRANS_GRP;
      --l_material_salesorg.PROFIT_CENTER_CODE := cur_salesorg_row.PROFIT_CENTER_CODE;
      l_material_salesorg.CREATED_BY := cur_salesorg_row.CREATED_BY;
      l_material_salesorg.CREATED := cur_salesorg_row.CREATED;
      l_material_salesorg.LAST_UPD_BY := cur_salesorg_row.LAST_UPD_BY;
      l_material_salesorg.LAST_UPD := cur_salesorg_row.LAST_UPD;
      l_material_salesorg.MODIFICATION_NUM := cur_salesorg_row.MODIFICATION_NUM;
      l_material_salesorg.LAST_VERSION_FLAG := cur_salesorg_row.LAST_VERSION_FLAG;
      l_material_salesorg.VERSION := cur_salesorg_row.VERSION;
      l_material_salesorg.ACTIVE_FLAG := cur_salesorg_row.ACTIVE_FLAG;
      l_material_salesorg.LOCK_FLAG := cur_salesorg_row.LOCK_FLAG;
      l_material_salesorg.DELETE_FLAG := cur_salesorg_row.DELETE_FLAG;
      l_material_salesorg.OPERATE_STATUS := cur_salesorg_row.OPERATE_STATUS;
      l_material_salesorg.REMARK := cur_salesorg_row.REMARK;
      l_material_salesorg.COMP_DELISTED := cur_salesorg_row.comp_delisted;--cuiyj增加销售组织下市状态
      l_material_salesorg.COMP_DELISTEDTIME := to_date(cur_salesorg_row.comp_delistedtime,'yyyy-MM-dd');--cuiyj增加销售组织下市状态时间
            
      l_material_salesorg.MASTER_TYPE := 'MATERIAL';
      l_material_salesorg.DATA_KEY1 := l_material_salesorg.MATERIAL_CODE;
      l_material_salesorg.DATA_KEY2 := l_material_salesorg.SALES_GROUP;
      l_material_salesorg.DATA_KEY3 := l_material_salesorg.DISTRIBUTION_CHANNEL;
      l_material_salesorg.DATA_KEY7 := l_return_batch_id;
      l_material_salesorg.DATA_KEY8 := user_name;
      l_material_salesorg.PASS_KEY1 := 'SALESORG';
      l_material_salesorg.PASS_KEY2 := l_material_salesorg.ROW_ID;
      l_material_salesorg.PASS_KEY3 := l_material_salesorg.MATERIAL_ID;
      l_material_salesorg.PASS_KEY4 := worklist_id;
      l_material_salesorg.OPERATE_STATUS := l_material_salesorg.OPERATE_STATUS;
      
      l_material_salesorg.SALE_UNIT:= cur_salesorg_row.SALE_UNIT;
      
      --lvke 2014-12-1
      l_material_salesorg.PLATFORM_REDETERMINATION_SET := cur_salesorg_row.platform_redetermination_set;
          
      itab_salesorg.extend;
      itab_salesorg(itab_salesorg.count) := l_material_salesorg;

    end loop;
    close cur_material_salesorg;    

    if sap_input.VIEW_SALESORG = 'X' then
      itab_tax  := material_tax_table();
      open cur_material_tax;
      loop fetch cur_material_tax into cur_tax_row;
        exit when cur_material_tax%notfound;
        l_material_tax.material_id := cur_tax_row.material_id;
        l_material_tax.material_code := l_material_code;
        l_material_tax.country_code := cur_tax_row.country_code;
        l_material_tax.tax_class_code := cur_tax_row.tax_class_code;
        l_material_tax.tax_category := cur_tax_row.tax_category;
        itab_tax.extend;
        itab_tax(itab_tax.count)  := l_material_tax;
      end loop;
      close cur_material_tax;
    end if;

      --分视图提交 added by zhangbiao 20080529
    if submit_views is not null then
      IF sap_input.VIEW_BASE = 'X' and instr(submit_views,'BASE') <= 0 THEN
         itab_base := null;--material_base_table2();
         desc_data := null;--material_desc_table();
         unit_data := null;--material_unit_table();
         sap_input.VIEW_BASE := '';
      END IF;
      
      IF sap_input.VIEW_PLANT = 'X' and instr(submit_views,'PURCHASE') <= 0 THEN
         itab_purchase := null;--material_purchase_table();
         sap_input.VIEW_PLANT := '';
      END IF;
      
      /*IF sap_input.VIEW_SALESPLANT = 'X' and instr(submit_views,'SALESPLANT') <= 0 THEN
         itab_salesplant := null;
         sap_input.VIEW_SALESPLANT := '';
      END IF;*/
      
      IF sap_input.VIEW_SALESORG = 'X' and instr(submit_views,'SALESORG') <= 0 THEN
         itab_salesorg := null;
         sap_input.VIEW_SALESORG := '';
      END IF;
      
      IF sap_input.VIEW_COST = 'X' and instr(submit_views,'ACCO') <= 0 THEN
         itab_cost := null;
         sap_input.VIEW_COST := '';
      END IF;
      
      IF sap_input.VIEW_STORAGE = 'X' and instr(submit_views,'STORAGE') <= 0 THEN
         itab_STORAGE := null;
         sap_input.VIEW_STORAGE := '';
      END IF;
      /*IF sap_input.VIEW_MRP = 'X' and instr(submit_views,'MRP') <= 0 THEN
         itab_mrp := null;
         sap_input.VIEW_MRP := '';
      END IF;
            
      IF sap_input.VIEW_MRP2 = 'X' and instr(submit_views,'MRP') <= 0 THEN
         itab_mrp2 := null;
         sap_input.VIEW_MRP2 := '';
      END IF;
      
      IF sap_input.VIEW_MRP = '' AND sap_input.VIEW_MRP2 = '' THEN
         mrparea_data := null;
      END IF;
                  
      IF sap_input.VIEW_WM = 'X' and instr(submit_views,'WM') <= 0 THEN
         itab_wm := null;
         sap_input.VIEW_WM := '';
      END IF;
            
      IF sap_input.VIEW_IM = 'X' and instr(submit_views,'IM') <= 0 THEN
         itab_im := null;
         sap_input.VIEW_IM := '';
      END IF;
            
      IF sap_input.VIEW_QM = 'X' and instr(submit_views,'QM') <= 0 THEN
         itab_qm := null;
         sap_input.VIEW_QM := '';
      END IF;

      IF sap_input.VIEW_COST1 = 'X' and instr(submit_views,'ACCO1') <= 0 THEN
         itab_cost := null;
         sap_input.VIEW_COST1 := '';
      END IF;            
      
      IF sap_input.VIEW_COST2 = 'X' and instr(submit_views,'ACCOUNT') <= 0 THEN
         itab_cost := null;
         sap_input.VIEW_COST2 := '';
      END IF;   */         

    end if;

    --空视图操作(importMaterial流程中发生作用)
    IF sap_input.VIEW_BASE = 'X' OR sap_input.VIEW_COMPANY = 'X' OR sap_input.VIEW_PURCHASE = 'X' OR 
       sap_input.VIEW_SALES = 'X' OR sap_input.VIEW_PLANT = 'X' OR sap_input.VIEW_MRP = 'X' OR 
       sap_input.VIEW_STORAGE = 'X' OR sap_input.VIEW_QM = 'X' OR sap_input.VIEW_COST = 'X' OR 
       sap_input.VIEW_COST1 = 'X' OR sap_input.VIEW_COST2 = 'X' OR sap_input.VIEW_IM = 'X' OR 
       sap_input.VIEW_WM = 'X' OR sap_input.VIEW_MRP2 = 'X' OR sap_input.VIEW_SALESORG = 'X' OR 
       sap_input.VIEW_SALESPLANT = 'X' OR sap_input.VIEW_P0000 = 'X' OR sap_input.VIEW_P0001 = 'X' OR 
       sap_input.VIEW_P0002 = 'X' OR sap_input.VIEW_P0006 = 'X' THEN
      sap_input.NULL_VIEW := '';
    ELSE
      sap_input.NULL_VIEW := 'X';
    END IF;
    
 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getMaterial;

	--提取指定（多条）客户数据，调用SAP创建客户主数据的RFC
	PROCEDURE getCustomer
	(
		key_id         IN VARCHAR2,
		operate_status IN VARCHAR2,
		worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
		sap_input      OUT sap_input_type23,
		itab_base      OUT customer_base_table2,
		itab_company   OUT customer_company_table,
		itab_sales     OUT customer_sales_table,
		bank_data      OUT customer_bank_table3,
		partner_data   OUT customer_partner_table,
    tax_data       OUT customer_tax_table,
    contact_data   OUT customer_contact_table2,
    addr_data      OUT customer_addr_table,
    sales_txt_data OUT customer_sales_txt_table,
    company_txt_data OUT customer_company_txt_table,
    company_hie_data OUT customer_company_hie_table,
    company_pay_data OUT customer_company_pay_table,
    company_nay_data OUT customer_company_nay_table,
    itab_credit    OUT CUSTOMER_COMPANY_CREDIT_TABLE,
    desc_data      out customer_desc_table   
	) IS
  
    l_customer_number  varchar2(20);
    l_return_batch_id     varchar2(20);
    
    --组装itab_base所需定义
		l_customer_base      customer_base_type2 := customer_base_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
																														 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
																														 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
																														 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL,null);
	
		CURSOR cur_customer_base IS
			SELECT * FROM hm_customers t
			 WHERE t.row_id like key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row hm_customers%ROWTYPE;
	  ---20130326多语言结构
    l_customer_desc      customer_desc_type := customer_desc_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL,NULL,NULL,NULL,null);
    CURSOR cur_customer_desc IS
       SELECT t.*,s.customer_number FROM hm_cust_language_desc t,hm_customers s 
     WHERE  t.customer_id=s.row_id            
            and t.delete_flag = '0'
            and t.for_gvs = '1'
            and s.row_id like key_id; 
    cur_desc_row cur_customer_desc%ROWTYPE;
    
    
    
    -----end
    --组装bank_data所需定义
    l_customer_bank     customer_bank_type3 := customer_bank_type3(NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL);
    CURSOR cur_customer_bank IS
      SELECT tt.*,t.customer_number, bnk.bank_name as bnk_bank_name,
      bnk.REGION as bnk_region,bnk.STREET_ROOM as bnk_street,bnk.CITY_STREET_ROOM as bnk_city,
      bnk.SWIFT as bnk_swift, bnk.BANK_GROUP as bnk_bank_group,bnk.POST_BANK_FLAG as bnk_post_bank_flag,
      bnk.BANK_BRANCH_CODE as bnk_branch_code,bnk.BANK_CATEGORY as bnk_category
        FROM hm_cust_bank_accounts tt, hm_customers t, hm_banks bnk
       WHERE tt.active_flag = '1' --and tt.active_range in ('ALL','BIL')
         and bnk.bank_branch_code(+) = tt.bank_branch_code
         and tt.customer_id = t.row_id 
         and tt.for_gvs = '1' and tt.delete_flag = '0'
         and bnk.new_flag is null --代表是客户的银行
         and t.row_id like key_id; 
    cur_bank_row cur_customer_bank%ROWTYPE;
    
    --组装 地址2 所需定义
     l_customer_addr     customer_addr_type := customer_addr_type(NULL, NULL,NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL,NULL,NULL,NULL,
                                                                 NULL, NULL,NULL,NULL, NULL,NULL, NULL,NULL,NULL, NULL,NULL, NULL,NULL,NULL,NULL,null) ;
    --组装tax_data所需定义
    l_customer_tax     customer_tax_type := customer_tax_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, 
                                                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    CURSOR cur_customer_tax IS
      --SELECT tt.*,t.customer_number       
      select distinct
             '' row_id, tt.customer_id, tt.aland, tt.tatyp, tt.taxkd, 
             '' created_by, '' created, '' last_upd_by, '' last_upd, '' modification_num, 
             '' last_version_flag, '' version, '' active_flag, '' lock_flag, '' delete_flag, 
             '' operate_status, '' remark, '' for_gvs, '' audit_flag, t.customer_number        
        FROM hm_customer_taxs tt, hm_customers t
       WHERE tt.customer_id = t.row_id 
         and tt.delete_flag = '0'
         and t.row_id like key_id; 
    cur_tax_row cur_customer_tax%ROWTYPE;
    
    --组装partner_data所需定义
    l_customer_partner     customer_partner_type := customer_partner_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL,
                                                                      null);
    CURSOR cur_customer_partner IS
      SELECT tt.*, t.sales_group, t.distribution_channel, t.division, ttt.customer_number
       FROM hm_customer_partners tt, hm_customer_sales_data t, hm_customers ttt
       WHERE tt.delete_flag = '0' and tt.for_gvs = '1' --added by zhangbiao20080425
         and tt.sales_area_view_id = t.row_id
        -- and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE') --added by zhangbiao20080519
         and t.for_gvs = '1' and t.delete_flag = '0'                               --added by zhangbiao20080519
         AND tt.delete_flag = '0'
         and t.customer_id = ttt.row_id
         and ttt.row_id like key_id 
         AND rownum < 1000
         ; 
    cur_partner_row cur_customer_partner%ROWTYPE;
    
    --组装contact_data所需定义
    l_customer_contact     customer_contact_type2 := customer_contact_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                          NULL, NULL, NULL, NULL, NULL,NULL, NULL,null,null,null,null);
    /*CURSOR cur_customer_contact IS
      SELECT tt.*, t.customer_number FROM hm_customer_contacts tt, hm_customers t
       WHERE tt.customer_id = t.row_id
         and t.row_id like key_id ; 
    cur_contact_row cur_customer_contact%ROWTYPE;*/
        
    --组装itab_company所需定义
   	l_customer_company   customer_company_type := customer_company_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULl,NULL,NULL,NULL,NULL,null);
	
		CURSOR cur_customer_company IS
			SELECT tt.*,t.customer_number FROM hm_cust_company_data tt, hm_customers t
			 WHERE tt.customer_id = t.row_id
         and tt.last_version_flag = '2' and tt.operate_status in ('CREATE','UPDATE')
         and tt.for_gvs = '1' and tt.delete_flag = '0'
         and t.row_id like key_id ;
    cur_company_row cur_customer_company%ROWTYPE;
		
    --组装itab_sales所需定义
		l_customer_sales   customer_sales_type := customer_sales_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
																														      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                  NULL, NULL, NULL, NULL, NULL, NULL, null, NULL, NULL,null,null,NULL);
	
		CURSOR cur_customer_sales IS
			SELECT tt.*,t.customer_number FROM hm_customer_sales_data tt, hm_customers t
			 WHERE tt.customer_id = t.row_id
         and tt.last_version_flag = '2' and tt.operate_status in ('CREATE','UPDATE')
         and tt.for_gvs = '1' and tt.delete_flag = '0'
         and t.row_id like key_id;
         
    cur_sales_row cur_customer_sales%ROWTYPE;
    --xuky 20090330
    lcl_customer_sales_txt customer_sales_txt_type := customer_sales_txt_type(NULL, NULL, NULL, NULL, NULL, NULL,null,null);
		lcl_str_split_table str_split_table;
    --zhangbiao 20090511
    lcl_customer_company_txt customer_company_txt_type := customer_company_txt_type(NULL, NULL, NULL);

    lcl_customer_company_hie customer_company_hie_type := customer_company_hie_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                                    NULL, NULL, NULL, NULL);
    lcl_customer_company_pay customer_company_pay_type := customer_company_pay_type(NULL, NULL, NULL, NULL);
    lcl_customer_company_nay customer_company_nay_type := customer_company_nay_type(NULL, NULL, NULL, NULL, NULL, NULL);
	  lcl_customer_company_credit CUSTOMER_COMPANY_CREDIT_TYPE := customer_company_credit_type(NULL, NULL, NULL, NULL, NULL, NULL,NULL,NULL,null);--20121025
   
    --xuky 20090421
    lcl_contacts_flag varchar2(1);
	BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    --select customer_number into l_customer_number 
    --from hm_customers where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
     sap_input := sap_input_type23(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL);

    sap_input.master_type := 'CUSTOMER';
    sap_input.DATA_KEY1 := '';--l_customer_number;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    SAP_INPUT.VIEW_CREDIT   :='';    
    --组装itab_base
    itab_base := customer_base_table2();
    bank_data := customer_bank_table3();
    tax_data  := customer_tax_table();
    contact_data := customer_contact_table2();
    partner_data := customer_partner_table();
    addr_data := customer_addr_table();
    desc_data := customer_desc_table();
    
    open cur_customer_base;
    loop fetch cur_customer_base into cur_base_row;
      exit when cur_customer_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_customer_base.ROW_ID := cur_base_row.ROW_ID;
      l_customer_base.CUSTOMER_NUMBER := cur_base_row.CUSTOMER_NUMBER;
      l_customer_base.ACCOUNT_GROUP := cur_base_row.ACCOUNT_GROUP;
      l_customer_base.CUSTOMER_NAME1 := substr(cur_base_row.CUSTOMER_NAME1,1,35);
      l_customer_base.CUSTOMER_NAME2 := substr(cur_base_row.CUSTOMER_NAME2,1,35);
      l_customer_base.CUSTOMER_NAME3 := cur_base_row.CUSTOMER_NAME3;
      l_customer_base.CUSTOMER_NAME := cur_base_row.CUSTOMER_NAME;
      l_customer_base.SEARCH_TERM := cur_base_row.SEARCH_TERM;
      l_customer_base.POSTAL_CODE := cur_base_row.POSTAL_CODE;
      l_customer_base.CITY_STREET_ROOM := cur_base_row.CITY_STREET_ROOM;
      l_customer_base.STREET_ROOM := substr(cur_base_row.STREET_ROOM,1,35);
      l_customer_base.COUNTRY := cur_base_row.COUNTRY;
      l_customer_base.REGION := cur_base_row.REGION;
      l_customer_base.PHONE_NUMBER := cur_base_row.PHONE_NUMBER;
      l_customer_base.LANGUAGE := cur_base_row.LANGUAGE;
      l_customer_base.FAX_NUMBER := cur_base_row.FAX_NUMBER;
      l_customer_base.NAME1 := cur_base_row.NAME1;
      l_customer_base.PHONE_NUMBER1 := cur_base_row.PHONE_NUMBER1;
      l_customer_base.CUST_CONTACT_DEPT := cur_base_row.CUST_CONTACT_DEPT;
      l_customer_base.CUST_CONTACT_DESC := cur_base_row.CUST_CONTACT_DESC;
      l_customer_base.CUST_CONTACT_FUNC := cur_base_row.CUST_CONTACT_FUNC;
      l_customer_base.TAX_CODE := cur_base_row.TAX_CODE;
      l_customer_base.TAX_CODE_DESC := cur_base_row.TAX_CODE_DESC;
      l_customer_base.BANK_ACCOUNT_NUM := cur_base_row.BANK_ACCOUNT_NUM;
      l_customer_base.BANK_BRANCH_CODE := cur_base_row.BANK_BRANCH_CODE;
      l_customer_base.BANK_COUNTRY := cur_base_row.BANK_COUNTRY;
      l_customer_base.BANK_NAME := cur_base_row.BANK_NAME;
      l_customer_base.CUSTOMER_CATEGORY := cur_base_row.CUSTOMER_CATEGORY;
      l_customer_base.NILES_MARK := cur_base_row.NILES_MARK;
      l_customer_base.ESTIMATE_STATUS := cur_base_row.ESTIMATE_STATUS;
      l_customer_base.INDUSTRY_CATEGORY := cur_base_row.INDUSTRY_CATEGORY;
      l_customer_base.INDUSTRY_CLASS := cur_base_row.INDUSTRY_CLASS;

      l_customer_base.TAXDOC_TYPE := cur_base_row.Taxdoc_Type;
      l_customer_base.LEGAL_PERSON := cur_base_row.legal_person;
      l_customer_base.COMPANY_TYPE := cur_base_row.company_type;

      l_customer_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_customer_base.CREATED := cur_base_row.CREATED;
      l_customer_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_customer_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_customer_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_customer_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_customer_base.VERSION := cur_base_row.VERSION;
      l_customer_base.ACTIVE_FLAG := cur_base_row.ACTIVE_FLAG;
      l_customer_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_customer_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_customer_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_customer_base.REMARK := cur_base_row.REMARK;
      l_customer_base.MARKET_AREA := cur_base_row.MARKET_AREA;
      l_customer_base.CUSTOMER_TITLE := cur_base_row.CUSTOMER_TITLE;
      
      
      l_customer_base.VENDOR_CODE := cur_base_row.vendor_code;
      l_customer_base.TRADE_CODE := cur_base_row.trade_code;
      
      l_customer_base.master_type := 'CUSTOMER';
      l_customer_base.DATA_KEY1 := l_customer_base.CUSTOMER_NUMBER;
      l_customer_base.DATA_KEY7 := l_return_batch_id;    
      l_customer_base.DATA_KEY8 := user_name;
      l_customer_base.PASS_KEY1 := 'BASE';
      l_customer_base.PASS_KEY2 := l_customer_base.ROW_ID;
      l_customer_base.PASS_KEY3 := l_customer_base.ROW_ID;
      l_customer_base.PASS_KEY4 := worklist_id;
      l_customer_base.OPERATE_STATUS := l_customer_base.OPERATE_STATUS;
      
      l_customer_base.MARKET_AREA := l_customer_base.MARKET_AREA;
      l_customer_base.CUSTOMER_TITLE := l_customer_base.CUSTOMER_TITLE;
      ---hope new fields
      l_customer_base.TRANSPORTATION_ZONE := cur_base_row.transportation_zone;
      l_customer_base.REG_STRUCT_GRP := cur_base_row.reg_struct_grp;
      l_customer_base.ATTRIBUTE3 := cur_base_row.attribute3;
      --l_customer_base.VAT_REG_NO := cur_base_row.vat_reg_no;
      l_customer_base.TAX_NUMBER1 := cur_base_row.TAX_NUMBER1;
      l_customer_base.TAX_NUMBER2 := cur_base_row.TAX_NUMBER2;
      l_customer_base.TAX_NUMBER3 := cur_base_row.TAX_NUMBER3;
      l_customer_base.NAME_OF_REPRESENTATIVE := cur_base_row.name_of_representative;
      l_customer_base.TYPE_OF_BUSINESS := cur_base_row.type_of_business;
      l_customer_base.TYPE_OF_INDUSTRY := cur_base_row.type_of_industry;
      l_customer_base.CORPORATE_GROUP := cur_base_row.corporate_group;
      l_customer_base.TRAIN_STATION := cur_base_row.train_station;
      l_customer_base.EQUALIZATION_TAX := cur_base_row.equalization_tax;
      l_customer_base.NATURAL_PERSON := cur_base_row.natural_person;
      l_customer_base.SALES_PUR_TAX := cur_base_row.sales_pur_tax;
      
      l_customer_base.industry_code1 := cur_base_row.industry_code1;
      l_customer_base.DISTRIBUTION_CENTER := cur_base_row.DISTRIBUTION_CENTER;
      l_customer_base.UNLOADING_POINT := cur_base_row.Unloading_Point;
      l_customer_base.CALENDAR_KEY := cur_base_row.Calendar_Key;
      
      l_customer_base.location_code := cur_base_row.location_code;
      l_customer_base.BAHNE := cur_base_row.BAHNE;
      l_customer_base.TRADING_PARTNER:= cur_base_row.trading_partner;
      -----------------
      itab_base.extend;
      itab_base(itab_base.count) := l_customer_base;
      
      l_customer_contact.customer_ID := cur_base_row.row_id;
      l_customer_contact.customer_number := cur_base_row.customer_number;

      l_customer_contact.name1 := cur_base_row.NAME1;
      l_customer_contact.telf1 := cur_base_row.PHONE_NUMBER1;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.CUST_CONTACT_DEPT;
       ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens;
      l_customer_contact.mail  := cur_base_row.contact_person_mail;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;
      
      l_customer_contact.name1 := cur_base_row.contact_person2;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.contact_person_department2;
         ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func2;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname2;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens2;
      l_customer_contact.mail  := cur_base_row.contact_person_mail2;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;
      
      l_customer_contact.name1 := cur_base_row.contact_person3;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.contact_person_department3;
         ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func3;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname3;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens3;
      l_customer_contact.mail  := cur_base_row.contact_person_mail3;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;
      
      l_customer_contact.name1 := cur_base_row.contact_person4;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.contact_person_department4;
         ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func4;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname4;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens4;
      l_customer_contact.mail  := cur_base_row.contact_person_mail4;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;
      
      l_customer_contact.name1 := cur_base_row.contact_person5;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.contact_person_department5;
         ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func5;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname5;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens5;
      l_customer_contact.mail  := cur_base_row.contact_person_mail5;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;

      l_customer_contact.name1 := cur_base_row.contact_person6;
      l_customer_contact.CUST_CONTACT_DEPT := cur_base_row.contact_person_department6;
        ----20120418 美国新增加三个字段
      l_customer_contact.CUST_CONTACT_FUNC := cur_base_row.cust_contact_func6;
      l_customer_contact.CONTACT_PERSON_FIRSTNAME := cur_base_row.contact_person_firstname6;
      l_customer_contact.TEL_EXTENS               := cur_base_row.tel_extens6;
      l_customer_contact.mail  := cur_base_row.contact_person_mail6;
      IF l_customer_contact.name1 IS NOT NULL OR l_customer_contact.CUST_CONTACT_DEPT IS NOT NULL THEN
        contact_data.extend;
        contact_data(contact_data.count) := l_customer_contact;
      END IF;
            
      --地址2
      l_customer_addr.customer_number := cur_base_row.customer_number;
      l_customer_addr.STREET_ROOM2 := cur_base_row.CITY_STREET_ROOM2;
      l_customer_addr.CONTACT_PERSON_NAME := cur_base_row.contact_person_name;
      l_customer_addr.STREET2 := cur_base_row.street2;
      l_customer_addr.STREET3 := cur_base_row.street3;
      l_customer_addr.STREET4 := cur_base_row.street4;
      l_customer_addr.STREET5 := cur_base_row.street5;
      l_customer_addr.DISTRICT := cur_base_row.district;
      l_customer_addr.TRANSPORTATION_ZONE := cur_base_row.TRANSPORTATION_ZONE;
      l_customer_addr.REG_STRUCT_GRP := cur_base_row.REG_STRUCT_GRP;
      l_customer_addr.E_MAIL := cur_base_row.E_MAIL;
      l_customer_addr.SEARCH_TERMS2 := cur_base_row.search_terms2;
      l_customer_addr.HOUSE_NUM1 := cur_base_row.house_number;
      l_customer_addr.EDI_COMMENTS := cur_base_row.edi_comments;
      l_customer_addr.MOBILE_PHONE := cur_base_row.mobile_phone;

      ----added by zhangbiao 20090505
      l_customer_addr.CUSTOMER_NAME1 := cur_base_row.CUSTOMER_NAME1;
      l_customer_addr.CUSTOMER_NAME2 := cur_base_row.CUSTOMER_NAME2;
      l_customer_addr.CUSTOMER_NAME3 := cur_base_row.CUSTOMER_NAME3;
      l_customer_addr.SEARCH_TERM := cur_base_row.SEARCH_TERM;
      l_customer_addr.POSTAL_CODE := cur_base_row.POSTAL_CODE;
      l_customer_addr.CITY_STREET_ROOM := cur_base_row.CITY_STREET_ROOM;
      IF LENGTH(cur_base_row.STREET_ROOM) <= 40 THEN
         l_customer_addr.STREET_ROOM := cur_base_row.STREET_ROOM;
      ELSE
         l_customer_addr.STREET_LONG := cur_base_row.STREET_ROOM;      
      END IF;
      l_customer_addr.COUNTRY := cur_base_row.COUNTRY;
      l_customer_addr.REGION := cur_base_row.REGION;
      l_customer_addr.PHONE_NUMBER := cur_base_row.PHONE_NUMBER;
      l_customer_addr.distribution_center := cur_base_row.distribution_center;
      l_customer_addr.LANGUAGE := cur_base_row.LANGUAGE;
      l_customer_addr.FAX_NUMBER := cur_base_row.FAX_NUMBER;
      l_customer_addr.CUSTOMER_TITLE := cur_base_row.CUSTOMER_TITLE;
        l_customer_addr.OLD_CUST_CODE :=cur_base_row.old_cust_code;
      
      addr_data.extend;
      addr_data(addr_data.count) := l_customer_addr;
      
      
/*      l_customer_bank.customer_ID := cur_base_row.row_id;
      l_customer_bank.customer_number := l_customer_number;

      l_customer_bank.ACCOUNT_HOLDER_NAME := '87654321';--cur_base_row.account_holder_name;
      l_customer_bank.BANK_COUNTRY := cur_base_row.bank_country;
      l_customer_bank.BANK_ACCOUNT_NUM := cur_base_row.bank_account_num;
      l_customer_bank.BANK_NAME := '中国银行';--cur_base_row.bank_name;
      l_customer_bank.BANK_BRANCH_CODE := cur_base_row.bank_branch_code;
    
      bank_data.extend;
      bank_data(bank_data.count) := l_customer_bank;
*/
    end loop;
    close cur_customer_base;
     /*
  20130327多语言结构体封装
  */  
   if sap_input.VIEW_BASE = 'X' then
      open cur_customer_desc;
      loop fetch cur_customer_desc into cur_desc_row;
        exit when cur_customer_desc%notfound;
        
        l_customer_desc.ROW_ID := cur_desc_row.ROW_ID;
        l_customer_desc.CUSTOMER_ID := cur_desc_row.customer_id;
        l_customer_desc.CUSTOMER_CODE := cur_desc_row.customer_number;
        l_customer_desc.LANGUAGE := substr(cur_desc_row.LANGUAGE,1,1);
        l_customer_desc.CUSTOMER_TITLE := cur_base_row.customer_title;
        l_customer_desc.CUST_NAME1_DESC := cur_desc_row.cust_name1_desc;
        l_customer_desc.CUST_NAME2_DESC := cur_desc_row.cust_name2_desc;
        l_customer_desc.CUST_STREET_DESC := cur_desc_row.cust_street_desc;
        l_customer_desc.CUST_CITYSTREET_DESC := cur_desc_row.cust_citystreet_desc;
        l_customer_desc.SEARCH_TERMS_DESC := cur_desc_row.search_terms_desc;
        
        l_customer_desc.CREATED_BY := cur_desc_row.CREATED_BY;
        l_customer_desc.CREATED := cur_desc_row.CREATED;
        l_customer_desc.LAST_UPD_BY := cur_desc_row.LAST_UPD_BY;
        l_customer_desc.LAST_UPD := cur_desc_row.LAST_UPD;
        l_customer_desc.MODIFICATION_NUM := cur_desc_row.MODIFICATION_NUM;
        l_customer_desc.LAST_VERSION_FLAG := cur_desc_row.LAST_VERSION_FLAG;
        l_customer_desc.VERSION := cur_desc_row.VERSION;
        l_customer_desc.ACTIVE_FLAG := cur_desc_row.ACTIVE_FLAG;
        l_customer_desc.LOCK_FLAG := cur_desc_row.LOCK_FLAG;
        l_customer_desc.DELETE_FLAG := cur_desc_row.DELETE_FLAG;
        l_customer_desc.OPERATE_STATUS := cur_desc_row.OPERATE_STATUS;
        l_customer_desc.REMARK := cur_desc_row.REMARK;
       
        desc_data.extend;
        desc_data(desc_data.count) := l_customer_desc;
        
      end loop;
      close cur_customer_desc;  
      end if; 
   -----------------end 多语言 

    --构建bank_data
    IF sap_input.VIEW_BASE = 'X' then
      open cur_customer_bank;
      loop fetch cur_customer_bank into cur_bank_row;
        exit when cur_customer_bank%notfound;
      
        l_customer_bank.row_id := cur_bank_row.row_id;
        l_customer_bank.customer_ID := cur_bank_row.customer_id;
        l_customer_bank.customer_number := cur_bank_row.customer_number;
  
        l_customer_bank.ACCOUNT_HOLDER_NAME := cur_bank_row.account_holder_name;
        l_customer_bank.BANK_COUNTRY := cur_bank_row.bank_country;
        l_customer_bank.BANK_ACCOUNT_NUM := cur_bank_row.bank_account_num;
        l_customer_bank.BANK_NAME := cur_bank_row.bnk_bank_name;
        l_customer_bank.BANK_BRANCH_CODE := cur_bank_row.bank_branch_code;
        ------hope
       l_customer_bank.IBAN_CODE := cur_bank_row.iban_code;
       l_customer_bank.CONTROL_KEY := cur_bank_row.control_key;
       l_customer_bank.COLLECTION_AUTHORIZATION := cur_bank_row.collection_authorization;
       
       -- add bankinfo
       l_customer_bank.REGION := cur_bank_row.bnk_region;
       -- Lvdecheng 2013-04-15
       l_customer_bank.STREET := substr(cur_bank_row.bnk_street,1,35);
       l_customer_bank.CITY := cur_bank_row.bnk_city;
       l_customer_bank.SWIFT_CODE := cur_bank_row.bnk_swift;
       l_customer_bank.BANK_GROUP := cur_bank_row.bnk_bank_group;
       l_customer_bank.POBK_CURAC := cur_bank_row.bnk_post_bank_flag;
       l_customer_bank.BANK_NO := cur_bank_row.bnk_branch_code;
       --l_customer_bank.BANK_BRANCH := cur_bank_row.bnk_category;
       l_customer_bank.BANK_BRANCH := substrb(cur_bank_row.bnk_category,1,40);
        bank_data.extend;
        bank_data(bank_data.count) := l_customer_bank;
      
      end loop;
      close cur_customer_bank;
    end if;
    
    --组装itab_company
    itab_company := customer_company_table();
    company_txt_data := customer_company_txt_table();
    company_hie_data := customer_company_hie_table();
    company_pay_data := customer_company_pay_table();
    company_nay_data := customer_company_nay_table();
    itab_credit := customer_company_credit_table();--20121025
    open cur_customer_company;
    loop fetch cur_customer_company into cur_company_row;
      exit when cur_customer_company%notfound;
      
      sap_input.VIEW_COMPANY := 'X';
      if  cur_company_row.COMPANY_CODE in ('6260','6200','6250','6740','6710','6770','65G0','6270','62B0','6280','62D0'/*2014-7-14*/,'6560', '6550', '6430', '6500', '65B0', '65A0') then  --20121123--20130416
          SAP_INPUT.VIEW_CREDIT   :='X';
       end if;

      l_customer_company.ROW_ID := cur_company_row.ROW_ID;
      l_customer_company.CUSTOMER_ID := cur_company_row.CUSTOMER_ID;
      l_customer_company.CUSTOMER_NUMBER := cur_company_row.customer_number;
      l_customer_company.COMPANY_CODE := cur_company_row.COMPANY_CODE;
      l_customer_company.HQ := cur_company_row.HQ;
      l_customer_company.RECONCILE_ACCOUNT := cur_company_row.RECONCILE_ACCOUNT;
      l_customer_company.PREVIOUS_ACCT_NUMBER := cur_company_row.PREVIOUS_ACCT_NUMBER;
      l_customer_company.SEQUENCE_NO := cur_company_row.SEQUENCE_NO;
      l_customer_company.PAYMENT_TERM := cur_company_row.PAYMENT_TERM;
      l_customer_company.PAYMENT_METHOD := cur_company_row.PAYMENT_METHOD;
      l_customer_company.PAYMENT_HISTORY := 'X';
      l_customer_company.SUPPLIER_ACCOUNTING := cur_company_row.SUPPLIER_ACCOUNTING;
      l_customer_company.TOLERANCE_GROUP := cur_company_row.TOLERANCE_GROUP;
      l_customer_company.CREATED_BY := cur_company_row.CREATED_BY;
      l_customer_company.CREATED := cur_company_row.CREATED;
      l_customer_company.LAST_UPD_BY := cur_company_row.LAST_UPD_BY;
      l_customer_company.LAST_UPD := cur_company_row.LAST_UPD;
      l_customer_company.MODIFICATION_NUM := cur_company_row.MODIFICATION_NUM;
      l_customer_company.LAST_VERSION_FLAG := cur_company_row.LAST_VERSION_FLAG;
      l_customer_company.VERSION := cur_company_row.VERSION;
      l_customer_company.ACTIVE_FLAG := cur_company_row.ACTIVE_FLAG;
      l_customer_company.LOCK_FLAG := cur_company_row.LOCK_FLAG;
      l_customer_company.DELETE_FLAG := cur_company_row.DELETE_FLAG;
      l_customer_company.OPERATE_STATUS := cur_company_row.OPERATE_STATUS;
      l_customer_company.REMARK := cur_company_row.REMARK;
      
      l_customer_company.PREFERENCE_FLAG := cur_company_row.PREFERENCE_FLAG;
      l_customer_company.DISCOUNT_PRINT_FLAG := cur_company_row.DISCOUNT_PRINT_FLAG;
      l_customer_company.ACCOUNT_REMARK := cur_company_row.ACCOUNT_REMARK;
      
      l_customer_company.master_type := 'CUSTOMER';
      l_customer_company.DATA_KEY1 := l_customer_company.CUSTOMER_NUMBER;
      l_customer_company.DATA_KEY2 := l_customer_company.COMPANY_CODE;
      l_customer_company.DATA_KEY7 := l_return_batch_id;    
      l_customer_company.DATA_KEY8 := user_name;
      l_customer_company.PASS_KEY1 := 'COMPANY';
      l_customer_company.PASS_KEY2 := l_customer_company.ROW_ID;
      l_customer_company.PASS_KEY3 := l_customer_company.CUSTOMER_ID;
      l_customer_company.PASS_KEY4 := worklist_id;
      l_customer_company.OPERATE_STATUS := l_customer_company.OPERATE_STATUS;
      -----hope
      l_customer_company.CASH_MANAGEMENT_GROUP := cur_company_row.cash_management_group;
      l_customer_company.BEXCH_LIMIT := cur_company_row.BEXCH_LIMIT;
      l_customer_company.HOUSE_BANK := cur_company_row.HOUSE_BANK;
      l_customer_company.DUNNPROCEDURE := cur_company_row.DUNNPROCEDURE;
      l_customer_company.HEAD_OFFICE_CODE := cur_company_row.head_office_code;
      
      l_customer_company.ACCOUNTING_TEXTS := cur_company_row.accounting_texts;
      
      l_customer_company.CREDIT_MEMO_PAYTTERM := cur_company_row.CREDIT_MEMO_PAYTTERM;
      l_customer_company.OLD_CUST_CODE        :=cur_company_row.Old_Cust_Code;
      l_customer_company.ACCT_AT_CUST         :=cur_company_row.Acct_At_Cust;
      
  --     l_customer_company.CREDIT_LIMIT := cur_company_row.credit_limit;
  --    l_customer_company.CREDIT_TEXT := cur_company_row.credit_text;
  --    l_customer_company.RISK_TYPE := cur_company_row.risk_type;
      
      itab_company.extend;
      itab_company(itab_company.count) := l_customer_company;
      
     ---ZHANGBIAO 20090511分割字符串成表格
      lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_company_row.accounting_texts,chr(13),''),chr(10));--chr(13)||chr(10)
      lcl_customer_company_txt.CUSTOMER_NUMBER := l_customer_company.CUSTOMER_NUMBER;
      lcl_customer_company_txt.COMPANY_CODE := l_customer_company.COMPANY_CODE;
      lcl_customer_company_txt.ACCOUNTING := '';
      for i in 1..lcl_str_split_table.count 
      loop
         company_txt_data.extend();
         
         lcl_customer_company_txt.ACCOUNTING := lcl_str_split_table(i);
         company_txt_data(company_txt_data.count) := lcl_customer_company_txt;
      end loop;
      --20121217 credit调整成表结构
        if   l_customer_company.COMPANY_CODE in  ('6260','6200','6250','6740','6710','6770','65G0','6270','62B0','6280','62D0'/*2014-7-14*/,'6560', '6550', '6430', '6500', '65B0', '65A0') THEN --20130416zhanglei
      lcl_customer_company_credit.CUSTOMER_NUMBER :=l_customer_company.CUSTOMER_NUMBER;
      lcl_customer_company_credit.COMPANY_CODE :=l_customer_company.COMPANY_CODE;
      lcl_customer_company_credit.OPERATE_STATUS :=l_customer_company.OPERATE_STATUS;
      lcl_customer_company_credit.RISK_TYPE  :=cur_company_row.risk_type;
      lcl_customer_company_credit.CREDIT_LIMIT :=cur_company_row.credit_limit;
      lcl_customer_company_credit.CREDIT_TEXT :=cur_company_row.credit_text;
       lcl_customer_company_credit.START_ACTIVE_DATE :=replace(cur_company_row.start_active_date,'-','');                                                   
      lcl_customer_company_credit.END_ACTIVE_DATE :=replace(cur_company_row.end_active_date,'-','');  
      lcl_customer_company_credit.CREDIT_ACCOUNT :=cur_company_row.Credit_Account;
      
        itab_credit.extend();
        itab_credit(itab_credit.count) := lcl_customer_company_credit;
      end if;

      --日本is
      IF l_customer_company.COMPANY_CODE = '6400' THEN
        lcl_customer_company_hie.BUKRS := l_customer_company.COMPANY_CODE;
        lcl_customer_company_hie.KUNNR := l_customer_company.CUSTOMER_NUMBER;
        lcl_customer_company_hie.INVSUMROLE := cur_company_row.INVSUMROLE;
        lcl_customer_company_hie.INVSUMRECIP := cur_company_row.INVSUMRECIP;
        lcl_customer_company_hie.INVSUMPAYER := cur_company_row.INVSUMPAYER;
        lcl_customer_company_hie.PINRNR := cur_company_row.PINRNR;
        lcl_customer_company_hie.MINRNR := cur_company_row.MINRNR;
        lcl_customer_company_hie.HEADERTAX := cur_company_row.HEADERTAX;
        lcl_customer_company_hie.HOLIDUEDATE := cur_company_row.HOLIDUEDATE;
        lcl_customer_company_hie.BANKCHARGE := cur_company_row.BANKCHARGE;
        lcl_customer_company_hie.PATTERNID := cur_company_row.PATTERNID;
        lcl_customer_company_hie.BANKS := cur_company_row.BANKS;
        lcl_customer_company_hie.BANKK := cur_company_row.BANKK;
        lcl_customer_company_hie.VIRTACCTNR := cur_company_row.VIRTACCTNR;
        company_hie_data.extend();
        company_hie_data(company_hie_data.count) := lcl_customer_company_hie;
        
        lcl_customer_company_pay.BUKRS := l_customer_company.COMPANY_CODE;
        lcl_customer_company_pay.KUNNR := l_customer_company.CUSTOMER_NUMBER;
        lcl_customer_company_pay.VALIDFROM := cur_company_row.VALIDFROM;
        lcl_customer_company_pay.ZTERM := cur_company_row.ZTERM;
        company_pay_data.extend();
        company_pay_data(company_pay_data.count) := lcl_customer_company_pay;
        
        lcl_customer_company_pay.BUKRS := l_customer_company.COMPANY_CODE;
        lcl_customer_company_pay.KUNNR := l_customer_company.CUSTOMER_NUMBER;
        lcl_customer_company_pay.VALIDFROM := cur_company_row.VALIDFROM2;
        lcl_customer_company_pay.ZTERM := cur_company_row.ZTERM2;
        company_pay_data.extend();
        company_pay_data(company_pay_data.count) := lcl_customer_company_pay;

        lcl_customer_company_nay.BUKRS := l_customer_company.COMPANY_CODE;
        lcl_customer_company_nay.KUNNR := l_customer_company.CUSTOMER_NUMBER;
        lcl_customer_company_nay.SEQNO := cur_company_row.SEQNO;
        lcl_customer_company_nay.NAYOSENAME := cur_company_row.NAYOSENAME;
        lcl_customer_company_nay.BANKNAME := cur_company_row.BANKNAME;
        lcl_customer_company_nay.BANKBRANCHNAME := cur_company_row.BANKBRANCHNAME;        
        company_nay_data.extend();
        company_nay_data(company_nay_data.count) := lcl_customer_company_nay;
        
        lcl_customer_company_nay.BUKRS := l_customer_company.COMPANY_CODE;
        lcl_customer_company_nay.KUNNR := l_customer_company.CUSTOMER_NUMBER;
        lcl_customer_company_nay.SEQNO := cur_company_row.SEQNO2;
        lcl_customer_company_nay.NAYOSENAME := cur_company_row.NAYOSENAME2;
        lcl_customer_company_nay.BANKNAME := cur_company_row.BANKNAME2;
        lcl_customer_company_nay.BANKBRANCHNAME := cur_company_row.BANKBRANCHNAME2;        
        company_nay_data.extend();
        company_nay_data(company_nay_data.count) := lcl_customer_company_nay;
        
      END IF;
      
    end loop;
    close cur_customer_company;
  
    --组装itab_sales
    itab_sales := customer_sales_table();
    sales_txt_data := customer_sales_txt_table();
    
    open cur_customer_sales;
    loop fetch cur_customer_sales into cur_sales_row;
      exit when cur_customer_sales%notfound;
      
      sap_input.VIEW_SALES := 'X';

      l_customer_sales.ROW_ID := cur_sales_row.ROW_ID;
      l_customer_sales.CUSTOMER_ID := cur_sales_row.CUSTOMER_ID;
      l_customer_sales.CUSTOMER_NUMBER := cur_sales_row.CUSTOMER_NUMBER;
      l_customer_sales.DISTRIBUTION_CHANNEL := cur_sales_row.DISTRIBUTION_CHANNEL;
      l_customer_sales.DIVISION := cur_sales_row.DIVISION;
      l_customer_sales.SALES_GROUP := cur_sales_row.SALES_GROUP;
      l_customer_sales.SALES_REGION := cur_sales_row.SALES_REGION;
      l_customer_sales.CURRENCY_CODE := cur_sales_row.CURRENCY_CODE;
      l_customer_sales.CUSTOMER_PRICING_PROCCESS := cur_sales_row.CUSTOMER_PRICING_PROCCESS;
      l_customer_sales.CUSTOMER_SUMMARY_GROUP := cur_sales_row.CUSTOMER_SUMMARY_GROUP;
      l_customer_sales.SHIP_CONDITION := cur_sales_row.SHIP_CONDITION;
      l_customer_sales.SHIP_PLANT := cur_sales_row.SHIP_PLANT;
      l_customer_sales.ACCOUNT_DISTRIBUTE_GROUP := cur_sales_row.ACCOUNT_DISTRIBUTE_GROUP;
      l_customer_sales.CUST_TAX_CATEGORY := cur_sales_row.CUST_TAX_CATEGORY;
      l_customer_sales.PRICE_LIST_TYPE := cur_sales_row.PRICE_LIST_TYPE;
      l_customer_sales.PAYMENT_TERMS_1 := cur_sales_row.PAYMENT_TERMS_1;
      l_customer_sales.PRICE_GROUP := cur_sales_row.PRICE_GROUP;

      l_customer_sales.SALES_GRP := cur_sales_row.sales_grp;
      l_customer_sales.POD_RELATION := cur_sales_row.pod_relation;

      l_customer_sales.CREATED_BY := cur_sales_row.CREATED_BY;
      l_customer_sales.CREATED := cur_sales_row.CREATED;
      l_customer_sales.LAST_UPD_BY := cur_sales_row.LAST_UPD_BY;
      l_customer_sales.LAST_UPD := cur_sales_row.LAST_UPD;
      l_customer_sales.MODIFICATION_NUM := cur_sales_row.MODIFICATION_NUM;
      l_customer_sales.LAST_VERSION_FLAG := cur_sales_row.LAST_VERSION_FLAG;
      l_customer_sales.VERSION := cur_sales_row.VERSION;
      l_customer_sales.ACTIVE_FLAG := cur_sales_row.ACTIVE_FLAG;
      l_customer_sales.LOCK_FLAG := cur_sales_row.LOCK_FLAG;
      l_customer_sales.DELETE_FLAG := cur_sales_row.DELETE_FLAG;
      l_customer_sales.OPERATE_STATUS := cur_sales_row.OPERATE_STATUS;
      l_customer_sales.REMARK := cur_sales_row.REMARK;
      
      l_customer_sales.master_type := 'CUSTOMER';
      l_customer_sales.DATA_KEY1 := l_customer_sales.CUSTOMER_NUMBER;
      l_customer_sales.DATA_KEY2 := l_customer_sales.SALES_GROUP;
      l_customer_sales.DATA_KEY3 := l_customer_sales.DISTRIBUTION_CHANNEL;
      l_customer_sales.DATA_KEY4 := l_customer_sales.DIVISION;
      l_customer_sales.DATA_KEY7 := l_return_batch_id;    
      l_customer_sales.DATA_KEY8 := user_name;
      l_customer_sales.PASS_KEY1 := 'SALES';
      l_customer_sales.PASS_KEY2 := l_customer_sales.ROW_ID;
      l_customer_sales.PASS_KEY3 := l_customer_sales.CUSTOMER_ID;
      l_customer_sales.PASS_KEY4 := worklist_id;
      l_customer_sales.OPERATE_STATUS := l_customer_sales.OPERATE_STATUS;
      ------hope
      l_customer_sales.SALES_OFFICE := cur_sales_row.SALES_OFFICE;
      l_customer_sales.CUSTOMER_GROUP := cur_sales_row.CUSTOMER_GROUP;
      l_customer_sales.MARKTING_CENTER := cur_sales_row.MARKTING_CENTER;
      l_customer_sales.INCOTERMS := cur_sales_row.INCOTERMS;
      l_customer_sales.PORT := cur_sales_row.PORT;
      l_customer_sales.PAYM_GUAR_PROC := cur_sales_row.PAYM_GUAR_PROC;
      l_customer_sales.COMPLETE_DELIVERY := cur_sales_row.COMPLETE_DELIVERY;
      l_customer_sales.CUSTOMER_PRICE_PROCEDURE := cur_sales_row.CUSTOMER_PRICE_PROCEDURE;
      l_customer_sales.PICK_TICKET_NOTES := cur_sales_row.PICK_TICKET_NOTES;
      l_customer_sales.BILLING_NOTES := cur_sales_row.BILLING_NOTES;
      l_customer_sales.return_notes :=cur_sales_row.return_notes;
      l_customer_sales.shipping_instruction :=cur_sales_row.shipping_instruction;
      l_customer_sales.LOAD_PORT := cur_sales_row.LOAD_PORT;
      l_customer_sales.DEST_PORT := cur_sales_row.DEST_PORT;
      
      l_customer_sales.PARTIAL_DELIVERY_PER_ITEM := cur_sales_row.PARTIAL_DELIVERY_PER_ITEM;
      l_customer_sales.MAXPARTIAL_DELIVERYS := cur_sales_row.MAXPARTIAL_DELIVERYS;
      --l_customer_sales.CUST_STATS_GRP := cur_sales_row.CUST_STATS_GRP;
      l_customer_sales.REBATE := cur_sales_row.REBATE;
      l_customer_sales.ORDER_COMBINATION := cur_sales_row.ORDER_COMBINATION;
      l_customer_sales.ORDER_PROBABILITY := cur_sales_row.ORDER_PROBABILITY;
      l_customer_sales.DELIVERY_PRIORITY := cur_sales_row.DELIVERY_PRIORITY;

      l_customer_sales.customer_grp4 := cur_sales_row.customer_grp4;
      l_customer_sales.customer_grp5 := cur_sales_row.customer_grp5;
      
      l_customer_sales.ACCT_AT_CUST := cur_sales_row.ACCT_AT_CUST;

      l_customer_sales.customer_grp3 := cur_sales_row.customer_grp3;
      l_customer_sales.klabc := cur_sales_row.klabc;
      l_customer_sales.AUTHORIZATION :=cur_sales_row.authorization;--20121112
  
      --l_customer_sales.division99_flag := cur_sales_row.division99_flag;
      --l_customer_sales.payment99 := cur_sales_row.payment99;
      
       itab_sales.extend;
      itab_sales(itab_sales.count) := l_customer_sales;
      ---xuky 20090330分割字符串成表格
      lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.PICK_TICKET_NOTES,chr(13),''),chr(10)); --chr(13)||chr(10)--201106230 baochh PICK_TICKET_NOTES,chr(13),''),chr(10));
      lcl_customer_sales_txt.CUSTOMER_NUMBER := l_customer_sales.CUSTOMER_NUMBER;
      lcl_customer_sales_txt.DISTRIBUTION_CHANNEL := l_customer_sales.DISTRIBUTION_CHANNEL;
      lcl_customer_sales_txt.DIVISION := l_customer_sales.DIVISION;
      lcl_customer_sales_txt.SALES_GROUP := l_customer_sales.SALES_GROUP;
      lcl_customer_sales_txt.billing := '';
      lcl_customer_sales_txt.returnn :='';--add20121009
     lcl_customer_sales_txt.shipping :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.pick := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;

      lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.billing_notes,chr(13),''),chr(10)); --chr(13)||chr(10)
      lcl_customer_sales_txt.pick := '';
      lcl_customer_sales_txt.returnn :='';--add20121009
      lcl_customer_sales_txt.shipping :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.billing := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;
      
      
      
      
      
      
      
       lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.Return_Notes,chr(13),''),chr(10)); --chr(13)||chr(10)
         lcl_customer_sales_txt.shipping := '';
         lcl_customer_sales_txt.pick:='';
         lcl_customer_sales_txt.billing:='';

      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         lcl_customer_sales_txt.returnn := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;
       lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.Shipping_Instruction,chr(13),''),chr(10)); --chr(13)||chr(10)
         lcl_customer_sales_txt.returnn := '';
         lcl_customer_sales_txt.pick:='';
         lcl_customer_sales_txt.billing:='';

      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.shipping := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;

  --------------
 /*  lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.return_notes,chr(13),''),chr(10)); --chr(13)||chr(10)
      lcl_customer_sales_txt.returnn :='';
    --  lcl_customer_sales_txt.returnn :='';--add20121009
    --  lcl_customer_sales_txt.shipping :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.returnn := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;
       lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.shipping_instruction,chr(13),''),chr(10)); --chr(13)||chr(10)
       lcl_customer_sales_txt.shipping :='';
    --  lcl_customer_sales_txt.returnn :='';--add20121009
    --  lcl_customer_sales_txt.shipping :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.shipping := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;*/
  --------------    
      
      
/*--kaishi      --add baochh 20121009
       lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.return_notes,chr(13),''),chr(10)); --chr(13)||chr(10)
      lcl_customer_sales_txt.pick := '';
      lcl_customer_sales_txt.billing :='';
      lcl_customer_sales_txt.shipping :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.returnn := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;
----end add 
---add baochh 20121009
       lcl_str_split_table := str_split_table();
      lcl_str_split_table := comm_util.FUNC_SPLIT(replace(cur_sales_row.shipping_instruction,chr(13),''),chr(10)); --chr(13)||chr(10)
      lcl_customer_sales_txt.pick := '';
      lcl_customer_sales_txt.billing :='';
      lcl_customer_sales_txt.returnn :='';--add20121009
      for i in 1..lcl_str_split_table.count 
      loop
         sales_txt_data.extend();
         
         lcl_customer_sales_txt.shipping := lcl_str_split_table(i);
         sales_txt_data(sales_txt_data.count) := lcl_customer_sales_txt;
      end loop;*/
----end add        
/*      --模版临时
      l_customer_tax.CUSTOMER_NUMBER := cur_sales_row.customer_number;
      l_customer_tax.ALAND := 'CN';
      l_customer_tax.TATYP := 'MWST';
      l_customer_tax.TAXKD := cur_sales_row.CUST_TAX_CATEGORY;
        
      tax_data.extend;
      tax_data(tax_data.count) := l_customer_tax;
      --模版临时*/
                      
    end loop;
    close cur_customer_sales;
    
    if sap_input.VIEW_SALES = 'X' then   
    
    open cur_customer_tax;
      loop fetch cur_customer_tax into cur_tax_row;
        exit when cur_customer_tax%notfound;
        
        l_customer_tax.ROW_ID := cur_tax_row.ROW_ID;
        l_customer_tax.CUSTOMER_ID := cur_tax_row.CUSTOMER_ID;
        l_customer_tax.CUSTOMER_NUMBER := cur_tax_row.customer_number;
        l_customer_tax.ALAND := cur_tax_row.ALAND;
        l_customer_tax.TATYP := cur_tax_row.TATYP;
        l_customer_tax.TAXKD := cur_tax_row.TAXKD;
        l_customer_tax.CREATED_BY := cur_tax_row.CREATED_BY;
        l_customer_tax.CREATED := cur_tax_row.CREATED;
        l_customer_tax.LAST_UPD_BY := cur_tax_row.LAST_UPD_BY;
        l_customer_tax.LAST_UPD := cur_tax_row.LAST_UPD;
        l_customer_tax.MODIFICATION_NUM := cur_tax_row.MODIFICATION_NUM;
        l_customer_tax.LAST_VERSION_FLAG := cur_tax_row.LAST_VERSION_FLAG;
        l_customer_tax.VERSION := cur_tax_row.VERSION;
        l_customer_tax.ACTIVE_FLAG := cur_tax_row.ACTIVE_FLAG;
        l_customer_tax.LOCK_FLAG := cur_tax_row.LOCK_FLAG;
        l_customer_tax.DELETE_FLAG := cur_tax_row.DELETE_FLAG;
        l_customer_tax.OPERATE_STATUS := cur_tax_row.OPERATE_STATUS;
        l_customer_tax.REMARK := cur_tax_row.REMARK;
        
        tax_data.extend;
        tax_data(tax_data.count) := l_customer_tax;
                
      end loop;
      close cur_customer_tax;
   
      open cur_customer_partner;
      loop fetch cur_customer_partner into cur_partner_row;
        exit when cur_customer_partner%notfound;
        
/*        l_customer_partner := customer_partner_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL,
                                                                      null);
*/        
        l_customer_partner.ROW_ID := cur_partner_row.ROW_ID;
        l_customer_partner.SALES_AREA_VIEW_ID := cur_partner_row.SALES_AREA_VIEW_ID;
        l_customer_partner.CUSTOMER_NUMBER := cur_partner_row.customer_number;
        l_customer_partner.DISTRIBUTION_CHANNEL := cur_partner_row.DISTRIBUTION_CHANNEL;
        l_customer_partner.DIVISION := cur_partner_row.DIVISION;
        l_customer_partner.SALES_GROUP := cur_partner_row.SALES_GROUP;
        l_customer_partner.PARTNER_FUNCTION := cur_partner_row.cust_partner_type;
        l_customer_partner.PARTNER_REFERENCE := cur_partner_row.description;
        l_customer_partner.PARTNER_SUBJECT_ID  :=cur_partner_row.cust_partner_subject_id;--cuiyj140212添加 怀疑下面逻辑少这句
        --hope
        if l_customer_partner.PARTNER_FUNCTION = 'CR' then
          l_customer_partner.PARTNER_SUBJECT_ID  := NULL;       
          l_customer_partner.PARTNER_SUBJECT_ID2 := cur_partner_row.cust_partner_subject_id; 
        else
            if  l_customer_partner.PARTNER_SUBJECT_ID not in ('62B0','65A0','65F0') and  l_customer_partner.PARTNER_SUBJECT_ID NOT IN ('62A0','65B0','65F0') then --add baochh 20110929-20120330(65F0)
               l_customer_partner.PARTNER_SUBJECT_ID  := lpad(cur_partner_row.cust_partner_subject_id,10,'0'); --modifed by zhangbiao090422
               l_customer_partner.PARTNER_SUBJECT_ID2 := NULL;
          else --add baochh 20110929
             l_customer_partner.PARTNER_SUBJECT_ID  := cur_partner_row.cust_partner_subject_id; 
             l_customer_partner.PARTNER_SUBJECT_ID2 := NULL;
          
          end if;
        end if;
        
        partner_data.extend;
        partner_data(partner_data.count) := l_customer_partner;
                
      end loop;
      close cur_customer_partner;
          
    end if;
    --xuky 20090421 从hm_customer_contacts中获取联系人信息，需要排除基本表中已经存在的联系人信息
    IF sap_input.VIEW_BASE = 'X' then
      lcl_contacts_flag := '0';
      if contact_data.count > 0 then
         lcl_contacts_flag := '1';
      end if;
      for cur_customer_contacts in (SELECT tt.CUSTOMER_ID,tt.NAME1,tt.CUST_CONTACT_DEPT, t.customer_number FROM hm_customer_contacts tt, hm_customers t
                                     WHERE tt.customer_id = t.row_id
                                       and t.row_id like key_id )
      loop
        if  lcl_contacts_flag = '0' then
          l_customer_contact.ROW_ID := '';
          l_customer_contact.CUSTOMER_ID := cur_customer_contacts.CUSTOMER_ID;
          l_customer_contact.CUSTOMER_NUMBER := cur_customer_contacts.customer_number;
          l_customer_contact.NAME1 := cur_customer_contacts.NAME1;
          l_customer_contact.TELF1 := '';
          l_customer_contact.CUST_CONTACT_DEPT := cur_customer_contacts.CUST_CONTACT_DEPT;
          contact_data.extend;
          contact_data(contact_data.count) := l_customer_contact;
        else
          if not comm_util.func_is_equals(contact_data(1).NAME1, cur_customer_contacts.NAME1) 
               or not comm_util.func_is_equals(contact_data(1).CUST_CONTACT_DEPT, cur_customer_contacts.CUST_CONTACT_DEPT) then
            l_customer_contact.ROW_ID := '';
            l_customer_contact.CUSTOMER_ID := cur_customer_contacts.CUSTOMER_ID;
            l_customer_contact.CUSTOMER_NUMBER := cur_customer_contacts.customer_number;
            l_customer_contact.NAME1 := cur_customer_contacts.NAME1;
            l_customer_contact.TELF1 := '';
            l_customer_contact.CUST_CONTACT_DEPT := cur_customer_contacts.CUST_CONTACT_DEPT;
            contact_data.extend;
            contact_data(contact_data.count) := l_customer_contact;
          end if;
        end if;
      end loop;   
     end if;   
 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    --retmsg  := sqlerrm;      
    retmsg  := '操作异常！'||
             chr(10)||'['||comm_util.f_get_current_procname||']:'||SQLERRM||
             chr(10)||'AT SOURCE LINE:'||
             chr(10)||comm_util.sys_get_error_source( dbms_utility.format_error_backtrace ,0);  
  END getCustomer;

/*	--提取指定客户销售样表数据，调用SAP维护客户销售样表数据的RFC
  PROCEDURE getSalesTemplate
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT customer_salestemplate_table
  ) IS
  
    --l_cost_center_code  varchar2(20);
    l_return_batch_id          varchar2(20);
    
    --组装itab_base所需定义
    l_salestemplate_base customer_salestemplate_type := customer_salestemplate_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_salestemplate_base IS
      SELECT * FROM hm_cust_sales_template t
       WHERE t.action_batch_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE');
    cur_base_row cur_salestemplate_base%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    --select cost_center into l_cost_center_code from hm_fnd_cost_center where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    --组装itab_base
    itab_base := customer_salestemplate_table();
    
    open cur_salestemplate_base;
    loop fetch cur_salestemplate_base into cur_base_row;
      exit when cur_salestemplate_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_salestemplate_base.ROW_ID := cur_base_row.ROW_ID;
      l_salestemplate_base.MATERIAL_CODE := cur_base_row.MATERIAL_CODE;
      l_salestemplate_base.SALES_ORGANIZATION := cur_base_row.SALES_ORGANIZATION;
      l_salestemplate_base.SALES_CHANNEL := cur_base_row.SALES_CHANNEL;
      l_salestemplate_base.SALES_CHANNEL2 := cur_base_row.SALES_CHANNEL2;
      l_salestemplate_base.MARKET_LEVEL := cur_base_row.MARKET_LEVEL;
      l_salestemplate_base.CUSTOMER_CODE := cur_base_row.CUSTOMER_CODE;
      l_salestemplate_base.SO_CREATE_CLOSURE := cur_base_row.SO_CREATE_CLOSURE;
      l_salestemplate_base.ACTIVE_DATE_BEGIN := cur_base_row.ACTIVE_DATE_BEGIN;
      l_salestemplate_base.ACTIVE_DATE_END := cur_base_row.ACTIVE_DATE_END;
      l_salestemplate_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_salestemplate_base.CREATED := cur_base_row.CREATED;
      l_salestemplate_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_salestemplate_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_salestemplate_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_salestemplate_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_salestemplate_base.VERSION := cur_base_row.VERSION;
      l_salestemplate_base.ACTIVE_FLAG := cur_base_row.ACTIVE_FLAG;
      l_salestemplate_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_salestemplate_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_salestemplate_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_salestemplate_base.REMARK := cur_base_row.REMARK;
      l_salestemplate_base.ACTION_BATCH_ID := cur_base_row.ACTION_BATCH_ID;

      l_salestemplate_base.master_type := 'SALESTEMPLATE';
      l_salestemplate_base.DATA_KEY1 := l_salestemplate_base.MATERIAL_CODE;
      l_salestemplate_base.DATA_KEY7 := l_return_batch_id;    
      l_salestemplate_base.DATA_KEY8 := user_name;
      l_salestemplate_base.PASS_KEY1 := 'BASE';
      l_salestemplate_base.PASS_KEY2 := l_salestemplate_base.row_id;
      l_salestemplate_base.PASS_KEY3 := l_salestemplate_base.action_batch_id;
      l_salestemplate_base.PASS_KEY4 := worklist_id;
      l_salestemplate_base.OPERATE_STATUS := l_salestemplate_base.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_cost;
      
    end loop;
    close cur_salestemplate_base;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getSalesTemplate;
*/
 --提取指定会计科目数据，调用SAP创建会计科目数据的RFC
  PROCEDURE getAccounts
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT accounts_base_table,
    itab_company   OUT accounts_company_table
  ) IS
  
    l_gl_account_code  varchar2(20);
    l_return_batch_id     varchar2(20);
    
    --组装itab_base所需定义
    l_base_accounts accounts_base_type := accounts_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL);
  
    CURSOR cur_accounts_base IS
      SELECT * FROM hm_fnd_accounts t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_accounts_base%ROWTYPE;
    
    --组装itab_company所需定义
    l_accounts_company     accounts_company_type := accounts_company_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                          NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                                          NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                          NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                                          NULL, NULL, NULL);
    CURSOR cur_accounts_company IS
      SELECT * FROM hm_fnd_accounts_company t
       WHERE t.account_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0'; 
    cur_company_row cur_accounts_company%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select gl_account_code into l_gl_account_code from hm_fnd_accounts where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'ACCOUNTS';
    sap_input.DATA_KEY1 := l_gl_account_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := accounts_base_table();
    
    open cur_accounts_base;
    loop fetch cur_accounts_base into cur_base_row;
      exit when cur_accounts_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_base_accounts.ROW_ID := cur_base_row.row_id;
      l_base_accounts.GL_ACCOUNT_CODE := cur_base_row.gl_account_code;
      l_base_accounts.STATEMENT_OF_ACCTS := cur_base_row.statement_of_accts;
      l_base_accounts.GL_ACCOUNT_GRP := cur_base_row.gl_account_grp;
      l_base_accounts.BALANCE_ACCOUNT := cur_base_row.balance_account;
      l_base_accounts.PROFIT_LOSS_ACCOUNT := cur_base_row.profit_loss_account;
      l_base_accounts.GL_ACCOUNT_NAME := cur_base_row.gl_account_name;
      l_base_accounts.GL_ACCOUNT_DESC := cur_base_row.gl_account_desc;
      l_base_accounts.CREATED_BY := cur_base_row.created_by;
      l_base_accounts.CREATED := cur_base_row.created;
      l_base_accounts.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_accounts.LAST_UPD := cur_base_row.last_upd;
      l_base_accounts.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_accounts.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_accounts.VERSION := cur_base_row.version;
      l_base_accounts.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_accounts.LOCK_FLAG := cur_base_row.lock_flag;
      l_base_accounts.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_accounts.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_accounts.REMARK := cur_base_row.remark;      
      
      l_base_accounts.master_type := 'ACCOUNTS';
      l_base_accounts.DATA_KEY1 := l_base_accounts.gl_account_code;
      l_base_accounts.DATA_KEY7 := l_return_batch_id;    
      l_base_accounts.DATA_KEY8 := user_name;
      l_base_accounts.PASS_KEY1 := 'BASE';
      l_base_accounts.PASS_KEY2 := l_base_accounts.row_id;
      l_base_accounts.PASS_KEY3 := l_base_accounts.row_id;
      l_base_accounts.PASS_KEY4 := worklist_id;
      l_base_accounts.OPERATE_STATUS := l_base_accounts.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_accounts;
      
    end loop;
    close cur_accounts_base;
    
  --组装itab_company
    itab_company := accounts_company_table();
    
    open cur_accounts_company;
    loop fetch cur_accounts_company into cur_company_row;
      exit when cur_accounts_company%notfound;
      
      sap_input.VIEW_COMPANY := 'X';

      l_accounts_company.ROW_ID := cur_company_row.row_id;
      l_accounts_company.ACCOUNT_ID := cur_company_row.account_id;
      l_accounts_company.GL_ACCOUNT_CODE := l_gl_account_code;
      l_accounts_company.COMPANY_CODE := cur_company_row.company_code;
      l_accounts_company.CURRENCY_CODE := cur_company_row.currency_code;
      l_accounts_company.TAX_TYPE := cur_company_row.tax_type;
      l_accounts_company.POST_WITH_TAX := cur_company_row.post_with_tax;
      l_accounts_company.RECONCILE_ACCT_TYPE := cur_company_row.reconcile_acct_type;
      l_accounts_company.STD_CURRENCY_AMT := cur_company_row.std_currency_amt;
      l_accounts_company.PROJECT_MGT := cur_company_row.project_mgt;
      l_accounts_company.NONCLEAR_PROJECT_MGT := cur_company_row.nonclear_project_mgt;
      l_accounts_company.SEQUENCE_NO := cur_company_row.sequence_no;
      l_accounts_company.RECON_ACCT_ENTERABLE := cur_company_row.recon_acct_enterable;
      l_accounts_company.FIELD_STATUS_GRP := cur_company_row.field_status_grp;
      l_accounts_company.AUTO_POST_ONLY := cur_company_row.auto_post_only;
      l_accounts_company.SUPPLIMENT_AUTO_POST := cur_company_row.suppliment_auto_post;
      l_accounts_company.GL_ACCOUNT_BANK := cur_company_row.gl_account_bank;
      l_accounts_company.BANK_ACCOUNT_NUM := cur_company_row.bank_account_num;    
      l_accounts_company.OPERATE_STATUS := cur_company_row.OPERATE_STATUS;
      
      l_accounts_company.master_type := 'ACCOUNTS';
      l_accounts_company.DATA_KEY1 := l_accounts_company.GL_ACCOUNT_CODE;
      l_accounts_company.DATA_KEY2 := l_accounts_company.COMPANY_CODE;
      l_accounts_company.DATA_KEY7 := l_return_batch_id;    
      l_accounts_company.DATA_KEY8 := user_name;
      l_accounts_company.PASS_KEY1 := 'COMPANY';
      l_accounts_company.PASS_KEY2 := l_accounts_company.ROW_ID;
      l_accounts_company.PASS_KEY3 := l_accounts_company.ACCOUNT_ID;
      l_accounts_company.PASS_KEY4 := worklist_id;
      l_accounts_company.OPERATE_STATUS := l_accounts_company.OPERATE_STATUS;
       
      itab_company.extend;
      itab_company(itab_company.count) := l_accounts_company;
      
    end loop;
    close cur_accounts_company;  

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getAccounts;

	--提取指定成本中心数据，调用SAP创建成本中心数据的RFC
  PROCEDURE getCostCenter
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT costcenter_base_table2
  ) IS
  
    l_cost_center_code  varchar2(20);
    l_return_batch_id          varchar2(20);
    
    --组装itab_base所需定义
    l_base_cost costcenter_base_type2 := costcenter_base_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL);
  
    CURSOR cur_cost_center IS
      SELECT * FROM hm_fnd_cost_center t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_cost_center%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select cost_center into l_cost_center_code from hm_fnd_cost_center where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'COSTCENTER';
    sap_input.DATA_KEY1 := l_cost_center_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY2 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := costcenter_base_table2();
    
    open cur_cost_center;
    loop fetch cur_cost_center into cur_base_row;
      exit when cur_cost_center%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_base_cost.ROW_ID := cur_base_row.row_id;
      l_base_cost.COST_CENTER := cur_base_row.cost_center;
      l_base_cost.COST_CENTER_NAME := cur_base_row.cost_center_name;
      l_base_cost.DESCRIPTION := cur_base_row.description;
      l_base_cost.RESPONSIBLE_BY := cur_base_row.responsible_by;
      l_base_cost.RESP_DEPT := cur_base_row.resp_dept;
      l_base_cost.COST_CENTER_TYPE := cur_base_row.cost_center_type;
      l_base_cost.HIERARCHY_SCOPE := cur_base_row.hierarchy_scope;
      l_base_cost.COMPANY_CODE := cur_base_row.company_code;
      l_base_cost.PROFIT_CENTER_CODE := cur_base_row.profit_center_code;
      l_base_cost.COST_CONTROL_SCOPE := cur_base_row.cost_control_scope;
      l_base_cost.END_ACTIVE_DATE := TO_CHAR(cur_base_row.end_active_date,'YYYY.MM.DD');
      l_base_cost.START_ACTIVE_DATE := TO_CHAR(cur_base_row.start_active_date,'YYYY.MM.DD');
      l_base_cost.RESP_USER := cur_base_row.resp_user;
      l_base_cost.FUNCTION_SCOPE := cur_base_row.function_scope;
      l_base_cost.CURRENCY_CODE := cur_base_row.currency_code;
      l_base_cost.CREATED_BY := cur_base_row.created_by;
      l_base_cost.CREATED := cur_base_row.created;
      l_base_cost.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_cost.LAST_UPD := cur_base_row.last_upd;
      l_base_cost.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_cost.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_cost.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_cost.REMARK := cur_base_row.remark;
      l_base_cost.VERSION := cur_base_row.version;
      l_base_cost.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_cost.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_cost.LOCK_FLAG := cur_base_row.lock_flag;      
      
      l_base_cost.BUSINESS_AREA := '';
      
      l_base_cost.master_type := 'COSTCENTER';
      l_base_cost.DATA_KEY1 := l_base_cost.cost_center;
      l_base_cost.DATA_KEY7 := l_return_batch_id;    
      l_base_cost.DATA_KEY8 := user_name;
      l_base_cost.PASS_KEY1 := 'BASE';
      l_base_cost.PASS_KEY2 := l_base_cost.row_id;
      l_base_cost.PASS_KEY3 := l_base_cost.row_id;
      l_base_cost.PASS_KEY4 := worklist_id;
      l_base_cost.OPERATE_STATUS := l_base_cost.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_cost;
      
    end loop;
    close cur_cost_center;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getCostCenter;

	--提取指定利润中心数据，调用SAP创建利润中心数据的RFC
	PROCEDURE getProfitCenter
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT profitcenter_base_table
  ) IS
  
    l_profit_center_code  varchar2(20);
    l_return_batch_id            varchar2(20);
    
    --组装itab_base所需定义
    l_base_profit profitcenter_base_type := profitcenter_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_profit_center IS
      SELECT * FROM hm_fnd_profit_center t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_profit_center%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select profit_center_code into l_profit_center_code from hm_fnd_profit_center where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'PROFITCENTER';
    sap_input.DATA_KEY1 := l_profit_center_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := profitcenter_base_table();
    
    open cur_profit_center;
    loop fetch cur_profit_center into cur_base_row;
      exit when cur_profit_center%notfound;
      
      sap_input.VIEW_BASE := 'X';
      
      
      l_base_profit.ROW_ID := cur_base_row.row_id;
      l_base_profit.PROFIT_CENTER_CODE := cur_base_row.profit_center_code;
      l_base_profit.COST_CONTROL_SCOPE := cur_base_row.cost_control_scope;
      l_base_profit.END_ACTIVE_DATE := TO_CHAR(cur_base_row.end_active_date,'YYYY.MM.DD');
      l_base_profit.START_ACTIVE_DATE := TO_CHAR(cur_base_row.start_active_date,'YYYY.MM.DD');
      l_base_profit.PROFIT_CENTER_NAME := cur_base_row.profit_center_name;
      l_base_profit.DESCRIPTION := cur_base_row.description;
      l_base_profit.RESP_USER := cur_base_row.resp_user;
      l_base_profit.RESPONSIBLE_BY := cur_base_row.responsible_by;
      l_base_profit.RESP_DEPT := cur_base_row.resp_dept;
      l_base_profit.PROFIT_CENTER_GRP := cur_base_row.profit_center_grp;
      l_base_profit.CREATED_BY := cur_base_row.created_by;
      l_base_profit.CREATED := cur_base_row.created;
      l_base_profit.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_profit.LAST_UPD := cur_base_row.last_upd;
      l_base_profit.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_profit.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_profit.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_profit.REMARK := cur_base_row.remark;
      l_base_profit.VERSION := cur_base_row.version;
      l_base_profit.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_profit.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_profit.LOCK_FLAG := cur_base_row.lock_flag;
      
      l_base_profit.master_type := 'PROFITCENTER';
      l_base_profit.DATA_KEY1 := l_base_profit.profit_center_code;
      l_base_profit.DATA_KEY7 := l_return_batch_id;    
      l_base_profit.DATA_KEY8 := user_name;
      l_base_profit.PASS_KEY1 := 'BASE';
      l_base_profit.PASS_KEY2 := l_base_profit.row_id;
      l_base_profit.PASS_KEY3 := l_base_profit.row_id;
      l_base_profit.PASS_KEY4 := worklist_id;
      l_base_profit.OPERATE_STATUS := l_base_profit.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_profit;
      
    end loop;
    close cur_profit_center;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getProfitCenter;
  
  --提取指定次级成本要素数据，调用SAP创建次级成本要素数据的RFC
  PROCEDURE getSecCostElements
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT seccostelements_base_table
  ) IS
  
    l_cost_element_code   varchar2(20);
    l_return_batch_id            varchar2(20);
    
    --组装itab_base所需定义
    l_base_seccost seccostelements_base_type := seccostelements_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL);
  
    CURSOR cur_seccost_type IS
      SELECT * FROM hm_fnd_sec_cost_elements t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_seccost_type%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    --select cost_element into l_cost_element_code from hm_fnd_sec_cost_elements where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'SECCOST';
    sap_input.DATA_KEY1 := l_cost_element_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := seccostelements_base_table();
    
    open cur_seccost_type;
    loop fetch cur_seccost_type into cur_base_row;
      exit when cur_seccost_type%notfound;
      
      sap_input.VIEW_BASE := 'X';
      
      
      l_base_seccost.ROW_ID := cur_base_row.row_id;  
      l_base_seccost.COST_ELEMENT := cur_base_row.cost_element;
      l_base_seccost.COST_CONTROL_SCOPE := cur_base_row.cost_control_scope;
      l_base_seccost.END_ACTIVE_DATE := TO_CHAR(cur_base_row.end_active_date,'YYYY.MM.DD');
      l_base_seccost.START_ACTIVE_DATE := TO_CHAR(cur_base_row.start_active_date,'YYYY.MM.DD');
      l_base_seccost.COST_ELEMENT_NAME := cur_base_row.cost_element_name;
      l_base_seccost.DESCRIPTION := cur_base_row.description;
      l_base_seccost.COST_ELEMENT_CLASS := cur_base_row.cost_element_class;
      l_base_seccost.CREATED_BY := cur_base_row.created_by;
      l_base_seccost.CREATED := cur_base_row.created;
      l_base_seccost.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_seccost.LAST_UPD := cur_base_row.last_upd;
      l_base_seccost.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_seccost.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_seccost.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_seccost.REMARK := cur_base_row.remark;
      l_base_seccost.VERSION := cur_base_row.version;
      l_base_seccost.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_seccost.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_seccost.LOCK_FLAG := cur_base_row.lock_flag; 
      
      l_base_seccost.master_type := 'SECCOST';
      l_base_seccost.DATA_KEY1 := l_base_seccost.cost_element;
      l_base_seccost.DATA_KEY7 := l_return_batch_id;    
      l_base_seccost.DATA_KEY8 := user_name;
      l_base_seccost.PASS_KEY1 := 'BASE';
      l_base_seccost.PASS_KEY2 := l_base_seccost.row_id;
      l_base_seccost.PASS_KEY3 := l_base_seccost.row_id;
      l_base_seccost.PASS_KEY4 := worklist_id;
      l_base_seccost.OPERATE_STATUS := l_base_seccost.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_seccost;
      
    end loop;
    close cur_seccost_type;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getSecCostElements;
  
  --提取指定统计指标数据，调用SAP创建统计指标数据的RFC
  PROCEDURE getStatisticIndex
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT statisticindex_base_table
  ) IS
  
    l_statistic_code      varchar2(20);
    l_return_batch_id            varchar2(20);
    
    --组装itab_base所需定义
    l_base_statistic statisticindex_base_type := statisticindex_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL);
  
    CURSOR cur_statistic_index IS
      SELECT * FROM hm_fnd_statistic_index t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_statistic_index%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select stat_index into l_statistic_code from hm_fnd_statistic_index where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'STATISTIC';
    sap_input.DATA_KEY1 := l_statistic_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := statisticindex_base_table();
    
    open cur_statistic_index;
    loop fetch cur_statistic_index into cur_base_row;
      exit when cur_statistic_index%notfound;
      
      sap_input.VIEW_BASE := 'X';
      
      
      l_base_statistic.ROW_ID := cur_base_row.row_id;      
      l_base_statistic.STAT_INDEX := cur_base_row.stat_index;
      l_base_statistic.STAT_INDEX_NAME := cur_base_row.stat_index_name;
      l_base_statistic.STAT_INDEX_UNIT := cur_base_row.stat_index_unit;
      l_base_statistic.COST_CONTROL_SCOPE := cur_base_row.cost_control_scope;
      l_base_statistic.FIX_VAL_FLAG := cur_base_row.fix_val_flag;
      l_base_statistic.SUMMARY_VAL_FLAG := cur_base_row.summary_val_flag;
      l_base_statistic.CREATED_BY := cur_base_row.created_by;
      l_base_statistic.CREATED := cur_base_row.created;
      l_base_statistic.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_statistic.LAST_UPD := cur_base_row.last_upd;
      l_base_statistic.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_statistic.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_statistic.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_statistic.REMARK := cur_base_row.remark;
      l_base_statistic.VERSION := cur_base_row.version;
      l_base_statistic.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_statistic.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_statistic.LOCK_FLAG := cur_base_row.lock_flag;
      
      l_base_statistic.master_type := 'STATISTIC';
      l_base_statistic.DATA_KEY1 := l_base_statistic.stat_index;
      l_base_statistic.DATA_KEY7 := l_return_batch_id;    
      l_base_statistic.DATA_KEY8 := user_name;
      l_base_statistic.PASS_KEY1 := 'BASE';
      l_base_statistic.PASS_KEY2 := l_base_statistic.row_id;
      l_base_statistic.PASS_KEY3 := l_base_statistic.row_id;
      l_base_statistic.PASS_KEY4 := worklist_id;
      l_base_statistic.OPERATE_STATUS := l_base_statistic.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_statistic;
      
    end loop;
    close cur_statistic_index;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getStatisticIndex;
  
  --提取指定作业类型数据，调用SAP创建作业类型数据的RFC
  PROCEDURE getWorkType
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT worktype_base_table
  ) IS
  
    l_worktype_code       varchar2(20);
    l_return_batch_id            varchar2(20);
    
    --组装itab_base所需定义
    l_base_worktype worktype_base_type := worktype_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_work_type IS
      SELECT * FROM hm_fnd_work_type t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_work_type%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    select work_type into l_worktype_code from hm_fnd_work_type where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

    sap_input.master_type := 'WORKTYPE';
    sap_input.DATA_KEY1 := l_worktype_code;
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := worktype_base_table();
    
    open cur_work_type;
    loop fetch cur_work_type into cur_base_row;
      exit when cur_work_type%notfound;
      
      sap_input.VIEW_BASE := 'X';
      
      
      l_base_worktype.ROW_ID := cur_base_row.row_id;    
      l_base_worktype.WORK_TYPE := cur_base_row.work_type;
      l_base_worktype.COST_CONTROL_SCOPE := cur_base_row.cost_control_scope;
      l_base_worktype.START_ACTIVE_DATE := TO_CHAR(cur_base_row.start_active_date,'YYYY.MM.DD');
      l_base_worktype.END_ACTIVE_DATE := TO_CHAR(cur_base_row.end_active_date,'YYYY.MM.DD');
      l_base_worktype.CUST_CONTACT_DESC := cur_base_row.cust_contact_desc;
      l_base_worktype.WORK_TYPE_NAME := cur_base_row.work_type_name;
      l_base_worktype.WORK_TYPE_UNIT := cur_base_row.work_type_unit;
      l_base_worktype.COST_CENTER_TYPE := cur_base_row.cost_center_type;
      l_base_worktype.WORK_TYPE_CLASS := cur_base_row.work_type_class;
      l_base_worktype.COST_ELEMENT_ALLOC := cur_base_row.cost_element_alloc;
      l_base_worktype.PROCE_MARK := cur_base_row.proce_mark;
      l_base_worktype.ACTUAL_ACTIVE_TYPE_CLASS := cur_base_row.actual_active_type_class;
      l_base_worktype.ACTUAL_PRICE_MARK := cur_base_row.actual_price_mark;
      l_base_worktype.CREATED_BY := cur_base_row.created_by;
      l_base_worktype.CREATED := cur_base_row.created;
      l_base_worktype.LAST_UPD_BY := cur_base_row.last_upd_by;
      l_base_worktype.LAST_UPD := cur_base_row.last_upd;
      l_base_worktype.MODIFICATION_NUM := cur_base_row.modification_num;
      l_base_worktype.DELETE_FLAG := cur_base_row.delete_flag;
      l_base_worktype.ACTIVE_FLAG := cur_base_row.active_flag;
      l_base_worktype.REMARK := cur_base_row.remark;
      l_base_worktype.VERSION := cur_base_row.version;
      l_base_worktype.LAST_VERSION_FLAG := cur_base_row.last_version_flag;
      l_base_worktype.OPERATE_STATUS := cur_base_row.operate_status;
      l_base_worktype.LOCK_FLAG := cur_base_row.lock_flag;
      
      l_base_worktype.master_type := 'WORKTYPE';
      l_base_worktype.DATA_KEY1 := l_base_worktype.work_type;
      l_base_worktype.DATA_KEY7 := l_return_batch_id;    
      l_base_worktype.DATA_KEY8 := user_name;
      l_base_worktype.PASS_KEY1 := 'BASE';
      l_base_worktype.PASS_KEY2 := l_base_worktype.row_id;
      l_base_worktype.PASS_KEY3 := l_base_worktype.row_id;
      l_base_worktype.PASS_KEY4 := worklist_id;
      l_base_worktype.OPERATE_STATUS := l_base_worktype.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_base_worktype;
      
    end loop;
    close cur_work_type;
    
    

 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getWorkType;

	--提取销售样表数据(使用动作批次ID)
  /*
  PROCEDURE getSalesTemplate
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT customer_salestemplate_table3
  ) IS
  
    --l_cost_center_code  varchar2(20);
    l_return_batch_id          varchar2(20);
    
    --组装itab_base所需定义
    l_salestemplate_base customer_salestemplate_type3 := customer_salestemplate_type3(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL,NULL);
  
    CURSOR cur_salestemplate_base IS
      SELECT * FROM hm_cust_sales_template t
       WHERE t.row_id = key_id and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
       and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_salestemplate_base%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    --select cost_center into l_cost_center_code from hm_fnd_cost_center where row_id = key_id;
    
    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    sap_input.master_type := 'SALESTEMPLATE';
    --sap_input.DATA_KEY1 := 'BATCH';
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := customer_salestemplate_table3();
    
    open cur_salestemplate_base;
    loop fetch cur_salestemplate_base into cur_base_row;
      exit when cur_salestemplate_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_salestemplate_base.ROW_ID := cur_base_row.ROW_ID;
      l_salestemplate_base.MATERIAL_CODE := cur_base_row.MATERIAL_CODE;
      l_salestemplate_base.SALES_ORGANIZATION := cur_base_row.SALES_ORGANIZATION;
      l_salestemplate_base.SALES_CHANNEL := cur_base_row.SALES_CHANNEL;
      l_salestemplate_base.SALES_CHANNEL2 := cur_base_row.SALES_CHANNEL2;
      l_salestemplate_base.MARKET_LEVEL := cur_base_row.MARKET_LEVEL;
      l_salestemplate_base.CUSTOMER_CODE := cur_base_row.CUSTOMER_CODE;
      l_salestemplate_base.SO_CREATE_CLOSURE := to_char(cur_base_row.SO_CREATE_CLOSURE,'YYYY.MM.DD');
      l_salestemplate_base.ACTIVE_DATE_BEGIN := to_char(cur_base_row.ACTIVE_DATE_BEGIN,'YYYY.MM.DD');
      l_salestemplate_base.ACTIVE_DATE_END := to_char(cur_base_row.ACTIVE_DATE_END,'YYYY.MM.DD');
      l_salestemplate_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_salestemplate_base.CREATED := cur_base_row.CREATED;
      l_salestemplate_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_salestemplate_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_salestemplate_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_salestemplate_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_salestemplate_base.VERSION := cur_base_row.VERSION;
      if cur_base_row.ACTIVE_FLAG = '1' then
        l_salestemplate_base.ACTIVE_FLAG := 'X';
      ELSE
        l_salestemplate_base.ACTIVE_FLAG := '';
      end if;
      l_salestemplate_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_salestemplate_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_salestemplate_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_salestemplate_base.REMARK := cur_base_row.REMARK;
      l_salestemplate_base.ACTION_BATCH_ID := cur_base_row.ACTION_BATCH_ID;

      l_salestemplate_base.COMBINE_TYPE:= cur_base_row.combine_type;
      l_salestemplate_base.DEPARTMENT := cur_base_row.DEPARTMENT;

      l_salestemplate_base.master_type := 'SALESTEMPLATE';
      l_salestemplate_base.DATA_KEY3 := l_salestemplate_base.COMBINE_TYPE;
      l_salestemplate_base.DATA_KEY1 := l_salestemplate_base.DEPARTMENT;
      l_salestemplate_base.DATA_KEY2 := l_salestemplate_base.MATERIAL_CODE;
      l_salestemplate_base.DATA_KEY4 := l_salestemplate_base.SALES_ORGANIZATION;
      l_salestemplate_base.DATA_KEY5 := l_salestemplate_base.CUSTOMER_CODE;
      
      l_salestemplate_base.DATA_KEY6 := l_salestemplate_base.action_batch_id;
      l_salestemplate_base.DATA_KEY7 := l_return_batch_id;    
      l_salestemplate_base.DATA_KEY8 := user_name;
      l_salestemplate_base.PASS_KEY1 := 'BASE';
      l_salestemplate_base.PASS_KEY2 := l_salestemplate_base.row_id;
      l_salestemplate_base.PASS_KEY3 := l_salestemplate_base.row_id;
      l_salestemplate_base.PASS_KEY4 := worklist_id;
      itab_base.extend;
      itab_base(itab_base.count) := l_salestemplate_base;
      
    end loop;
    close cur_salestemplate_base;
    
 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getSalesTemplate;

*/
	--提取银行主数据(使用动作批次ID)
  PROCEDURE getBanks
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    batch_flag     in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type2,
    itab_base      OUT banks_base_table
  ) IS
  
    l_return_batch_id          varchar2(20);
    l_batch_flag               char(1);
    
    --组装itab_base所需定义
    l_banks_base banks_base_type := banks_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  
    CURSOR cur_banks_base(p_batch_flag in varchar2) IS
      SELECT * FROM hm_banks t
       WHERE ( ( DECODE(p_batch_flag,NULL,'0',p_batch_flag) = '1' and t.action_batch_id = key_id )
               or
               ( DECODE(p_batch_flag,NULL,'0',p_batch_flag) <> '1' and t.row_id = key_id )
             )
         and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
         and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_banks_base%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    sap_input.master_type := 'BANKS';
    sap_input.DATA_KEY1 := '';
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := banks_base_table();
    if batch_flag is null then
      l_batch_flag := '0';
    else
      l_batch_flag := '1';
    end if;
    
    open cur_banks_base( batch_flag );
    loop fetch cur_banks_base into cur_base_row;
      exit when cur_banks_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_banks_base.ROW_ID := cur_base_row.ROW_ID;
      l_banks_base.BANK_COUNTRY := cur_base_row.BANK_COUNTRY;
      l_banks_base.BANK_BRANCH_CODE := cur_base_row.BANK_BRANCH_CODE;
      l_banks_base.BANK_NAME := cur_base_row.BANK_NAME;
      l_banks_base.REGION := cur_base_row.REGION;
      l_banks_base.STREET_ROOM := cur_base_row.STREET_ROOM;
      l_banks_base.CITY_STREET_ROOM := cur_base_row.CITY_STREET_ROOM;
      l_banks_base.BANK_CATEGORY := cur_base_row.BANK_CATEGORY;
      l_banks_base.SWIFT := cur_base_row.SWIFT;
      l_banks_base.BANK_GROUP := cur_base_row.BANK_GROUP;
      l_banks_base.POST_BANK_FLAG := cur_base_row.POST_BANK_FLAG;
      l_banks_base.BANK_CODE_OTHER := cur_base_row.BANK_CODE_OTHER;
      l_banks_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_banks_base.CREATED := cur_base_row.CREATED;
      l_banks_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_banks_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_banks_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_banks_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_banks_base.ACTIVE_FLAG := cur_base_row.ACTIVE_FLAG;
      l_banks_base.REMARK := cur_base_row.REMARK;
      l_banks_base.VERSION := cur_base_row.VERSION;
      l_banks_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_banks_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_banks_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_banks_base.ACTION_BATCH_ID := cur_base_row.ACTION_BATCH_ID;
      l_banks_base.RETURN_BATCH_ID := cur_base_row.RETURN_BATCH_ID;

      l_banks_base.for_gvs := cur_base_row.for_gvs;
      l_banks_base.audit_flag := cur_base_row.audit_flag;
      l_banks_base.bank_name2 := cur_base_row.bank_name2;
      l_banks_base.bank_name3 := cur_base_row.bank_name3;
      l_banks_base.street_room2 := cur_base_row.street_room2;
      l_banks_base.street_room3 := cur_base_row.street_room3;
      l_banks_base.street_room4 := cur_base_row.street_room4;
      l_banks_base.bank_number_temp := cur_base_row.bank_number_temp;
      l_banks_base.create_apply_id := cur_base_row.create_apply_id;


      l_banks_base.master_type := 'BANKS';
      l_banks_base.DATA_KEY1 := l_banks_base.BANK_COUNTRY;
      l_banks_base.DATA_KEY2 := l_banks_base.BANK_BRANCH_CODE;
      
      if batch_flag = '1' then
        l_banks_base.DATA_KEY6 := l_banks_base.ACTION_BATCH_ID;
      end if;
      
      l_banks_base.DATA_KEY7 := l_return_batch_id;    
      l_banks_base.DATA_KEY8 := user_name;
      l_banks_base.PASS_KEY1 := 'BASE';
      l_banks_base.PASS_KEY2 := l_banks_base.row_id;
      l_banks_base.PASS_KEY3 := l_banks_base.row_id;
      l_banks_base.PASS_KEY4 := worklist_id;
      l_banks_base.OPERATE_STATUS := l_banks_base.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_banks_base;
      
    end loop;
    close cur_banks_base;
    
 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getBanks;

  --提取指定职员数据，调用SAP创建职员主数据的RFC(使用动作批次ID)
  PROCEDURE getEmployee
  (
    key_id         IN VARCHAR2,
    operate_status IN VARCHAR2,
    worklist_id    IN VARCHAR2,
    user_name      in varchar2,
    batch_flag     in varchar2,
    retcode        out varchar2,
    retmsg         out varchar2,
    sap_input      OUT sap_input_type22,
    itab_base      OUT employee_base_table
  ) IS
  
    l_return_batch_id          varchar2(20);
    l_batch_flag               char(1);
    
    --组装itab_base所需定义
    l_employee_base employee_base_type := employee_base_type(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
                                                             NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                                                             NULL, NULL);
  
    CURSOR cur_employee_base(p_batch_flag in varchar2) IS
      SELECT * FROM hm_emp_person_data t
       WHERE ( ( DECODE(p_batch_flag,NULL,'0',p_batch_flag) = '1' and t.action_batch_id = key_id )
               or
               ( DECODE(p_batch_flag,NULL,'0',p_batch_flag) <> '1' and t.row_id = key_id )
             )
         and t.last_version_flag = '2' and t.operate_status in ('CREATE','UPDATE')
         and t.for_gvs = '1' and t.delete_flag = '0';
    cur_base_row cur_employee_base%ROWTYPE;
    
  BEGIN
  
    retcode := 'S';
    retmsg  := '操作成功';

    l_return_batch_id := comm_util.func_new_rowid();
    
    sap_input := sap_input_type22(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
    sap_input.master_type := 'EMPLOYEE';
    sap_input.DATA_KEY1 := '';
		sap_input.DATA_KEY7 := l_return_batch_id;    
		sap_input.DATA_KEY8 := user_name;
    sap_input.PASS_KEY1 := 'MAIN';
    sap_input.PASS_KEY2 := key_id;
    sap_input.pASS_KEY3 := key_id;
    sap_input.PASS_KEY4 := worklist_id;
		sap_input.OPERATE_STATUS := operate_status;
    
    --组装itab_base
    itab_base := employee_base_table();
    if batch_flag is null then
      l_batch_flag := '0';
    else
      l_batch_flag := '1';
    end if;
    
    open cur_employee_base( batch_flag );
    loop fetch cur_employee_base into cur_base_row;
      exit when cur_employee_base%notfound;
      
      sap_input.VIEW_BASE := 'X';

      l_employee_base.ROW_ID := cur_base_row.ROW_ID;
      l_employee_base.EMPLOYEE_NO := cur_base_row.EMPLOYEE_NO;
      l_employee_base.BEGIN_DATE := cur_base_row.BEGIN_DATE;
      l_employee_base.END_DATE := cur_base_row.END_DATE;
      l_employee_base.SUB_TYPE := cur_base_row.SUB_TYPE;
      l_employee_base.CHANGE_PERSON := cur_base_row.CHANGE_PERSON;
      l_employee_base.CHANGE_DATE := cur_base_row.CHANGE_DATE;
      l_employee_base.ACTION_TYPE := cur_base_row.ACTION_TYPE;
      l_employee_base.ACTION_REASON := cur_base_row.ACTION_REASON;
      l_employee_base.COMPANY_CODE := cur_base_row.COMPANY_CODE;
      l_employee_base.PERSON_AREA := cur_base_row.PERSON_AREA;
      l_employee_base.EMPLOYEE_GROUP := cur_base_row.EMPLOYEE_GROUP;
      l_employee_base.EMPLOYEE_SUBGROUP := cur_base_row.EMPLOYEE_SUBGROUP;
      l_employee_base.ORGANIZATIONAL_KEY := cur_base_row.ORGANIZATIONAL_KEY;
      l_employee_base.BUSINESS_AREA := cur_base_row.BUSINESS_AREA;
      l_employee_base.PERSON_SUBAREA := cur_base_row.PERSON_SUBAREA;
      l_employee_base.PAYROLL_AREA := cur_base_row.PAYROLL_AREA;
      l_employee_base.ORG_UNIT := cur_base_row.ORG_UNIT;
      l_employee_base.POSITION := cur_base_row.POSITION;
      l_employee_base.JOB := cur_base_row.JOB;
      l_employee_base.LAST_NAME := cur_base_row.LAST_NAME;
      l_employee_base.FIRST_NAME := cur_base_row.FIRST_NAME;
      l_employee_base.DATE_BIRTH := cur_base_row.DATE_BIRTH;
      l_employee_base.NATIONALITY := cur_base_row.NATIONALITY;
      l_employee_base.LANGUAGE := cur_base_row.LANGUAGE;
      l_employee_base.ADDRESS_TYPE := cur_base_row.ADDRESS_TYPE;
      l_employee_base.TELEPHONE := cur_base_row.TELEPHONE;
      l_employee_base.CREATED_BY := cur_base_row.CREATED_BY;
      l_employee_base.CREATED := cur_base_row.CREATED;
      l_employee_base.LAST_UPD_BY := cur_base_row.LAST_UPD_BY;
      l_employee_base.LAST_UPD := cur_base_row.LAST_UPD;
      l_employee_base.MODIFICATION_NUM := cur_base_row.MODIFICATION_NUM;
      l_employee_base.DELETE_FLAG := cur_base_row.DELETE_FLAG;
      l_employee_base.ACTIVE_FLAG := cur_base_row.ACTIVE_FLAG;
      l_employee_base.REMARK := cur_base_row.REMARK;
      l_employee_base.VERSION := cur_base_row.VERSION;
      l_employee_base.LAST_VERSION_FLAG := cur_base_row.LAST_VERSION_FLAG;
      l_employee_base.OPERATE_STATUS := cur_base_row.OPERATE_STATUS;
      l_employee_base.LOCK_FLAG := cur_base_row.LOCK_FLAG;
      l_employee_base.RETURN_BATCH_ID := cur_base_row.RETURN_BATCH_ID;
      l_employee_base.ACTION_BATCH_ID := cur_base_row.ACTION_BATCH_ID;
      l_employee_base.FOR_GVS := cur_base_row.FOR_GVS;
      l_employee_base.AUDIT_FLAG := cur_base_row.AUDIT_FLAG;
      l_employee_base.SIGNUP_ORG := cur_base_row.SIGNUP_ORG;
      l_employee_base.ALL_PROD_MARKET := cur_base_row.ALL_PROD_MARKET;
      l_employee_base.IDENTITY_CARD := cur_base_row.IDENTITY_CARD;
      l_employee_base.BUDGET_UNIT := cur_base_row.BUDGET_UNIT;
      l_employee_base.TRADE_CODE := cur_base_row.TRADE_CODE;
      l_employee_base.SEX := cur_base_row.SEX;

      l_employee_base.master_type := 'EMPLOYEE';
      l_employee_base.DATA_KEY1 := l_employee_base.EMPLOYEE_NO;
      l_employee_base.DATA_KEY2 := l_employee_base.BEGIN_DATE;
      l_employee_base.DATA_KEY3 := l_employee_base.END_DATE;
      
      if batch_flag = '1' then
        l_employee_base.DATA_KEY6 := l_employee_base.ACTION_BATCH_ID;
      end if;
      
      l_employee_base.DATA_KEY7 := l_return_batch_id;    
      l_employee_base.DATA_KEY8 := user_name;
      l_employee_base.PASS_KEY1 := 'BASE';
      l_employee_base.PASS_KEY2 := l_employee_base.row_id;
      l_employee_base.PASS_KEY3 := l_employee_base.row_id;
      l_employee_base.PASS_KEY4 := worklist_id;
      l_employee_base.OPERATE_STATUS := l_employee_base.operate_status;
      
      itab_base.extend;
      itab_base(itab_base.count) := l_employee_base;
      
    end loop;
    close cur_employee_base;
    
 	EXCEPTION
		WHEN OTHERS THEN
    retcode := 'E';
    retmsg  := sqlerrm;
	END getEmployee;

	--将SAP创建主数据的RFC的返回值，写入本地数据中
	PROCEDURE setSapReturn
	(
		sapins  IN sap_return_table2,
    return_batch_id OUT VARCHAR2,
		retcode OUT VARCHAR2,  --S操作成功,R工作流需重新启动,E处理异常
    retmsg  OUT VARCHAR2
	) IS
		v_sapreturn hm_sap_return%ROWTYPE;
		v_sapins    sap_return_type2;
    S_COUNT     INTEGER;
    E_COUNT     INTEGER;
    
    t_operate     sap_return_table2 := sap_return_table2();
    t_his_archive sap_return_table2 := sap_return_table2();
    
    find_flag   char(1);
    commit_flag char(1);
	BEGIN
  
		retcode := 'E';
	  retmsg  := '解析SAP返回数据，处理异常';
    commit_flag := '0';
    
    --begin
    
    for i in 1..sapins.count
    loop
      v_sapins := sapins(i);
           
      v_sapreturn.pass_key1      := v_sapins.pass_key1;
      v_sapreturn.pass_key2      := v_sapins.pass_key2;
      v_sapreturn.pass_key3      := v_sapins.pass_key3;
      v_sapreturn.pass_key4      := v_sapins.pass_key4;
      v_sapreturn.message_type   := v_sapins.message_type;
      v_sapreturn.message_id     := v_sapins.message_id;
      v_sapreturn.message_number := v_sapins.message_number;
      v_sapreturn.message_v1     := v_sapins.message_v1;
      v_sapreturn.message_v2     := v_sapins.message_v2;
      v_sapreturn.message_v3     := v_sapins.message_v3;
      v_sapreturn.message_v4     := v_sapins.message_v4;
      v_sapreturn.message        := v_sapins.message;
      v_sapreturn.data_row       := v_sapins.data_row;
      v_sapreturn.data_field     := v_sapins.data_field;
      v_sapreturn.data_system    := v_sapins.data_system;
      v_sapreturn.data_key1      := v_sapins.data_key1;
      v_sapreturn.data_key2      := v_sapins.data_key2;
      v_sapreturn.data_key3      := v_sapins.data_key3;
      v_sapreturn.data_key4      := v_sapins.data_key4;
      v_sapreturn.data_key5      := v_sapins.data_key5;
      v_sapreturn.data_key6      := v_sapins.data_key6;
      v_sapreturn.data_key7      := v_sapins.data_key7;
      v_sapreturn.data_key8      := v_sapins.data_key8;
      v_sapreturn.operate_status := v_sapins.OPERATE_STATUS;
      v_sapreturn.master_type    := v_sapins.MASTER_TYPE;
        
      v_sapreturn.row_id         := comm_util.func_new_rowid();
      v_sapreturn.created_by     := v_sapins.data_key8;
      v_sapreturn.created        := sysdate;
      v_sapreturn.last_upd_by    := v_sapins.data_key8;
      v_sapreturn.last_upd       := sysdate;
        
      INSERT INTO hm_sap_return
      VALUES v_sapreturn;
        
      IF v_sapins.PASS_KEY1 = 'MRP2' THEN
        v_sapins.PASS_KEY1 := 'MRP';
      END IF;
      
      IF return_batch_id is null and v_sapins.data_key7 is not null then
        return_batch_id := v_sapins.data_key7;
      end if;
        
      if v_sapins.message_type is not null then
          
        if not ( v_sapins.message_type = 'S' OR v_sapins.message_type = 'W' OR v_sapins.message_type = 'I' ) then
          v_sapins.message_type := 'E';
        end if;
          
        --构建关键操作信息表
        find_flag := null; 
        for j in 1..t_operate.count
        loop
            
          if t_operate(j).PASS_KEY1 = v_sapins.PASS_KEY1 and
             t_operate(j).PASS_KEY2 = v_sapins.PASS_KEY2 and
             t_operate(j).PASS_KEY3 = v_sapins.PASS_KEY3 and
             t_operate(j).PASS_KEY4 = v_sapins.PASS_KEY4 then
               
            find_flag := 'X';
              
            if t_operate(j).MESSAGE_TYPE <> 'E' then
              t_operate(j) := v_sapins;
            end if;
          end if;
            
        end loop;
          
        if find_flag is null then
          t_operate.extend;
          t_operate(t_operate.count) := v_sapins;
        end if;
      end if;  
      
      --elsif v_sapins.message_type is null  --deleted by zhangbiao20080408
      if ( v_sapins.message_type <> 'E' or v_sapins.message_type is null ) and v_sapins.PASS_KEY1 = 'MAIN' and sapins.count = 1 then

        pro_version_unlock_for_null
                           ( in_user_name => v_sapins.DATA_KEY8,
                           in_master_type =>  v_sapins.MASTER_TYPE,
                           in_row_id =>  v_sapins.PASS_KEY3,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then return; end if;
        
      end if;
      
    end loop;    
      
    commit ;  --半程提交，将原始日志记录在案
    commit_flag := '1';
      
/*  exception
      when others then
      retcode := 'E';
      retmsg  := 'setSapReturn: 提交SAP返回信息失败!'||sqlerrm;    
      RETURN;
    end ;*/
    
    --构建待归档主数据ID信息
    for i in 1..t_operate.count 
    loop
      find_flag := null; 
      for k in 1..t_his_archive.count
      loop
            
        if t_his_archive(k).PASS_KEY3 = t_operate(i).PASS_KEY3 then
               
          find_flag := 'X';
              
          if t_his_archive(k).MESSAGE_TYPE <> 'E' then
            t_his_archive(k) := t_operate(i);
          end if;
        end if;
            
      end loop;
          
      if find_flag is null then
        t_his_archive.extend;
        t_his_archive(t_his_archive.count) := t_operate(i);
      end if;
    end loop;

    
    --对关键操作信息表进行分析
    S_COUNT := 0;
    E_COUNT := 0;
    
    for i in 1..t_operate.count 
    loop
      IF t_operate(i).MESSAGE_TYPE = 'E' THEN
        E_COUNT := E_COUNT + 1;
      ELSE      
        S_COUNT := S_COUNT + 1;
      END IF;
      
      prc_set_return_batch_id(in_user_name => t_operate(i).DATA_KEY8,
                              in_master_type =>  t_operate(i).MASTER_TYPE,
                              in_info_type =>  t_operate(i).PASS_KEY1,
                              in_row_id =>  t_operate(i).PASS_KEY2,
                              in_return_batch_id => t_operate(i).DATA_KEY7,
                              retcode => retcode,
                              retmsg => retmsg
                              );
      if t_operate(i).PASS_KEY1 <> 'BASE' THEN
        prc_set_return_batch_id(in_user_name => t_operate(i).DATA_KEY8,
                                in_master_type =>  t_operate(i).MASTER_TYPE,
                                in_info_type =>  t_operate(i).PASS_KEY1,
                                in_row_id =>  t_operate(i).PASS_KEY3,
                                in_return_batch_id => t_operate(i).DATA_KEY7,
                                retcode => retcode,
                                retmsg => retmsg
                                );
      END IF;
    end loop;
    
		IF S_COUNT = t_operate.count THEN
      
      for i in 1..t_operate.count
      loop
        prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                           in_master_type =>  t_operate(i).MASTER_TYPE,
                           in_info_type =>  t_operate(i).PASS_KEY1,
                           in_row_id =>  t_operate(i).PASS_KEY2,
                           in_action_status => 'SUBMIT',
                           in_operate_status => 'NVL',
                           in_return_batch_id => t_operate(i).DATA_KEY7,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then retcode := 'RE'; return; end if;
                             
      end loop;
      
      --此句不适应batch, so --此段针对主表无动作,但下挂表动作完成的, 对主表状态的更新
      if S_COUNT <> 0 and t_operate(t_operate.count).DATA_KEY6 is null then
        prc_version_update(in_user_name => t_operate(t_operate.count).DATA_KEY8,
                           in_master_type =>  t_operate(t_operate.count).MASTER_TYPE,
                           in_info_type =>  'BASE',
                           in_row_id =>  t_operate(t_operate.count).PASS_KEY3,
                           in_action_status => 'SUBMIT',
                           in_operate_status => 'NVL',
                           in_return_batch_id => t_operate(t_operate.count).DATA_KEY7,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then retcode := 'RE'; return; end if;

      end if;
      
      --DELETE BY ZHANG BIAO 20080523 -- 不统一归档
/*      IF S_COUNT <> 0 THEN

        --主数据归档处理
        for i in 1..t_his_archive.count
        loop
          if t_his_archive(i).pass_key3 is not null and
             t_his_archive(i).MESSAGE_TYPE <> 'E' THEN
          
            pro_version_archive
                               (in_master_type =>  t_his_archive(i).MASTER_TYPE,
                               in_row_id =>  t_his_archive(i).PASS_KEY3,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
            
          END IF;                 
        end loop;
      ELSE*/
      --DELETE BY ZHANG BIAO 20080523 -- 不统一归档
      
      IF S_COUNT = 0 THEN
        --主数据空处理解锁
        for i in 1..t_his_archive.count
        loop
          if t_his_archive(i).pass_key3 is not null and
             t_his_archive(i).MESSAGE_TYPE <> 'E' THEN
          
            pro_version_unlock_for_null
                               ( in_user_name => t_his_archive(i).DATA_KEY8,
                               in_master_type =>  t_his_archive(i).MASTER_TYPE,
                               in_row_id =>  t_his_archive(i).PASS_KEY3,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
            
          END IF;                 
        end loop;        
      END IF;
      
			retcode := 'S';
      retmsg  := 'setSapReturn: SAP操作成功!'||S_COUNT||'/'||t_operate.count;
      
		ELSIF S_COUNT = 0 THEN 
			retcode := 'R';
      retmsg  := 'setSapReturn: SAP操作失败,工作流需重新启动!'||S_COUNT||'/'||t_operate.count; 
      
    ELSIF S_COUNT < t_operate.count THEN
      for i in 1..t_operate.count
      loop

        if t_operate(i).PASS_KEY1 = 'BASE' AND t_operate(i).DATA_KEY6 IS NULL then --或代表主列表视图的字串   
          IF t_operate(i).MESSAGE_TYPE <> 'E' then
            prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                               in_master_type =>  t_operate(i).MASTER_TYPE,
                               in_info_type =>  t_operate(i).PASS_KEY1,
                               in_row_id =>  t_operate(i).PASS_KEY2,
                               in_action_status => 'WORKFLOW',
                               in_operate_status => 'DOING',--'' no change for database
                               in_return_batch_id => t_operate(i).DATA_KEY7,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
                             
          end if;
        else
          IF t_operate(i).MESSAGE_TYPE <> 'E' then
            prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                               in_master_type =>  t_operate(i).MASTER_TYPE,
                               in_info_type =>  t_operate(i).PASS_KEY1,
                               in_row_id =>  t_operate(i).PASS_KEY2,
                               in_action_status => 'SUBMIT',
                               in_operate_status => 'NVL',
                               in_return_batch_id => t_operate(i).DATA_KEY7,
                               retcode => retcode,
                               retmsg => retmsg );        
            if retcode = 'E' then retcode := 'RE'; return; end if;
                             
          end if;
        end if;
        
      end loop;
      
			retcode := 'R';
      retmsg  := 'setSapReturn: SAP操作部分成功,工作流需重新启动!'||S_COUNT||'/'||t_operate.count; 
      
    END IF;
    
	  COMMIT;
    
    if retcode = 'E' and commit_flag = '1' and return_batch_id is not null then
      retcode := 'RE';
    end if; 
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      if commit_flag = '1' and return_batch_id is not null then
        retcode := 'RE';
      else
        retcode := 'E';
      end if; 
      retmsg  := 'setSapReturn: 解析过程处理异常!'||sqlerrm;
	END setSapReturn;

  procedure prc_set_return_batch_id (in_user_name in varchar2,
                                in_master_type in varchar2,
                                in_info_type in varchar2,
                                in_row_id    in varchar2,
                                in_return_batch_id in varchar2,
                                retcode out varchar2,
                                retmsg out varchar2
                                )
  is
      
    cursor cur_view_tables_01(p_master_type in varchar2,
                           p_info_type in varchar2) is
      select * from hm_view_tables 
      where master_type = p_master_type
        and info_type = p_info_type
        and layor <= '1' 
        and logical_flag = '0';        
  begin
        
    for l_view_tables_01 in cur_view_tables_01(in_master_type,in_info_type)
    loop
      prc_version_update_status(in_user_name, l_view_tables_01.table_name, in_row_id, 
                                '', '', '', 0, in_return_batch_id,
                                retcode, retmsg);      
    end loop;
    
  exception
    when others then
    retcode := 'E';
    retmsg  := 'prc_set_return_batch_id: 返回值更新处理异常!'||sqlerrm;
  end prc_set_return_batch_id;
    
  procedure prc_version_update (in_user_name in varchar2,
                                in_master_type in varchar2,
                                in_info_type in varchar2,
                                in_row_id    in varchar2,
                                in_action_status in varchar2,
                                in_operate_status in varchar2,
                                in_return_batch_id in varchar2,
                                retcode out varchar2,
                                retmsg out varchar2
                                )
  is
  
    v_last_version_flag varchar2(10);
    ----v_operate_status    varchar2(10);
    v_lock_flag         varchar2(10);
    
    cursor cur_view_tables_01(p_master_type in varchar2,
                           p_info_type in varchar2) is
      select * from hm_view_tables 
      where master_type = p_master_type
        and info_type = p_info_type
        and layor <= '1'  
        and logical_flag = '0';
        
    cursor cur_view_tables_012(p_master_type in varchar2,
                           p_info_type in varchar2) is
      select * from hm_view_tables 
      where master_type = p_master_type
        and info_type = p_info_type
        and layor <= '2'  
        and logical_flag = '0';
        
  begin
    
    prc_version_get_define( in_action_status => in_action_status,
                            out_last_version_flag => v_last_version_flag,
                            out_lock_flag => v_lock_flag,
                            retcode => retcode,
                            retmsg => retmsg);
    
    if retcode = 'E' then return; end if;
    
    for l_view_tables_01 in cur_view_tables_01(in_master_type,in_info_type)
    loop
      prc_version_update_status(in_user_name, l_view_tables_01.table_name, in_row_id, 
                                v_last_version_flag, in_operate_status, v_lock_flag, 0.1,in_return_batch_id,
                                retcode, retmsg);
      if retcode = 'E' then return; end if;
      
      if in_action_status = 'SUBMIT' OR in_action_status = 'WORKFLOW' then
        for l_view_tables_012 in cur_view_tables_012(in_master_type,in_info_type)
        loop
          if l_view_tables_012.layor <= '1' then
            prc_version_publish_data( l_view_tables_012.table_name, in_row_id, retcode, retmsg );
            if retcode = 'E' then return; end if;
          elsif l_view_tables_012.layor >= '2' then
            prc_version_publish_data( l_view_tables_012.table_name,l_view_tables_012.foreign_key, in_row_id, retcode, retmsg );
            if retcode = 'E' then return; end if;        
          end if;
        end loop;
      end if;
    
    end loop;
    
    if retcode = 'E' then
      return;
    elsif retcode = 'S' then
      retmsg := 'prc_version_update: '||in_master_type||'主数据'||in_info_type||'数据,版本状态更新成功';
    end if;
  exception
    when others then
    retcode := 'E';
    retmsg  := 'prc_version_update: 版本更新处理异常!'||sqlerrm;
  end prc_version_update;
  
  procedure prc_version_get_define( in_action_status in varchar2,
                                    out_last_version_flag out varchar2,
                                    out_lock_flag out varchar2,
                                    retcode out varchar2,
                                    retmsg out varchar2) 
  is

  begin
    retcode := 'S';
    retmsg  := 'prc_get_version_define: 获取版本状态定义--操作成功';
    
    out_last_version_flag := '';
    ----out_operate_status := '';
    out_lock_flag := '';
    
    if in_action_status = 'INIT' then
      out_last_version_flag := '1';
      ----out_operate_status := in_operate_status;    --NVL
      out_lock_flag := '0';
    elsif in_action_status = 'EDIT' then
      out_last_version_flag := '2';
      ----out_operate_status := in_operate_status;    --UPDATE(,[CREATE])
      out_lock_flag := '0';
    elsif in_action_status = 'WORKFLOW' then
      out_last_version_flag := '2';
      ----out_operate_status := in_operate_status;    --UPDATE(,[CREATE])
      out_lock_flag := '0';  --'1'    
    elsif in_action_status = 'SUBMIT' then
      out_last_version_flag := '1';
      ----out_operate_status := in_operate_status;    --NVL(,[DOING])
      out_lock_flag := '0';
    else
      retcode := 'E';
      retmsg  := 'prc_get_version_define: 活动阶段'||in_action_status||'未定义';      
    end if;    
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      retcode := 'E';
      retmsg  := ': 获取版本状态定义--操作失败';
  end prc_version_get_define;                                        
  
  procedure prc_version_update_status( in_user_name in varchar2,
                                       in_table_name in varchar2,
                                       in_row_id    in varchar2,
                                       in_last_version_flag in varchar2,
                                       in_operate_status in varchar2,
                                       in_lock_flag in varchar2,
                                       in_version_step in number,
                                       in_return_batch_id in varchar2,
                                       retcode out varchar2,
                                       retmsg out varchar2
                                       )
                                     
  is
    str_update_sql varchar2(1000);
    materialCode integer:=0;
    update_sql varchar2(1000);
    
  begin
         
/*    str_update_sql := ' update '||in_table_name||' set ';
    
    if in_last_version_flag IS NOT NULL then
      str_update_sql := str_update_sql||
                        ' last_version_flag = '''||in_last_version_flag||''',';
    end if;

    if in_operate_status IS NOT NULL then
      str_update_sql := str_update_sql||
                        ' operate_status = '''||in_operate_status||''',';
    end if;

    if in_lock_flag IS NOT NULL then
      str_update_sql := str_update_sql||
                        ' lock_flag = '''||in_lock_flag||''',';
    end if;
    
    IF in_return_batch_id IS NOT NULL THEN
      str_update_sql := str_update_sql||
                        ' return_batch_id = '''||in_return_batch_id||''',';                         
    end if;

    IF in_version_step > 0 THEN
      str_update_sql := str_update_sql||
                        ' version = version + '||in_version_step||' ,';                         
    end if;
 
    str_update_sql := str_update_sql||
                      --' last_upd_by = '''||in_user_name||''','||
                      --' last_upd = sysdate '||
                      ' modification_num = modification_num + 1 '||
                      ' where row_id = '''||in_row_id||'''';
    
    execute immediate str_update_sql ;
*/ 

    str_update_sql := ' update '||in_table_name||' set '||
                      ' last_version_flag = DECODE(:in_last_version_flag, NULL,last_version_flag,:in_last_version_flag ), '||
                      ' operate_status = decode(:in_operate_status, null, operate_status, :in_operate_status), '||
                      ' lock_flag = decode(:in_lock_flag, null, lock_flag, :in_lock_flag), '||
                      ' return_batch_id = decode(:in_return_batch_id, null, return_batch_id, :in_return_batch_id), '||
                      ' version = decode(sign(:in_version_step), 1, :in_version_step + version, version), '||
                      --' last_upd_by = decode(:in_user_name, null, last_upd_by, :in_user_name), '|| --20080729 by zhangbiao, 原为注释掉的
                      --' last_upd = sysdate, '||
                      ' modification_num = modification_num + 1 '||
                      ' where row_id = :in_row_id ';
    
    execute immediate str_update_sql 
    USING in_last_version_flag,in_last_version_flag, 
          in_operate_status, in_operate_status, 
          in_lock_flag, in_lock_flag, 
          in_return_batch_id, in_return_batch_id, 
          --in_user_name, in_user_name, 
          in_version_step, in_version_step, 
          in_row_id;
          
    retcode := 'S';
    retmsg  := 'prc_version_update_status:数据库表:'||in_table_name||'更新成功 '||sql%rowcount||'条!';
    --cuiyj20120725 只针对物料
    if (in_table_name='HM_MTL_GENERAL' and in_operate_status='NVL') then
       
       select count(*)
         into materialCode
         from HM_MTL_GENERAL l, hm_mtl_material_ifdelisted d
        where l.row_id = in_row_id
          and l.material_code = d.material_code
          and l.delete_flag = '0'
          and l.active_flag = '1';
       if  materialCode>0 then
            update_sql:='update hm_mtl_material_ifdelisted d set d.lock_flag=''1'',d.SUBMITTIME=sysdate,d.SUBMITTIME_BY=:in_user_name where d.material_code=(select l.material_code from HM_MTL_GENERAL l where l.row_id = :in_row_id)';
            execute immediate update_sql
            using in_user_name,in_row_id;           
       end if;
    end if;
--end
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_version_update_status:数据库表:'||in_table_name||'更新失败!'||sqlerrm;
      
  end prc_version_update_status;           

    
/*  procedure prc_version_update_actionbatch(in_table_name in varchar2,
                                       in_row_id    in varchar2,
                                       in_action_batch_id in varchar2,
                                       retcode out varchar2,
                                       retmsg out varchar2
                                       )
                                     
  is
    str_update_sql varchar2(255);
    
  begin
         
    str_update_sql := ' update '||in_table_name||' set ';
    str_update_sql := str_update_sql||
                        ' action_batch_id = '||in_action_batch_id;
    str_update_sql := str_update_sql||
                      ' where row_id = '''||in_row_id||'''';
    
    execute immediate str_update_sql ;
    
    retcode := 'S';
    retmsg  := 'prc_version_update_actionbatch:数据库表:'||in_table_name||'更新成功 '||sql%rowcount||'条!';

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_version_update_actionbatch:数据库表:'||in_table_name||'更新失败!'||sqlerrm;
      
  end prc_version_update_actionbatch;           
*/    
  procedure prc_version_publish_data( in_table_name in varchar2,
                                      in_row_id in varchar2,
                                      retcode out varchar2,
                                      retmsg out varchar2
                                     )
  is
    str_delete_sql varchar2(255);
    str_insert_sql varchar2(255);
    v_rowcount int;
  begin
    
/*  str_delete_sql := 'delete from '||in_table_name||'_his where row_id = '''||in_row_id||'''';
    execute immediate str_delete_sql;
    v_rowcount := v_rowcount + sql%rowcount;
    
    str_insert_sql := 'insert into '||in_table_name||'_his select * from '||in_table_name||' where row_id = '''||in_row_id||'''';
    execute immediate str_insert_sql;
    v_rowcount := v_rowcount + sql%rowcount;
*/         
    str_delete_sql := 'delete from '||in_table_name||'_pub where row_id = :in_row_id';
    execute immediate str_delete_sql USING in_row_id;
    v_rowcount := v_rowcount + sql%rowcount;
       
    str_insert_sql := 'insert into '||in_table_name||'_pub select * from '||in_table_name||' where row_id = :in_row_id';
    execute immediate str_insert_sql USING in_row_id;
    v_rowcount := v_rowcount + sql%rowcount;
         
    retcode := 'S';
    retmsg  := 'prc_version_publish_data:数据库表'||in_table_name||' 操作成功 '||v_rowcount||'条!';

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_version_publish_data:数据库表'||in_table_name||' 操作失败!'||sqlerrm;
      
  end prc_version_publish_data;           
  
  procedure prc_version_publish_data( in_table_name in varchar2,
                                      in_foreign_key in varchar2,
                                      in_foreign_id in varchar2,
                                      retcode out varchar2,
                                      retmsg out varchar2
                                     )
  is
    str_delete_sql varchar2(255);
    str_insert_sql varchar2(255);
    v_rowcount int;
  begin
    
/*    str_delete_sql := 'delete from '||in_table_name||'_his where '||in_foreign_key||' = '''||in_foreign_id||'''';
    execute immediate str_delete_sql;
    v_rowcount := v_rowcount + sql%rowcount;

    str_insert_sql := 'insert into '||in_table_name||'_his select * from '||in_table_name||' where '||in_foreign_key||' = '''||in_foreign_id||'''';
    execute immediate str_insert_sql;
    v_rowcount := v_rowcount + sql%rowcount;
*/         
    str_delete_sql := 'delete from '||in_table_name||'_pub where '||in_foreign_key||' = :in_foreign_id';
    execute immediate str_delete_sql USING in_foreign_id;
    v_rowcount := v_rowcount + sql%rowcount;
       
    str_insert_sql := 'insert into '||in_table_name||'_pub select * from '||in_table_name||' where '||in_foreign_key||' = :in_foreign_id';
    execute immediate str_insert_sql USING in_foreign_id;
    v_rowcount := v_rowcount + sql%rowcount;
         
    retcode := 'S';
    retmsg  := 'prc_version_publish_data:数据库表'||in_table_name||'依据外键'||in_foreign_key||' 操作成功 '||v_rowcount||'条!';

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_version_publish_data:数据库表'||in_table_name||'依据外键'||in_foreign_key||' 操作失败!'||sqlerrm;
      
  end prc_version_publish_data;           

  procedure pro_version_archive (in_master_type in varchar2,
                                in_row_id    in varchar2,
                                retcode out varchar2,
                                retmsg out varchar2
                                )
  is
  
  l_table_name   varchar2(50);
  
  begin
  
    select t.table_name into l_table_name
      from hm_view_tables t 
     where t.master_type = in_master_type
       and t.info_type = 'BASE'
       and t.layor = '0' 
       and logical_flag = '0';
    
    if l_table_name is not null and in_row_id is not null then
      
      comm_util.copy_change_id_master_data(v_master_type => in_master_type,
                                           v_layor => '0',
                                           v_table_name => l_table_name,
                                           v_foreign_key => '',
                                           v_from_suffix => '_PUB',
                                           v_to_suffix => '_HIS',
                                           v_row_id => in_row_id,
                                           v_new_row_id => '',
                                           v_result_code => retcode,
                                           v_result_message => retmsg);
    
      if retcode <> '1' then
        rollback;
        retcode := 'E';
      else
        retcode := 'S';
      end if;
    else
      rollback;
      retcode := 'E';
      retmsg  := 'pro_version_history_archive: 数据归档处理异常!'||'关键字段为空.';
    end if;
   
  exception
    when others then
    rollback;
    retcode := 'E';
    retmsg  := 'pro_version_history_archive: 数据归档处理异常!'||sqlerrm;
  end pro_version_archive;  
  
  procedure pro_version_unlock_for_null ( in_user_name in varchar2,
                                          in_master_type in varchar2,
                                in_row_id    in varchar2,
                                retcode out varchar2,
                                retmsg out varchar2
                                )
  is
  
  l_table_name   varchar2(50);
  
  begin
  
    select t.table_name into l_table_name
      from hm_view_tables t 
     where t.master_type = in_master_type
       and t.info_type = 'BASE'
       and t.layor = '0' 
       and logical_flag = '0';
    
    if l_table_name is not null and in_row_id is not null then
    
      prc_version_update_status(in_user_name => in_user_name,in_table_name => l_table_name
                                ,in_row_id => in_row_id,in_last_version_flag => '1'
                                ,in_operate_status => 'NVL',in_lock_flag => '0'
                                ,in_version_step => 0,in_return_batch_id => ''
                                ,retcode => retcode,retmsg => retmsg);
        
      if retcode = 'E' then
        rollback;
        retcode := 'E';
        retmsg  := 'pro_version_unlock_for_null: 空操作解锁处理异常!'||'关键字段为空.';
      else
        retcode := 'S';
        retmsg  := 'pro_version_unlock_for_null: 空操作解锁处理成功.';        
      end if;
   end if;
    
  exception
    when others then
    rollback;
    retcode := 'E';
    retmsg  := 'pro_version_unlock_for_null: 空操作解锁处理异常!'||sqlerrm;
  end pro_version_unlock_for_null;  
  
  procedure redoSetSapReturn ( old_batch_id in varchar2,
                               new_batch_id out varchar2,
                               retcode out varchar2,
                               retmsg out varchar2)
                               
  is
    -- Non-scalar parameters require additional processing 
    sapins sap_return_table2 := sap_return_table2();
    v_row  sap_return_type2 := sap_return_type2(null,null,null,null,null,null,null,null,null,null,
                                              null,null,null,null,null,null,null,null,null,null,
                                              null,null,null,null,null,null,null,null,null,null,
                                              null,null,null,null
                                             );
    
    cursor cur_hm_sap_return is
      select * from hm_sap_return t where t.data_key7 = old_batch_id;
    l_hm_sap_return cur_hm_sap_return%rowtype;
    l_return_batch_id varchar2(20);
  begin
    
    l_return_batch_id := comm_util.func_new_rowid();
  
    open cur_hm_sap_return;
    loop
      fetch cur_hm_sap_return into l_hm_sap_return;
      exit when cur_hm_sap_return%notfound;
      
      v_row.LOG_NO := l_hm_sap_return.LOG_NO;
      v_row.LOG_MSG_NO := l_hm_sap_return.LOG_MSG_NO;
      v_row.MESSAGE_TYPE := l_hm_sap_return.MESSAGE_TYPE;
      v_row.MESSAGE_ID := l_hm_sap_return.MESSAGE_ID;
      v_row.MESSAGE_NUMBER := l_hm_sap_return.MESSAGE_NUMBER;
      v_row.MESSAGE_V1 := l_hm_sap_return.MESSAGE_V1;
      v_row.MESSAGE_V2 := l_hm_sap_return.MESSAGE_V2;
      v_row.MESSAGE_V3 := l_hm_sap_return.MESSAGE_V3;
      v_row.MESSAGE_V4 := l_hm_sap_return.MESSAGE_V4;
      v_row.MESSAGE := l_hm_sap_return.MESSAGE;
      v_row.DATA_ROW := l_hm_sap_return.DATA_ROW;
      v_row.DATA_FIELD := l_hm_sap_return.DATA_FIELD;
      v_row.DATA_SYSTEM := l_hm_sap_return.DATA_SYSTEM;
      v_row.DATA_KEY1 := l_hm_sap_return.DATA_KEY1;
      v_row.DATA_KEY2 := l_hm_sap_return.DATA_KEY2;
      v_row.DATA_KEY3 := l_hm_sap_return.DATA_KEY3;
      v_row.DATA_KEY4 := l_hm_sap_return.DATA_KEY4;
      v_row.DATA_KEY5 := l_hm_sap_return.DATA_KEY5;
      v_row.DATA_KEY6 := l_hm_sap_return.DATA_KEY6;
      v_row.DATA_KEY7 := l_return_batch_id;
      v_row.DATA_KEY8 := l_hm_sap_return.DATA_KEY8;
      v_row.PASS_KEY1 := l_hm_sap_return.PASS_KEY1;
      v_row.PASS_KEY2 := l_hm_sap_return.PASS_KEY2;
      v_row.PASS_KEY3 := l_hm_sap_return.PASS_KEY3;
      v_row.PASS_KEY4 := l_hm_sap_return.PASS_KEY4;
      v_row.OPERATE_STATUS := l_hm_sap_return.OPERATE_STATUS;
      v_row.MASTER_TYPE := l_hm_sap_return.MASTER_TYPE;
      v_row.ROW_ID := l_hm_sap_return.ROW_ID;
      v_row.CREATED_BY := l_hm_sap_return.CREATED_BY;
      v_row.CREATED := l_hm_sap_return.CREATED;
      v_row.LAST_UPD_BY := l_hm_sap_return.LAST_UPD_BY;
      v_row.LAST_UPD := l_hm_sap_return.LAST_UPD;
      v_row.MODIFICATION_NUM := l_hm_sap_return.MODIFICATION_NUM;
      v_row.REMARK := l_hm_sap_return.REMARK;
      
      sapins.extend;
      sapins(sapins.count) := v_row;
      
    end loop;
    
    -- Call the procedure
    setsapreturn(sapins => sapins,
                      return_batch_id => new_batch_id,
                      retcode => retcode,
                      retmsg => retmsg);
  
 
  end redoSetSapReturn;
  
  procedure setFlowLog( in_flow_log in flow_log_type,
                        out_log_id out varchar2,
                        retcode out varchar2,
                        retmsg  out varchar2
                      ) is
    l_flow_log  hm_flow_log%rowtype;
  begin
    if in_flow_log.ROW_ID is null then
      out_log_id := comm_util.func_new_rowid();
    else
      out_log_id := in_flow_log.ROW_ID;
    end if;
    
    l_flow_log.row_id := out_log_id;
    l_flow_log.key_id := in_flow_log.key_id;
    l_flow_log.operate_status := in_flow_log.operate_status;
    l_flow_log.worklist_id := in_flow_log.worklist_id;
    l_flow_log.user_name := in_flow_log.user_name;
    l_flow_log.batch_flag := in_flow_log.batch_flag;
    l_flow_log.log_time := in_flow_log.log_time;
    l_flow_log.flow_instance := in_flow_log.flow_instance;
    l_flow_log.invoke_code := in_flow_log.invoke_code;
    l_flow_log.retcode := in_flow_log.retcode;
    l_flow_log.retmsg := in_flow_log.retmsg;
    l_flow_log.return_batch_id := in_flow_log.return_batch_id;
    l_flow_log.pass_key1 := in_flow_log.pass_key1;
    l_flow_log.pass_key2 := in_flow_log.pass_key2;
    l_flow_log.pass_key3 := in_flow_log.pass_key3;
    l_flow_log.pass_key4 := in_flow_log.pass_key4;
    l_flow_log.pass_key5 := in_flow_log.pass_key5;
    l_flow_log.pass_key6 := in_flow_log.pass_key6;
    l_flow_log.pass_key7 := in_flow_log.pass_key7;
    l_flow_log.pass_key8 := in_flow_log.pass_key8;
    l_flow_log.remark := in_flow_log.remark;
    l_flow_log.target_sys := in_flow_log.target_sys;
    
    insert into hm_flow_log values l_flow_log ;    

    commit ;
    retcode := 'S';
    retmsg  := 'setFlowLog: 流程日志信息记录成功!'||out_log_id;
    
  exception
    when others then
    rollback;
    retcode := 'RE';
    retmsg  := 'setFlowLog: 流程日志信息记录异常!'||sqlerrm;
    
  end setFlowLog;

  procedure create_Material_QM_By_PurId ( in_pur_id in varchar2,
                                          out_qm_id out varchar2,
                                          retcode   out varchar2,
                                          retmsg    out varchar2
                                        ) is
    cursor cur_pur is
      select a.material_type, a.material_code, a.row_id material_id,
             t.plant_code, t.created_by,
             tt.row_id qm_view_id
        from hm_mtl_purchase t, hm_mtl_quality tt, hm_mtl_general a
       where tt.plant_code(+) = t.plant_code
         and tt.material_id(+) = t.material_id
         and a.material_type in ('') --物料分片值
         and a.row_id = t.material_id
         and t.operate_status = 'CREATE'
         and t.row_id = in_pur_id ;
         
    l_qm_row  hm_mtl_quality%rowtype;
  begin
    
    FOR cur_pur_row in cur_pur
    loop
      if cur_pur_row.qm_view_id is null or cur_pur_row.qm_view_id = '' then
        
        l_qm_row.material_id := cur_pur_row.material_id;
        l_qm_row.plant_code := cur_pur_row.plant_code;
        l_qm_row.created_by := cur_pur_row.created_by;
        l_qm_row.created := sysdate;
        l_qm_row.last_upd_by := cur_pur_row.created_by;
        l_qm_row.last_upd := sysdate;
        l_qm_row.modification_num := 0;
        l_qm_row.last_version_flag := '1';
        l_qm_row.version := 1.0;
        l_qm_row.active_flag := '1';
        l_qm_row.lock_flag := '0';
        l_qm_row.delete_flag := '0';
        l_qm_row.operate_status := 'NVL';
        l_qm_row.remark := '根据采购试图自动创建!';
        l_qm_row.return_batch_id := '';
        l_qm_row.action_batch_id := '';
        
        l_qm_row.recieve_proccess_time := '';
        l_qm_row.qm_purchase_active := '';
        l_qm_row.qm_control_code := '';
        l_qm_row.qm_inspect_type := '';
        l_qm_row.primary_inspect_type_flag := '';
        l_qm_row.inspect_type_active := '';
        
        insert into hm_mtl_quality values l_qm_row ;
        
        commit ; --
        retcode := 'S';
        retmsg  := 'create_Material_QM_By_PurId: 物料:'||cur_pur_row.material_code||',采购工厂:'||cur_pur_row.plant_code||', 相应质量检测信息已经创建！';
        
      else
        out_qm_id := cur_pur_row.qm_view_id ;
        retcode := 'S';
        retmsg  := 'create_Material_QM_By_PurId: 物料:'||cur_pur_row.material_code||',采购工厂:'||cur_pur_row.plant_code||', 相应质量检测信息已经存在！';
      end if;
    end loop;
    
  exception
    when others then
    rollback;
    retcode := 'E';
    retmsg  := 'create_Material_QM_By_PurId: 采购信息ID:'||in_pur_id||', 自动创建质量视图信息异常!'||sqlerrm;
    
  end create_Material_QM_By_PurId ;                                     
     
  PROCEDURE setSapReturn2
	(
		sapins  IN sap_return_table2,
    in_vendor_code in VARCHAR2,
    return_batch_id OUT VARCHAR2,
		retcode OUT VARCHAR2,  --S操作成功,R工作流需重新启动,E处理异常
    retmsg  OUT VARCHAR2
	) IS
		v_sapreturn hm_sap_return%ROWTYPE;
		v_sapins    sap_return_type2;
    S_COUNT     INTEGER;
    E_COUNT     INTEGER;
    
    t_operate     sap_return_table2 := sap_return_table2();
    t_his_archive sap_return_table2 := sap_return_table2();
    
    find_flag   char(1);
    commit_flag char(1);
	BEGIN
  
		retcode := 'E';
	  retmsg  := '解析SAP返回数据，处理异常';
    commit_flag := '0';
    
    --begin
    
    for i in 1..sapins.count
    loop
      v_sapins := sapins(i);
           
      v_sapreturn.pass_key1      := v_sapins.pass_key1;
      v_sapreturn.pass_key2      := v_sapins.pass_key2;
      v_sapreturn.pass_key3      := v_sapins.pass_key3;
      v_sapreturn.pass_key4      := v_sapins.pass_key4;
      v_sapreturn.message_type   := v_sapins.message_type;
      v_sapreturn.message_id     := v_sapins.message_id;
      v_sapreturn.message_number := v_sapins.message_number;
      v_sapreturn.message_v1     := v_sapins.message_v1;
      v_sapreturn.message_v2     := v_sapins.message_v2;
      v_sapreturn.message_v3     := v_sapins.message_v3;
      v_sapreturn.message_v4     := v_sapins.message_v4;
      v_sapreturn.message        := v_sapins.message;
      v_sapreturn.data_row       := v_sapins.data_row;
      v_sapreturn.data_field     := v_sapins.data_field;
      v_sapreturn.data_system    := v_sapins.data_system;
      v_sapreturn.data_key1      := v_sapins.data_key1;
      v_sapreturn.data_key2      := v_sapins.data_key2;
      v_sapreturn.data_key3      := v_sapins.data_key3;
      v_sapreturn.data_key4      := v_sapins.data_key4;
      v_sapreturn.data_key5      := v_sapins.data_key5;
      v_sapreturn.data_key6      := v_sapins.data_key6;
      v_sapreturn.data_key7      := v_sapins.data_key7;
      v_sapreturn.data_key8      := v_sapins.data_key8;
      v_sapreturn.operate_status := v_sapins.OPERATE_STATUS;
      v_sapreturn.master_type    := v_sapins.MASTER_TYPE;
        
      v_sapreturn.row_id         := comm_util.func_new_rowid();
      v_sapreturn.created_by     := v_sapins.data_key8;
      v_sapreturn.created        := sysdate;
      v_sapreturn.last_upd_by    := v_sapins.data_key8;
      v_sapreturn.last_upd       := sysdate;
        
      INSERT INTO hm_sap_return
      VALUES v_sapreturn;
      
      ---针对供应商新建时编码由SAP端发码，返回消息后设置本地编码,在此地设置似乎不好，暂时
      IF v_sapins.MASTER_TYPE = 'VENDOR' and v_sapins.PASS_KEY1='BASE' and
        v_sapins.OPERATE_STATUS = 'CREATE' and (v_sapins.DATA_KEY1 is null or substr(v_sapins.DATA_KEY1,1,4) = 'TEMP') then
        --更新基本表和传输表
        insert into hm_vendors_his
        select * from hm_vendors s where s.row_id = v_sapins.PASS_KEY2;
        
        update hm_vendors a
          set a.vendor_code = in_vendor_code,
              a.last_upd_by='admin',
              a.last_upd=sysdate
        where a.row_id = v_sapins.PASS_KEY2;
        
        update hm_apply_vendor a
          set a.vendor_code = in_vendor_code
        where a.vendor_code=v_sapins.DATA_KEY1;
        
        update hm_applys_transactions t
           set t.master_row_code = in_vendor_code
         where t.master_row_code = v_sapins.DATA_KEY1 and t.delete_flag='0';
        --更新采购试图合作伙伴表中的临时码
         update hm_vendor_partners s
           set s.partner_subject_id =in_vendor_code
         where s.partner_subject_id =v_sapins.DATA_KEY1
           and instr(s.partner_subject_id, 'TEMP') > 0;
      end if;
        
      IF v_sapins.PASS_KEY1 = 'MRP2' THEN
        v_sapins.PASS_KEY1 := 'MRP';
      END IF;
      
      
      IF return_batch_id is null and v_sapins.data_key7 is not null then
        return_batch_id := v_sapins.data_key7;
      end if;
        
      if v_sapins.message_type is not null then
          
        if not ( v_sapins.message_type = 'S' OR v_sapins.message_type = 'W' OR v_sapins.message_type = 'I' ) then
          v_sapins.message_type := 'E';
        end if;
          
        --构建关键操作信息表
        find_flag := null; 
        for j in 1..t_operate.count
        loop
            
          if t_operate(j).PASS_KEY1 = v_sapins.PASS_KEY1 and
             t_operate(j).PASS_KEY2 = v_sapins.PASS_KEY2 and
             t_operate(j).PASS_KEY3 = v_sapins.PASS_KEY3 and
             t_operate(j).PASS_KEY4 = v_sapins.PASS_KEY4 then
               
            find_flag := 'X';
              
            if t_operate(j).MESSAGE_TYPE <> 'E' then
              t_operate(j) := v_sapins;
            end if;
          end if;
            
        end loop;
          
        if find_flag is null then
          t_operate.extend;
          t_operate(t_operate.count) := v_sapins;
        end if;
      end if;  
      
      --elsif v_sapins.message_type is null  --deleted by zhangbiao20080408
      if ( v_sapins.message_type <> 'E' or v_sapins.message_type is null ) and v_sapins.PASS_KEY1 = 'MAIN' and sapins.count = 1 then

        pro_version_unlock_for_null
                           ( in_user_name => v_sapins.DATA_KEY8,
                           in_master_type =>  v_sapins.MASTER_TYPE,
                           in_row_id =>  v_sapins.PASS_KEY3,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then return; end if;
        
      end if;
      
    end loop;    
      
    commit ;  --半程提交，将原始日志记录在案
    commit_flag := '1';
      
/*  exception
      when others then
      retcode := 'E';
      retmsg  := 'setSapReturn: 提交SAP返回信息失败!'||sqlerrm;    
      RETURN;
    end ;*/
    
    --构建待归档主数据ID信息
    for i in 1..t_operate.count 
    loop
      find_flag := null; 
      for k in 1..t_his_archive.count
      loop
            
        if t_his_archive(k).PASS_KEY3 = t_operate(i).PASS_KEY3 then
               
          find_flag := 'X';
              
          if t_his_archive(k).MESSAGE_TYPE <> 'E' then
            t_his_archive(k) := t_operate(i);
          end if;
        end if;
            
      end loop;
          
      if find_flag is null then
        t_his_archive.extend;
        t_his_archive(t_his_archive.count) := t_operate(i);
      end if;
    end loop;

    
    --对关键操作信息表进行分析
    S_COUNT := 0;
    E_COUNT := 0;
    
    for i in 1..t_operate.count 
    loop
      IF t_operate(i).MESSAGE_TYPE = 'E' THEN
        E_COUNT := E_COUNT + 1;
      ELSE      
        S_COUNT := S_COUNT + 1;
      END IF;
      
      prc_set_return_batch_id(in_user_name => t_operate(i).DATA_KEY8,
                              in_master_type =>  t_operate(i).MASTER_TYPE,
                              in_info_type =>  t_operate(i).PASS_KEY1,
                              in_row_id =>  t_operate(i).PASS_KEY2,
                              in_return_batch_id => t_operate(i).DATA_KEY7,
                              retcode => retcode,
                              retmsg => retmsg
                              );
      if t_operate(i).PASS_KEY1 <> 'BASE' THEN
        prc_set_return_batch_id(in_user_name => t_operate(i).DATA_KEY8,
                                in_master_type =>  t_operate(i).MASTER_TYPE,
                                in_info_type =>  t_operate(i).PASS_KEY1,
                                in_row_id =>  t_operate(i).PASS_KEY3,
                                in_return_batch_id => t_operate(i).DATA_KEY7,
                                retcode => retcode,
                                retmsg => retmsg
                                );
      END IF;
    end loop;
    
		IF S_COUNT = t_operate.count THEN
      
      for i in 1..t_operate.count
      loop
        prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                           in_master_type =>  t_operate(i).MASTER_TYPE,
                           in_info_type =>  t_operate(i).PASS_KEY1,
                           in_row_id =>  t_operate(i).PASS_KEY2,
                           in_action_status => 'SUBMIT',
                           in_operate_status => 'NVL',
                           in_return_batch_id => t_operate(i).DATA_KEY7,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then retcode := 'RE'; return; end if;
                             
      end loop;
      
      --此句不适应batch, so --此段针对主表无动作,但下挂表动作完成的, 对主表状态的更新
      if S_COUNT <> 0 and t_operate(t_operate.count).DATA_KEY6 is null then
        prc_version_update(in_user_name => t_operate(t_operate.count).DATA_KEY8,
                           in_master_type =>  t_operate(t_operate.count).MASTER_TYPE,
                           in_info_type =>  'BASE',
                           in_row_id =>  t_operate(t_operate.count).PASS_KEY3,
                           in_action_status => 'SUBMIT',
                           in_operate_status => 'NVL',
                           in_return_batch_id => t_operate(t_operate.count).DATA_KEY7,
                           retcode => retcode,
                           retmsg => retmsg );
        if retcode = 'E' then retcode := 'RE'; return; end if;

      end if;
      
      --DELETE BY ZHANG BIAO 20080523 -- 不统一归档
/*      IF S_COUNT <> 0 THEN

        --主数据归档处理
        for i in 1..t_his_archive.count
        loop
          if t_his_archive(i).pass_key3 is not null and
             t_his_archive(i).MESSAGE_TYPE <> 'E' THEN
          
            pro_version_archive
                               (in_master_type =>  t_his_archive(i).MASTER_TYPE,
                               in_row_id =>  t_his_archive(i).PASS_KEY3,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
            
          END IF;                 
        end loop;
      ELSE*/
      --DELETE BY ZHANG BIAO 20080523 -- 不统一归档
      
      IF S_COUNT = 0 THEN
        --主数据空处理解锁
        for i in 1..t_his_archive.count
        loop
          if t_his_archive(i).pass_key3 is not null and
             t_his_archive(i).MESSAGE_TYPE <> 'E' THEN
          
            pro_version_unlock_for_null
                               ( in_user_name => t_his_archive(i).DATA_KEY8,
                               in_master_type =>  t_his_archive(i).MASTER_TYPE,
                               in_row_id =>  t_his_archive(i).PASS_KEY3,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
            
          END IF;                 
        end loop;        
      END IF;
      
			retcode := 'S';
      retmsg  := 'setSapReturn: SAP操作成功!'||S_COUNT||'/'||t_operate.count;
      
		ELSIF S_COUNT = 0 THEN 
			retcode := 'R';
      retmsg  := 'setSapReturn: SAP操作失败,工作流需重新启动!'||S_COUNT||'/'||t_operate.count; 
      
    ELSIF S_COUNT < t_operate.count THEN
      for i in 1..t_operate.count
      loop

        if t_operate(i).PASS_KEY1 = 'BASE' AND t_operate(i).DATA_KEY6 IS NULL then --或代表主列表视图的字串   
          IF t_operate(i).MESSAGE_TYPE <> 'E' then
            prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                               in_master_type =>  t_operate(i).MASTER_TYPE,
                               in_info_type =>  t_operate(i).PASS_KEY1,
                               in_row_id =>  t_operate(i).PASS_KEY2,
                               in_action_status => 'WORKFLOW',
                               in_operate_status => 'DOING',--'' no change for database
                               in_return_batch_id => t_operate(i).DATA_KEY7,
                               retcode => retcode,
                               retmsg => retmsg );
            if retcode = 'E' then retcode := 'RE'; return; end if;
                             
          end if;
        else
          IF t_operate(i).MESSAGE_TYPE <> 'E' then
            prc_version_update(in_user_name => t_operate(i).DATA_KEY8,
                               in_master_type =>  t_operate(i).MASTER_TYPE,
                               in_info_type =>  t_operate(i).PASS_KEY1,
                               in_row_id =>  t_operate(i).PASS_KEY2,
                               in_action_status => 'SUBMIT',
                               in_operate_status => 'NVL',
                               in_return_batch_id => t_operate(i).DATA_KEY7,
                               retcode => retcode,
                               retmsg => retmsg );        
            if retcode = 'E' then retcode := 'RE'; return; end if;
                             
          end if;
        end if;
        
      end loop;
      
			retcode := 'R';
      retmsg  := 'setSapReturn: SAP操作部分成功,工作流需重新启动!'||S_COUNT||'/'||t_operate.count; 
      
    END IF;
    
	  COMMIT;
    
    if retcode = 'E' and commit_flag = '1' and return_batch_id is not null then
      retcode := 'RE';
    end if; 
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
      if commit_flag = '1' and return_batch_id is not null then
        retcode := 'RE';
      else
        retcode := 'E';
      end if; 
      retmsg  := 'setSapReturn: 解析过程处理异常!'||sqlerrm;
	END setSapReturn2; 
                              
END;
