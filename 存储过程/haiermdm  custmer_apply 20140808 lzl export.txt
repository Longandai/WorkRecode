CREATE OR REPLACE PACKAGE BODY customer_apply IS

  --工贸返回三个公司代码,事业部返回传入公司代码,经营体返回总公司指定股别公司代码(3或1个) --20100301 updateby zhangbiao
  CURSOR cur_business2company(p_business_type IN VARCHAR2,
                              p_detp_code IN VARCHAR2,
                              p_stock_flag IN varchar2,
                              p_comp1sale_set IN VARCHAR2, --SalesOrganization, CompanyCode --不合法的公司代码和销售组织不扩展
                              p_partner_function IN VARCHAR2
                             ) IS 
    SELECT t.*
      FROM (  SELECT t.sales_organization company_code, t.sales_organization_desc remark, t.trade_code dept_code, t.trade_code trade_code
                FROM hm_fnd_cust_trade2salesorg t
               WHERE ( p_business_type = 'GM' AND t.trade_code = decode(p_partner_function,'JCSH','12',p_detp_code) AND ( p_stock_flag IS NULL OR instr(t.sales_organization_desc, p_stock_flag) > 0 ) )
              UNION
              /*SELECT t.sales_organization company_code, t.sales_organization_desc remark, t.trade_code dept_code, t.trade_code trade_code
                FROM hm_fnd_cust_rrs2salesorg t
               WHERE ( p_business_type = 'GM' AND t.trade_code = decode(p_partner_function,'JCSH','12',p_detp_code) AND ( p_stock_flag IS NULL OR instr(t.sales_organization_desc, p_stock_flag) > 0 ) )
              UNION*/
              SELECT t.sales_organization company_code, t.sales_organization_desc remark, p_detp_code dept_code, '12' trade_code
                FROM hm_fnd_cust_trade2salesorg t
               WHERE ( p_business_type = 'JC' AND t.trade_code = '12' AND ( p_stock_flag IS NULL OR instr(t.sales_organization_desc, p_stock_flag) > 0 ) )
              UNION
              /*SELECT t.sales_organization company_code, t.sales_organization_desc remark, p_detp_code dept_code, '12' trade_code
                FROM hm_fnd_cust_rrs2salesorg t
               WHERE ( p_business_type = 'JC' AND t.trade_code = '12' AND ( p_stock_flag IS NULL OR instr(t.sales_organization_desc, p_stock_flag) > 0 ) )
              UNION*/
              SELECT t.company_code, '公司代码' remark, t.company_code dept_code , '' trade_code
                FROM (SELECT decode(p_business_type,'PL',p_detp_code,NULL) company_code  FROM dual ) t 
               WHERE t.company_code IS NOT NULL 
            ) t, hm_fnd_values a
     WHERE a.value = t.company_code AND a.value_set_id = p_comp1sale_set ;

    --根据送达方或售达方客户号找对应售达方(除了指定售达方),在指定销售组织内
    CURSOR CUR_PARTNER2SPCUST (P_CUST_PARTNER_SUBJECT_ID IN VARCHAR2,
                               P_CUST_PARTNER_TYPE IN VARCHAR2 ,
                               p_sales_orgs VARCHAR2, --aaaa,bbbb,cccc
                               P_SP_CUST_EXT IN VARCHAR2 ---排除此客户
                               ) IS
      SELECT DISTINCT AAA.CUST_PARTNER_SUBJECT_ID,
                      A.CUSTOMER_NUMBER,
                      A.ACCOUNT_GROUP,
                      A.CUSTOMER_NAME1 --chr(9),chr(13)||chr(10)
        FROM HM_CUSTOMER_PARTNERS   AAA,
             HM_CUSTOMER_SALES_DATA AA,
             HM_CUSTOMERS           A
       WHERE ( P_SP_CUST_EXT IS NULL OR A.CUSTOMER_NUMBER <> P_SP_CUST_EXT ) 
         AND A.DELETE_FLAG = '0'
         AND A.ROW_ID = AA.CUSTOMER_ID
         AND instr(p_sales_orgs, aa.sales_group) > 0
         AND AA.DELETE_FLAG = '0'
         AND AA.ROW_ID = AAA.SALES_AREA_VIEW_ID
         AND AAA.CUST_PARTNER_TYPE = P_CUST_PARTNER_TYPE --'SH','PY'
         AND AAA.DELETE_FLAG = '0'
         AND NOT EXISTS
       (SELECT *
                FROM HM_CUSTOMERS T, HM_CUSTOMER_SALES_DATA TT
               WHERE T.ROW_ID = TT.CUSTOMER_ID
                 AND TT.ROW_ID = AAA.SALES_AREA_VIEW_ID
                 AND T.CUSTOMER_NUMBER = AAA.CUST_PARTNER_SUBJECT_ID)
         AND AAA.CUST_PARTNER_SUBJECT_ID = P_CUST_PARTNER_SUBJECT_ID; --'8000000006';

    --根据送达方或售达方客户号找对应售达方(除了指定售达方),在指定销售组织内
    CURSOR CUR_PARTNER2SPCUST_item (P_CUST_PARTNER_SUBJECT_ID IN VARCHAR2,
                               P_CUST_PARTNER_TYPE IN VARCHAR2 ,
                               p_sales_orgs VARCHAR2, --aaaa,bbbb,cccc
                               P_SP_CUST_EXT IN VARCHAR2 ---排除此客户
                               ) IS
      SELECT          AAA.ROW_ID,
                      AAA.CUST_PARTNER_SUBJECT_ID,
                      AAA.CUST_PARTNER_TYPE,
                      AAA.SALES_AREA_VIEW_ID,
                      AA.SALES_GROUP,
                      AA.CUSTOMER_ID,
                      A.CUSTOMER_NUMBER,
                      A.ACCOUNT_GROUP,
                      A.CUSTOMER_NAME1 --chr(9),chr(13)||chr(10)
        FROM HM_CUSTOMER_PARTNERS   AAA,
             HM_CUSTOMER_SALES_DATA AA,
             HM_CUSTOMERS           A
       WHERE A.CUSTOMER_NUMBER <> P_SP_CUST_EXT
         AND A.DELETE_FLAG = '0'
         AND A.ROW_ID = AA.CUSTOMER_ID
         AND INSTR(P_SALES_ORGS, AA.SALES_GROUP) > 0
         AND AA.DELETE_FLAG = '0'
         AND AA.ROW_ID = AAA.SALES_AREA_VIEW_ID
         AND AAA.CUST_PARTNER_TYPE = P_CUST_PARTNER_TYPE --'SH','PY'
         AND AAA.DELETE_FLAG = '0'
         AND NOT EXISTS
       (SELECT *
                FROM HM_CUSTOMERS T, HM_CUSTOMER_SALES_DATA TT
               WHERE T.ROW_ID = TT.CUSTOMER_ID
                 AND TT.ROW_ID = AAA.SALES_AREA_VIEW_ID
                 AND T.CUSTOMER_NUMBER = AAA.CUST_PARTNER_SUBJECT_ID)
         AND AAA.CUST_PARTNER_SUBJECT_ID = P_CUST_PARTNER_SUBJECT_ID; --'8000000006';

  --得到原始对应售达方
  FUNCTION get_old_soldtoparty ( in_CUST_PARTNER_SUBJECT_ID VARCHAR2,
                                 in_CUST_PARTNER_TYPE VARCHAR2,
                                 in_sales_orgs VARCHAR2,
                                 IN_SP_CUST_EXT VARCHAR2) RETURN VARCHAR2 IS
    ls_old_soldtoparty VARCHAR2(1000) := '';
    ls_CUST_PARTNER_TYPE VARCHAR2(10) := '';
    
  BEGIN
    IF instr(UPPER(TRIM(in_CUST_PARTNER_TYPE)),'SH') > 0 THEN
      ls_CUST_PARTNER_TYPE := 'SH';
    ELSE
      ls_CUST_PARTNER_TYPE := UPPER(TRIM(in_CUST_PARTNER_TYPE));
    END IF;
    
    IF ls_CUST_PARTNER_TYPE IN ('PY','SH','BP') THEN
    
      FOR cur_rows IN CUR_PARTNER2SPCUST (IN_CUST_PARTNER_SUBJECT_ID, IN_CUST_PARTNER_TYPE, in_sales_orgs, IN_SP_CUST_EXT )
      LOOP
        ls_old_soldtoparty := ls_old_soldtoparty||cur_rows.customer_number||CHR(9)||cur_rows.account_group||CHR(9)||cur_rows.customer_name1||CHR(13)||CHR(10);
      END LOOP;
      
    END IF;
    
    RETURN ls_old_soldtoparty;
    
	EXCEPTION
		WHEN OTHERS THEN
			RETURN ls_old_soldtoparty;
  END get_old_soldtoparty;
  
  /****************************************************************
  功能描述：客户申请信息生成主数据临时码
  作者：    zhangbiao 
  时间：    2009-10-25       
       
  输入参数说明： in_hm_apply_customer 待更新结构 (使用字段)
  
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ***************************************************************/

  procedure prc_apply_tmpcode( in_tmpcode_type IN VARCHAR2, --CUSTOMER_NUMBER,MANAGER_CUSTOMER
                               v_hm_apply_customer IN out hm_apply_customer%ROWTYPE,
                               retcode   out varchar2, --返回码
                               retmsg    out varchar2 --返回消息                                  
                              ) is  
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_apply_tmpcode: 生成临时码成功！';
    
    IF in_tmpcode_type = 'CUSTOMER_NUMBER' THEN
      IF v_hm_apply_customer.operate_type = 'CREATE' AND
         v_hm_apply_customer.Customer_Number IS NULL THEN
        
        FOR CUR_ROWS IN ( SELECT * FROM hm_master_code_sequence
                          WHERE master_type = 'CUSTOMER'
                          AND master_code_group = v_hm_apply_customer.account_group
                          AND active_flag = '1')
        LOOP
          comm_util.prc_new_tmpid(v_hm_apply_customer.customer_number);
          
          IF v_hm_apply_customer.customer_number IS NOT NULL THEN

            v_hm_apply_customer.customer_number_temp := v_hm_apply_customer.customer_number;

            UPDATE hm_apply_customer
               SET customer_number = v_hm_apply_customer.customer_number,
                   customer_number_temp = v_hm_apply_customer.customer_number
             WHERE row_id = v_hm_apply_customer.row_id;
          END IF;
          
        END LOOP;         
         
      END IF;
      
    ELSIF in_tmpcode_type = 'MANAGER_CUSTOMER' THEN
      IF v_hm_apply_customer.operate_type = 'CREATE' AND
         v_hm_apply_customer.branch_company_code is null then

        FOR CUR_ROWS IN ( SELECT * FROM hm_master_code_sequence
                          WHERE master_type = 'SUBCOMPANY'
                          AND master_code_group = v_hm_apply_customer.business_type
                          AND active_flag = '1')
        LOOP
          comm_util.prc_new_tmpid(v_hm_apply_customer.branch_company_code);
          
          IF v_hm_apply_customer.branch_company_code IS NOT NULL THEN
            
            v_hm_apply_customer.branch_company_code_temp := v_hm_apply_customer.branch_company_code;
            v_hm_apply_customer.manage_customer := v_hm_apply_customer.branch_company_code;
          
            UPDATE hm_apply_customer
               SET branch_company_code = v_hm_apply_customer.branch_company_code,
                   branch_company_code_temp = v_hm_apply_customer.branch_company_code,
                   manage_customer = v_hm_apply_customer.branch_company_code
             WHERE row_id = v_hm_apply_customer.row_id;
          END IF;
          
        END LOOP;         
         
      end if;
    ELSE
    
      v_hm_apply_customer := v_hm_apply_customer;      
    END IF;
  
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_apply_tmpcode: 生成临时码失败！'|| SQLERRM;
  END prc_apply_tmpcode;
  

  /****************************************************************
  功能描述：申请明显信息从结构更新到数据库,依据in_hm_apply_customer.ROW_ID (应用位置: save,import,transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_tablename_suffix 取数表名的后缀,取导入表的数据:_IMP ,正式库表: 空,
                 in_hm_apply_customer 待更新结构
                                     (*如果in_hm_apply_customer.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_input_type2db( in_tablename_suffix IN VARCHAR2,  
                                        in_hm_apply_customer IN hm_apply_customer%Rowtype,
                                        retcode OUT VARCHAR2,
                                        retmsg  OUT VARCHAR2)
  IS
    l_hm_apply_customer hm_apply_customer%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_input_type2db: succeed!';
    
    if in_hm_apply_customer.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_apply_customer_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_apply_customer := in_hm_apply_customer;
    
    IF trim(in_tablename_suffix) IS NULL THEN
    
      UPDATE hm_apply_customer
         SET --row_id = l_hm_apply_customer.row_id,
             created_by = l_hm_apply_customer.created_by,
             created = l_hm_apply_customer.created,
             last_upd_by = l_hm_apply_customer.last_upd_by,
             last_upd = l_hm_apply_customer.last_upd,
             modification_num = l_hm_apply_customer.modification_num,
             delete_flag = l_hm_apply_customer.delete_flag,
             active_flag = l_hm_apply_customer.active_flag,
             remark = l_hm_apply_customer.remark,
             action_batch_id = l_hm_apply_customer.action_batch_id,
             business_code = l_hm_apply_customer.business_code,
             master_type = l_hm_apply_customer.master_type,
             operate_type = l_hm_apply_customer.operate_type,
             business_type = l_hm_apply_customer.business_type,
             partner_function = l_hm_apply_customer.partner_function,
             is_samejyt = l_hm_apply_customer.is_samejyt,
             dept_code = l_hm_apply_customer.dept_code,
             stock_flag = l_hm_apply_customer.stock_flag,
             apply_id = l_hm_apply_customer.apply_id,
             item_no = l_hm_apply_customer.item_no,
             view_base_x = l_hm_apply_customer.view_base_x,
             view_company_x = l_hm_apply_customer.view_company_x,
             view_sales_x = l_hm_apply_customer.view_sales_x,
             view_extend_x = l_hm_apply_customer.view_extend_x,
             view_subcompany_x = l_hm_apply_customer.view_subcompany_x,
             partner_flag_sp = l_hm_apply_customer.partner_flag_sp,
             partner_flag_sp_x = l_hm_apply_customer.partner_flag_sp_x,
             partner_flag_sh = l_hm_apply_customer.partner_flag_sh,
             partner_flag_sh_x = l_hm_apply_customer.partner_flag_sh_x,
             partner_flag_bp = l_hm_apply_customer.partner_flag_bp,
             partner_flag_bp_x = l_hm_apply_customer.partner_flag_bp_x,
             partner_flag_py = l_hm_apply_customer.partner_flag_py,
             partner_flag_py_x = l_hm_apply_customer.partner_flag_py_x,
             customer_title = l_hm_apply_customer.customer_title,
             customer_title_x = l_hm_apply_customer.customer_title_x,
             account_group = l_hm_apply_customer.account_group,
             account_group_x = l_hm_apply_customer.account_group_x,
             customer_number = l_hm_apply_customer.customer_number,
             customer_number_x = l_hm_apply_customer.customer_number_x,
             customer_name = l_hm_apply_customer.customer_name,
             customer_name_x = l_hm_apply_customer.customer_name_x,
             name2 = l_hm_apply_customer.name2,
             name2_x = l_hm_apply_customer.name2_x,
             name3 = l_hm_apply_customer.name3,
             name3_x = l_hm_apply_customer.name3_x,
             search_terms = l_hm_apply_customer.search_terms,
             search_terms_x = l_hm_apply_customer.search_terms_x,
             customer_country = l_hm_apply_customer.customer_country,
             customer_country_x = l_hm_apply_customer.customer_country_x,
             LANGUAGE = l_hm_apply_customer.language,
             language_x = l_hm_apply_customer.language_x,
             region = l_hm_apply_customer.region,
             region_x = l_hm_apply_customer.region_x,
             city = l_hm_apply_customer.city,
             city_x = l_hm_apply_customer.city_x,
             street = l_hm_apply_customer.street,
             street_x = l_hm_apply_customer.street_x,
             postal_code = l_hm_apply_customer.postal_code,
             postal_code_x = l_hm_apply_customer.postal_code_x,
             telephone = l_hm_apply_customer.telephone,
             telephone_x = l_hm_apply_customer.telephone_x,
             fax = l_hm_apply_customer.fax,
             fax_x = l_hm_apply_customer.fax_x,
             contact_person_department = l_hm_apply_customer.contact_person_department,
             contact_person_department_x = l_hm_apply_customer.contact_person_department_x,
             contact_person = l_hm_apply_customer.contact_person,
             contact_person_x = l_hm_apply_customer.contact_person_x,
             phone_number1 = l_hm_apply_customer.phone_number1,
             phone_number1_x = l_hm_apply_customer.phone_number1_x,
             legal_person = l_hm_apply_customer.legal_person,
             legal_person_x = l_hm_apply_customer.legal_person_x,
             company_type = l_hm_apply_customer.company_type,
             company_type_x = l_hm_apply_customer.company_type_x,
             vat_reg_no = l_hm_apply_customer.vat_reg_no,
             vat_reg_no_x = l_hm_apply_customer.vat_reg_no_x,
             train_station = l_hm_apply_customer.train_station,
             train_station_x = l_hm_apply_customer.train_station_x,
             customer_class = l_hm_apply_customer.customer_class,
             customer_class_x = l_hm_apply_customer.customer_class_x,
             industry_class = l_hm_apply_customer.industry_class,
             industry_class_x = l_hm_apply_customer.industry_class_x,
             market_area = l_hm_apply_customer.market_area,
             market_area_x = l_hm_apply_customer.market_area_x,
             industry = l_hm_apply_customer.industry,
             industry_x = l_hm_apply_customer.industry_x,
             niles_mark = l_hm_apply_customer.niles_mark,
             niles_mark_x = l_hm_apply_customer.niles_mark_x,
             estimate_status = l_hm_apply_customer.estimate_status,
             estimate_status_x = l_hm_apply_customer.estimate_status_x,
             taxdoc_type = l_hm_apply_customer.taxdoc_type,
             taxdoc_type_x = l_hm_apply_customer.taxdoc_type_x,
             customer_stat_category = l_hm_apply_customer.customer_stat_category,
             customer_stat_category_x = l_hm_apply_customer.customer_stat_category_x,
             vendor = l_hm_apply_customer.vendor,
             vendor_x = l_hm_apply_customer.vendor_x,
             bank_country = l_hm_apply_customer.bank_country,
             bank_country_x = l_hm_apply_customer.bank_country_x,
             bank_key = l_hm_apply_customer.bank_key,
             bank_key_x = l_hm_apply_customer.bank_key_x,
             bank_account = l_hm_apply_customer.bank_account,
             bank_account_x = l_hm_apply_customer.bank_account_x,
             account_holder = l_hm_apply_customer.account_holder,
             account_holder_x = l_hm_apply_customer.account_holder_x,
             bank_name = l_hm_apply_customer.bank_name,
             bank_name_x = l_hm_apply_customer.bank_name_x,
             recon_account = l_hm_apply_customer.recon_account,
             recon_account_x = l_hm_apply_customer.recon_account_x,
             sort_key = l_hm_apply_customer.sort_key,
             sort_key_x = l_hm_apply_customer.sort_key_x,
             terms_of_payment = l_hm_apply_customer.terms_of_payment,
             terms_of_payment_x = l_hm_apply_customer.terms_of_payment_x,
             payment_methods = l_hm_apply_customer.payment_methods,
             payment_methods_x = l_hm_apply_customer.payment_methods_x,
             prev_acct_no = l_hm_apply_customer.prev_acct_no,
             prev_acct_no_x = l_hm_apply_customer.prev_acct_no_x,
             hq = l_hm_apply_customer.hq,
             hq_x = l_hm_apply_customer.hq_x,
             preference_flag = l_hm_apply_customer.preference_flag,
             preference_flag_x = l_hm_apply_customer.preference_flag_x,
             discount_print_flag = l_hm_apply_customer.discount_print_flag,
             discount_print_flag_x = l_hm_apply_customer.discount_print_flag_x,
             account_remark = l_hm_apply_customer.account_remark,
             account_remark_x = l_hm_apply_customer.account_remark_x,
             sales_district = l_hm_apply_customer.sales_district,
             sales_district_x = l_hm_apply_customer.sales_district_x,
             sales_group = l_hm_apply_customer.sales_group,
             sales_group_x = l_hm_apply_customer.sales_group_x,
             currency = l_hm_apply_customer.currency,
             currency_x = l_hm_apply_customer.currency_x,
             price_group = l_hm_apply_customer.price_group,
             price_group_x = l_hm_apply_customer.price_group_x,
             customer_summary_group = l_hm_apply_customer.customer_summary_group,
             customer_summary_group_x = l_hm_apply_customer.customer_summary_group_x,
             customer_price_procedure = l_hm_apply_customer.customer_price_procedure,
             customer_price_procedure_x = l_hm_apply_customer.customer_price_procedure_x,
             delivering_plant = l_hm_apply_customer.delivering_plant,
             delivering_plant_x = l_hm_apply_customer.delivering_plant_x,
             acct_assgmt_group = l_hm_apply_customer.acct_assgmt_group,
             acct_assgmt_group_x = l_hm_apply_customer.acct_assgmt_group_x,
             tax_classification = l_hm_apply_customer.tax_classification,
             tax_classification_x = l_hm_apply_customer.tax_classification_x,
             ship_condition = l_hm_apply_customer.ship_condition,
             ship_condition_x = l_hm_apply_customer.ship_condition_x,
             pod_relation = l_hm_apply_customer.pod_relation,
             pod_relation_x = l_hm_apply_customer.pod_relation_x,
             sold_to_party = l_hm_apply_customer.sold_to_party,
             sold_to_party_x = l_hm_apply_customer.sold_to_party_x,
             global_pc_code = l_hm_apply_customer.global_pc_code,
             global_pc_code_x = l_hm_apply_customer.global_pc_code_x,
             parent_company_code = l_hm_apply_customer.parent_company_code,
             parent_company_code_x = l_hm_apply_customer.parent_company_code_x,
             org_group_code = l_hm_apply_customer.org_group_code,
             org_group_code_x = l_hm_apply_customer.org_group_code_x,
             is_storefront = l_hm_apply_customer.is_storefront,
             is_storefront_x = l_hm_apply_customer.is_storefront_x,
             old_customer_code = l_hm_apply_customer.old_customer_code,
             old_customer_code_x = l_hm_apply_customer.old_customer_code_x,
             is_seller = l_hm_apply_customer.is_seller,
             is_seller_x = l_hm_apply_customer.is_seller_x,
             sales_region = l_hm_apply_customer.sales_region,
             sales_region_x = l_hm_apply_customer.sales_region_x,
             cust_property = l_hm_apply_customer.cust_property,
             cust_property_x = l_hm_apply_customer.cust_property_x,
             cust_property_desc = l_hm_apply_customer.cust_property_desc,
             cust_property_desc_x = l_hm_apply_customer.cust_property_desc_x,
             cust_type = l_hm_apply_customer.cust_type,
             cust_type_x = l_hm_apply_customer.cust_type_x,
             csg_keyaccount_flag = l_hm_apply_customer.csg_keyaccount_flag,
             csg_keyaccount_flag_x = l_hm_apply_customer.csg_keyaccount_flag_x,
             csg_keyaccount_category = l_hm_apply_customer.csg_keyaccount_category,
             csg_keyaccount_category_x = l_hm_apply_customer.csg_keyaccount_category_x,
             csg_keyaccount_class = l_hm_apply_customer.csg_keyaccount_class,
             csg_keyaccount_class_x = l_hm_apply_customer.csg_keyaccount_class_x,
             cust_functions = l_hm_apply_customer.cust_functions,
             cust_functions_x = l_hm_apply_customer.cust_functions_x,

             BRAND1 = l_hm_apply_customer.BRAND1,
             BRAND1_X = l_hm_apply_customer.BRAND1_X,
             BRAND2 = l_hm_apply_customer.BRAND2,
             BRAND2_X = l_hm_apply_customer.BRAND2_X,
             BRAND3 = l_hm_apply_customer.BRAND3,
             BRAND3_X = l_hm_apply_customer.BRAND3_X,
             SALES_AMOUNT1 = l_hm_apply_customer.SALES_AMOUNT1,
             SALES_AMOUNT1_X = l_hm_apply_customer.SALES_AMOUNT1_X,
             SALES_AMOUNT2 = l_hm_apply_customer.SALES_AMOUNT2,
             SALES_AMOUNT2_X = l_hm_apply_customer.SALES_AMOUNT2_X,
             SALES_AMOUNT3 = l_hm_apply_customer.SALES_AMOUNT3,
             SALES_AMOUNT3_X = l_hm_apply_customer.SALES_AMOUNT3_X,
             SALES_VOLUME = l_hm_apply_customer.SALES_VOLUME,
             SALES_VOLUME_X = l_hm_apply_customer.SALES_VOLUME_X,
             OUTLET_AREA = l_hm_apply_customer.OUTLET_AREA,
             OUTLET_AREA_X = l_hm_apply_customer.OUTLET_AREA_X,
             REGISTERED_CAPITAL = l_hm_apply_customer.REGISTERED_CAPITAL,
             REGISTERED_CAPITAL_X = l_hm_apply_customer.REGISTERED_CAPITAL_X,
             MANAGE_LIMIT_YEAR = l_hm_apply_customer.MANAGE_LIMIT_YEAR,
             MANAGE_LIMIT_YEAR_X = l_hm_apply_customer.MANAGE_LIMIT_YEAR_X,
             COOPERATION_SCOPE = l_hm_apply_customer.COOPERATION_SCOPE,
             COOPERATION_SCOPE_X = l_hm_apply_customer.COOPERATION_SCOPE_X,
             COOPERATION_SALES_VOLUMN = l_hm_apply_customer.COOPERATION_SALES_VOLUMN,
             COOPERATION_SALES_VOLUMN_X = l_hm_apply_customer.COOPERATION_SALES_VOLUMN_X,
             
             manage_customer = l_hm_apply_customer.manage_customer,
             manage_customer_x = l_hm_apply_customer.manage_customer_x,
             branch_code = l_hm_apply_customer.branch_code,
             branch_code_x = l_hm_apply_customer.branch_code_x,
             branch_company_code = l_hm_apply_customer.branch_company_code,
             branch_company_code_x = l_hm_apply_customer.branch_company_code_x,
             branch_company_name = l_hm_apply_customer.branch_company_name,
             branch_company_name_x = l_hm_apply_customer.branch_company_name_x,
             customer_manager = l_hm_apply_customer.customer_manager,
             customer_manager_x = l_hm_apply_customer.customer_manager_x,
             area_code = l_hm_apply_customer.area_code,
             area_code_x = l_hm_apply_customer.area_code_x,
             jyt_code = l_hm_apply_customer.jyt_code,
             jyt_code_next = l_hm_apply_customer.jyt_code_next,
             customer_number_temp = l_hm_apply_customer.customer_number_temp,
             branch_company_code_temp = l_hm_apply_customer.branch_company_code_temp,
             INDUSTRY_CLASS_OLD = l_hm_apply_customer.INDUSTRY_CLASS_OLD,
             INDUSTRY_CLASS_OLD_X = l_hm_apply_customer.INDUSTRY_CLASS_OLD_X,
             SOLD_TO_PARTY_OLD = l_hm_apply_customer.SOLD_TO_PARTY_OLD,
             SOLD_TO_PARTY_OLD_X = l_hm_apply_customer.SOLD_TO_PARTY_OLD_X,
             CUSTOMER_FLAG = l_hm_apply_customer.CUSTOMER_FLAG,
             CUSTOMER_FLAG_X = l_hm_apply_customer.CUSTOMER_FLAG_X,
             CUSTOMER_FLAG_OLD = l_hm_apply_customer.CUSTOMER_FLAG_OLD,
             CUSTOMER_FLAG_OLD_X = l_hm_apply_customer.CUSTOMER_FLAG_OLD_X
       WHERE row_id = l_hm_apply_customer.row_id;


    ELSIF upper(trim(in_tablename_suffix)) = '_IMP' THEN
    
      UPDATE hm_apply_customer_imp
         SET --row_id = l_hm_apply_customer.row_id,
             created_by = l_hm_apply_customer.created_by,
             created = l_hm_apply_customer.created,
             last_upd_by = l_hm_apply_customer.last_upd_by,
             last_upd = l_hm_apply_customer.last_upd,
             modification_num = l_hm_apply_customer.modification_num,
             delete_flag = l_hm_apply_customer.delete_flag,
             active_flag = l_hm_apply_customer.active_flag,
             remark = l_hm_apply_customer.remark,
             action_batch_id = l_hm_apply_customer.action_batch_id,
             business_code = l_hm_apply_customer.business_code,
             master_type = l_hm_apply_customer.master_type,
             operate_type = l_hm_apply_customer.operate_type,
             business_type = l_hm_apply_customer.business_type,
             partner_function = l_hm_apply_customer.partner_function,
             is_samejyt = l_hm_apply_customer.is_samejyt,
             dept_code = l_hm_apply_customer.dept_code,
             stock_flag = l_hm_apply_customer.stock_flag,
             apply_id = l_hm_apply_customer.apply_id,
             item_no = l_hm_apply_customer.item_no,
             view_base_x = l_hm_apply_customer.view_base_x,
             view_company_x = l_hm_apply_customer.view_company_x,
             view_sales_x = l_hm_apply_customer.view_sales_x,
             view_extend_x = l_hm_apply_customer.view_extend_x,
             view_subcompany_x = l_hm_apply_customer.view_subcompany_x,
             partner_flag_sp = l_hm_apply_customer.partner_flag_sp,
             partner_flag_sp_x = l_hm_apply_customer.partner_flag_sp_x,
             partner_flag_sh = l_hm_apply_customer.partner_flag_sh,
             partner_flag_sh_x = l_hm_apply_customer.partner_flag_sh_x,
             partner_flag_bp = l_hm_apply_customer.partner_flag_bp,
             partner_flag_bp_x = l_hm_apply_customer.partner_flag_bp_x,
             partner_flag_py = l_hm_apply_customer.partner_flag_py,
             partner_flag_py_x = l_hm_apply_customer.partner_flag_py_x,
             customer_title = l_hm_apply_customer.customer_title,
             customer_title_x = l_hm_apply_customer.customer_title_x,
             account_group = l_hm_apply_customer.account_group,
             account_group_x = l_hm_apply_customer.account_group_x,
             customer_number = l_hm_apply_customer.customer_number,
             customer_number_x = l_hm_apply_customer.customer_number_x,
             customer_name = l_hm_apply_customer.customer_name,
             customer_name_x = l_hm_apply_customer.customer_name_x,
             name2 = l_hm_apply_customer.name2,
             name2_x = l_hm_apply_customer.name2_x,
             name3 = l_hm_apply_customer.name3,
             name3_x = l_hm_apply_customer.name3_x,
             search_terms = l_hm_apply_customer.search_terms,
             search_terms_x = l_hm_apply_customer.search_terms_x,
             customer_country = l_hm_apply_customer.customer_country,
             customer_country_x = l_hm_apply_customer.customer_country_x,
             LANGUAGE = l_hm_apply_customer.language,
             language_x = l_hm_apply_customer.language_x,
             region = l_hm_apply_customer.region,
             region_x = l_hm_apply_customer.region_x,
             city = l_hm_apply_customer.city,
             city_x = l_hm_apply_customer.city_x,
             street = l_hm_apply_customer.street,
             street_x = l_hm_apply_customer.street_x,
             postal_code = l_hm_apply_customer.postal_code,
             postal_code_x = l_hm_apply_customer.postal_code_x,
             telephone = l_hm_apply_customer.telephone,
             telephone_x = l_hm_apply_customer.telephone_x,
             fax = l_hm_apply_customer.fax,
             fax_x = l_hm_apply_customer.fax_x,
             contact_person_department = l_hm_apply_customer.contact_person_department,
             contact_person_department_x = l_hm_apply_customer.contact_person_department_x,
             contact_person = l_hm_apply_customer.contact_person,
             contact_person_x = l_hm_apply_customer.contact_person_x,
             phone_number1 = l_hm_apply_customer.phone_number1,
             phone_number1_x = l_hm_apply_customer.phone_number1_x,
             legal_person = l_hm_apply_customer.legal_person,
             legal_person_x = l_hm_apply_customer.legal_person_x,
             company_type = l_hm_apply_customer.company_type,
             company_type_x = l_hm_apply_customer.company_type_x,
             vat_reg_no = l_hm_apply_customer.vat_reg_no,
             vat_reg_no_x = l_hm_apply_customer.vat_reg_no_x,
             train_station = l_hm_apply_customer.train_station,
             train_station_x = l_hm_apply_customer.train_station_x,
             customer_class = l_hm_apply_customer.customer_class,
             customer_class_x = l_hm_apply_customer.customer_class_x,
             industry_class = l_hm_apply_customer.industry_class,
             industry_class_x = l_hm_apply_customer.industry_class_x,
             market_area = l_hm_apply_customer.market_area,
             market_area_x = l_hm_apply_customer.market_area_x,
             industry = l_hm_apply_customer.industry,
             industry_x = l_hm_apply_customer.industry_x,
             niles_mark = l_hm_apply_customer.niles_mark,
             niles_mark_x = l_hm_apply_customer.niles_mark_x,
             estimate_status = l_hm_apply_customer.estimate_status,
             estimate_status_x = l_hm_apply_customer.estimate_status_x,
             taxdoc_type = l_hm_apply_customer.taxdoc_type,
             taxdoc_type_x = l_hm_apply_customer.taxdoc_type_x,
             customer_stat_category = l_hm_apply_customer.customer_stat_category,
             customer_stat_category_x = l_hm_apply_customer.customer_stat_category_x,
             vendor = l_hm_apply_customer.vendor,
             vendor_x = l_hm_apply_customer.vendor_x,
             bank_country = l_hm_apply_customer.bank_country,
             bank_country_x = l_hm_apply_customer.bank_country_x,
             bank_key = l_hm_apply_customer.bank_key,
             bank_key_x = l_hm_apply_customer.bank_key_x,
             bank_account = l_hm_apply_customer.bank_account,
             bank_account_x = l_hm_apply_customer.bank_account_x,
             account_holder = l_hm_apply_customer.account_holder,
             account_holder_x = l_hm_apply_customer.account_holder_x,
             bank_name = l_hm_apply_customer.bank_name,
             bank_name_x = l_hm_apply_customer.bank_name_x,
             recon_account = l_hm_apply_customer.recon_account,
             recon_account_x = l_hm_apply_customer.recon_account_x,
             sort_key = l_hm_apply_customer.sort_key,
             sort_key_x = l_hm_apply_customer.sort_key_x,
             terms_of_payment = l_hm_apply_customer.terms_of_payment,
             terms_of_payment_x = l_hm_apply_customer.terms_of_payment_x,
             payment_methods = l_hm_apply_customer.payment_methods,
             payment_methods_x = l_hm_apply_customer.payment_methods_x,
             prev_acct_no = l_hm_apply_customer.prev_acct_no,
             prev_acct_no_x = l_hm_apply_customer.prev_acct_no_x,
             hq = l_hm_apply_customer.hq,
             hq_x = l_hm_apply_customer.hq_x,
             preference_flag = l_hm_apply_customer.preference_flag,
             preference_flag_x = l_hm_apply_customer.preference_flag_x,
             discount_print_flag = l_hm_apply_customer.discount_print_flag,
             discount_print_flag_x = l_hm_apply_customer.discount_print_flag_x,
             account_remark = l_hm_apply_customer.account_remark,
             account_remark_x = l_hm_apply_customer.account_remark_x,
             sales_district = l_hm_apply_customer.sales_district,
             sales_district_x = l_hm_apply_customer.sales_district_x,
             sales_group = l_hm_apply_customer.sales_group,
             sales_group_x = l_hm_apply_customer.sales_group_x,
             currency = l_hm_apply_customer.currency,
             currency_x = l_hm_apply_customer.currency_x,
             price_group = l_hm_apply_customer.price_group,
             price_group_x = l_hm_apply_customer.price_group_x,
             customer_summary_group = l_hm_apply_customer.customer_summary_group,
             customer_summary_group_x = l_hm_apply_customer.customer_summary_group_x,
             customer_price_procedure = l_hm_apply_customer.customer_price_procedure,
             customer_price_procedure_x = l_hm_apply_customer.customer_price_procedure_x,
             delivering_plant = l_hm_apply_customer.delivering_plant,
             delivering_plant_x = l_hm_apply_customer.delivering_plant_x,
             acct_assgmt_group = l_hm_apply_customer.acct_assgmt_group,
             acct_assgmt_group_x = l_hm_apply_customer.acct_assgmt_group_x,
             tax_classification = l_hm_apply_customer.tax_classification,
             tax_classification_x = l_hm_apply_customer.tax_classification_x,
             ship_condition = l_hm_apply_customer.ship_condition,
             ship_condition_x = l_hm_apply_customer.ship_condition_x,
             pod_relation = l_hm_apply_customer.pod_relation,
             pod_relation_x = l_hm_apply_customer.pod_relation_x,
             sold_to_party = l_hm_apply_customer.sold_to_party,
             sold_to_party_x = l_hm_apply_customer.sold_to_party_x,
             global_pc_code = l_hm_apply_customer.global_pc_code,
             global_pc_code_x = l_hm_apply_customer.global_pc_code_x,
             parent_company_code = l_hm_apply_customer.parent_company_code,
             parent_company_code_x = l_hm_apply_customer.parent_company_code_x,
             org_group_code = l_hm_apply_customer.org_group_code,
             org_group_code_x = l_hm_apply_customer.org_group_code_x,
             is_storefront = l_hm_apply_customer.is_storefront,
             is_storefront_x = l_hm_apply_customer.is_storefront_x,
             old_customer_code = l_hm_apply_customer.old_customer_code,
             old_customer_code_x = l_hm_apply_customer.old_customer_code_x,
             is_seller = l_hm_apply_customer.is_seller,
             is_seller_x = l_hm_apply_customer.is_seller_x,
             sales_region = l_hm_apply_customer.sales_region,
             sales_region_x = l_hm_apply_customer.sales_region_x,
             cust_property = l_hm_apply_customer.cust_property,
             cust_property_x = l_hm_apply_customer.cust_property_x,
             cust_property_desc = l_hm_apply_customer.cust_property_desc,
             cust_property_desc_x = l_hm_apply_customer.cust_property_desc_x,
             cust_type = l_hm_apply_customer.cust_type,
             cust_type_x = l_hm_apply_customer.cust_type_x,
             csg_keyaccount_flag = l_hm_apply_customer.csg_keyaccount_flag,
             csg_keyaccount_flag_x = l_hm_apply_customer.csg_keyaccount_flag_x,
             csg_keyaccount_category = l_hm_apply_customer.csg_keyaccount_category,
             csg_keyaccount_category_x = l_hm_apply_customer.csg_keyaccount_category_x,
             csg_keyaccount_class = l_hm_apply_customer.csg_keyaccount_class,
             csg_keyaccount_class_x = l_hm_apply_customer.csg_keyaccount_class_x,
             cust_functions = l_hm_apply_customer.cust_functions,
             cust_functions_x = l_hm_apply_customer.cust_functions_x,

             BRAND1 = l_hm_apply_customer.BRAND1,
             BRAND1_X = l_hm_apply_customer.BRAND1_X,
             BRAND2 = l_hm_apply_customer.BRAND2,
             BRAND2_X = l_hm_apply_customer.BRAND2_X,
             BRAND3 = l_hm_apply_customer.BRAND3,
             BRAND3_X = l_hm_apply_customer.BRAND3_X,
             SALES_AMOUNT1 = l_hm_apply_customer.SALES_AMOUNT1,
             SALES_AMOUNT1_X = l_hm_apply_customer.SALES_AMOUNT1_X,
             SALES_AMOUNT2 = l_hm_apply_customer.SALES_AMOUNT2,
             SALES_AMOUNT2_X = l_hm_apply_customer.SALES_AMOUNT2_X,
             SALES_AMOUNT3 = l_hm_apply_customer.SALES_AMOUNT3,
             SALES_AMOUNT3_X = l_hm_apply_customer.SALES_AMOUNT3_X,
             SALES_VOLUME = l_hm_apply_customer.SALES_VOLUME,
             SALES_VOLUME_X = l_hm_apply_customer.SALES_VOLUME_X,
             OUTLET_AREA = l_hm_apply_customer.OUTLET_AREA,
             OUTLET_AREA_X = l_hm_apply_customer.OUTLET_AREA_X,
             REGISTERED_CAPITAL = l_hm_apply_customer.REGISTERED_CAPITAL,
             REGISTERED_CAPITAL_X = l_hm_apply_customer.REGISTERED_CAPITAL_X,
             MANAGE_LIMIT_YEAR = l_hm_apply_customer.MANAGE_LIMIT_YEAR,
             MANAGE_LIMIT_YEAR_X = l_hm_apply_customer.MANAGE_LIMIT_YEAR_X,
             COOPERATION_SCOPE = l_hm_apply_customer.COOPERATION_SCOPE,
             COOPERATION_SCOPE_X = l_hm_apply_customer.COOPERATION_SCOPE_X,
             COOPERATION_SALES_VOLUMN = l_hm_apply_customer.COOPERATION_SALES_VOLUMN,
             COOPERATION_SALES_VOLUMN_X = l_hm_apply_customer.COOPERATION_SALES_VOLUMN_X,
             
             manage_customer = l_hm_apply_customer.manage_customer,
             manage_customer_x = l_hm_apply_customer.manage_customer_x,
             branch_code = l_hm_apply_customer.branch_code,
             branch_code_x = l_hm_apply_customer.branch_code_x,
             branch_company_code = l_hm_apply_customer.branch_company_code,
             branch_company_code_x = l_hm_apply_customer.branch_company_code_x,
             branch_company_name = l_hm_apply_customer.branch_company_name,
             branch_company_name_x = l_hm_apply_customer.branch_company_name_x,
             customer_manager = l_hm_apply_customer.customer_manager,
             customer_manager_x = l_hm_apply_customer.customer_manager_x,
             area_code = l_hm_apply_customer.area_code,
             area_code_x = l_hm_apply_customer.area_code_x,
             jyt_code = l_hm_apply_customer.jyt_code,
             jyt_code_next = l_hm_apply_customer.jyt_code_next,
             customer_number_temp = l_hm_apply_customer.customer_number_temp,
             branch_company_code_temp = l_hm_apply_customer.branch_company_code_temp,
             INDUSTRY_CLASS_OLD = l_hm_apply_customer.INDUSTRY_CLASS_OLD,
             INDUSTRY_CLASS_OLD_X = l_hm_apply_customer.INDUSTRY_CLASS_OLD_X,
             SOLD_TO_PARTY_OLD = l_hm_apply_customer.SOLD_TO_PARTY_OLD,
             SOLD_TO_PARTY_OLD_X = l_hm_apply_customer.SOLD_TO_PARTY_OLD_X,
             CUSTOMER_FLAG = l_hm_apply_customer.CUSTOMER_FLAG,
             CUSTOMER_FLAG_X = l_hm_apply_customer.CUSTOMER_FLAG_X,
             CUSTOMER_FLAG_OLD = l_hm_apply_customer.CUSTOMER_FLAG_OLD,
             CUSTOMER_FLAG_OLD_X = l_hm_apply_customer.CUSTOMER_FLAG_OLD_X
       WHERE row_id = l_hm_apply_customer.row_id;

    
    END IF;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_input_type2db:'|| SQLERRM;
  END prc_input_type2db;

  /****************************************************************
  功能描述：根据业务类型校验输入字段 (应用位置: save,import,transaction)
  作者：    zhangbiao 
  时间：    2009-09-15       
       
  输入参数说明： in_row_id        申请单_信息ID,(*如果in_row_id不为空, 则从数据库取数填充 v_hm_apply_customer 值   )        
                 in_tablename_suffix 取数表名的后缀,取导入表的数据:_IMP ,正式库表: 空,
                 v_hm_apply_customer IN OUT hm_apply_customer%ROWTYPE (输入输出方式)
                                     (*如果in_row_id不为空,v_hm_apply_customer值即为待处理的数据条目)
                 in_checkname     校验名称，一般是需要校验的字段名称 
                 (可以为空。为空，则全部校验)
          例：
      CUSTOMER_NAME,NAME2,STREET,STREET2,STREET3,
      STREET4,DISTRICT,CITY,SEARCH_TERMS,EMAIL,
      POSTAL_CODE,REGIONAL_GM_MANAGER,CUSTOMER_MANAGER,ASSISTANT_CUST_MGR,SALES_AGENT,
      SALES_REP,KEY_ACCOUNT_MANAGER,CREDIT_MANAGER_CODE,SOE_CODE,CENTRAL_ACCOUNT
                 
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,保存，导入，转换统一验证方法
       2,前提：录入数据已入数据库表(导入表或正式表中，有ROW_ID)
       3,根据校验名称对相关字段或业务数据进行校验
       4,内部调用 prc_input_change
  ****************************************************************/
  PROCEDURE prc_input_allcheck
  (
    in_row_id         IN VARCHAR2,
    in_tablename_suffix IN VARCHAR2,
    v_hm_apply_customer IN OUT hm_apply_customer%ROWTYPE ,
    retcode            OUT VARCHAR2,
    retmsg             OUT VARCHAR2
  ) IS
  
    li_count       INTEGER := 0;
    ls_businesscode hm_applys.business_code%TYPE;
    ls_businesstype hm_applys.business_type%TYPE;
    ls_deptcode hm_applys.dept_code%TYPE;
    ls_operatetype hm_applys.operate_type%TYPE;
    ls_business_auditversion hm_business_audit.current_audit_version%type;
    ls_jytcode_next hm_applys.jyt_code_next%TYPE;
    ls_jytcode      hm_applys.jyt_code%TYPE;
    
    ls_belong_yjt VARCHAR2(20);
    ls_customer_flag hm_applys.customer_flag%TYPE;
    
    --ls_businesscode_create hm_applys.business_code%TYPE;
    
    l_hm_business hm_business%rowtype;
    l_hm_business_audit hm_business_audit%rowtype;
    l_hm_applys hm_applys%rowtype;
    l_hm_apply_customer hm_apply_customer%rowtype;
    l_hm_customers hm_customers%rowtype;
    --l_hm_customers_temp hm_customers%rowtype;
    l_hm_business_fields hm_business_fields%ROWTYPE;
    
    ls_fieldvalue      VARCHAR2(2000);
    --li_fieldvalue      NUMBER(22,7);
    ls_field_label_en  VARCHAR2(2000);
      
    l_retcode_temp     VARCHAR2(10);
    str_sql    VARCHAR2(1000); --查询SQL
    quy_sql    VARCHAR2(250); --查询SQL
    ls_value   VARCHAR2(4000);
    ls_value_x VARCHAR2(200);
    TYPE cur_type IS REF CURSOR;
    cur_type_rows     cur_type;
    l_find_flag       VARCHAR2(10);
     temp_count      INTEGER := 0;
    
    
    CURSOR cur_field_label(p_business_code IN VARCHAR2, p_field_name IN VARCHAR2) IS
      select field_label_en from hm_business_fields
       where business_code = p_business_code
         AND field_name = p_field_name
         AND active_flag ='1' AND delete_flag ='0';  
    
    in_checkname varchar2(50) := '';
    
  BEGIN
    retcode := 'S';
    
    --录入数据准备(有ROW_ID以数据库取值为优先，否则以录入数据结构为优先)
    IF in_row_id IS NOT NULL THEN
      str_sql := 'select * from hm_apply_customer'||in_tablename_suffix||' where row_id = :in_row_id';
      OPEN cur_type_rows FOR str_sql USING in_row_id;
      LOOP
        FETCH cur_type_rows INTO l_hm_apply_customer;
        EXIT WHEN cur_type_rows%NOTFOUND;        
      END LOOP;
      CLOSE cur_type_rows;
    ELSE
        l_hm_apply_customer := v_hm_apply_customer;
    END IF;
    
    if l_hm_apply_customer.row_id is null then
      retcode := 'E';
      retmsg  := 'prc_input_allcheck: Customer apply info not exist!';    
      RETURN;  
    end if;
    
    str_sql := 'select count(*) from hm_apply_customer'||in_tablename_suffix||' where row_id = :in_row_id';
    EXECUTE IMMEDIATE str_sql into li_count USING l_hm_apply_customer.row_id ;
    
    IF li_count < 1 THEN
      retcode := 'E';
      retmsg  := 'prc_input_allcheck: apply item info not exist!';
      RETURN;
    END IF;
    
    --获取当前申请头信息
    for cur_rows in (select * from hm_applys where apply_id = l_hm_apply_customer.apply_id)
    loop
      l_hm_applys := cur_rows;
      ls_businesscode := l_hm_applys.business_code;
      ls_businesstype := l_hm_applys.business_type;
      ls_deptcode  := l_hm_applys.dept_code;
      ls_operatetype := l_hm_applys.operate_type;
      ls_jytcode_next := l_hm_applys.jyt_code_next;
      ls_jytcode := l_hm_applys.jyt_code;
      ls_customer_flag := l_hm_applys.customer_flag;
    end loop;
    if l_hm_applys.apply_id IS NULL THEN
      ls_businesscode := l_hm_apply_customer.business_code;
      ls_businesstype := l_hm_apply_customer.business_type;
      ls_deptcode  := l_hm_apply_customer.dept_code;
      ls_operatetype  := l_hm_apply_customer.operate_type;
      ls_jytcode_next := l_hm_apply_customer.jyt_code_next;
      ls_jytcode := l_hm_apply_customer.jyt_code;
      ls_customer_flag := l_hm_apply_customer.customer_flag;
    ELSE
      IF l_hm_apply_customer.business_code <> l_hm_applys.business_code THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := l_hm_apply_customer.item_no ||
                   ' ROW, The bussiness code in Application item is different from the head!';
        RETURN;
      END IF;
    END IF;
    
    IF ls_businesscode IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Code can''t be empty!';
      RETURN;
    ELSE
      
      FOR cur_rows IN (SELECT * FROM hm_business WHERE business_code = ls_businesscode)
      LOOP
        l_hm_business := cur_rows;
      END LOOP;
      
      IF l_hm_business.business_code IS NULL THEN
        retcode := 'E';
        retmsg  := l_hm_apply_customer.item_no||' ROW, The bussiness code '||ls_businesscode||' is not valid!';
        RETURN;
      END IF;
      
      FOR cur_rows IN (SELECT * FROM hm_business_audit WHERE business_code = ls_businesscode and active_flag = '1')
      LOOP
        l_hm_business_audit := cur_rows;
      END LOOP;
      
      IF l_hm_business_audit.current_audit_version IS NULL THEN
        retcode := 'E';
        retmsg  := l_hm_apply_customer.item_no||' ROW, The bussiness code '||ls_businesscode||' have not a valid audit version !';
        RETURN;
      else
        ls_business_auditversion := l_hm_business_audit.current_audit_version;
      END IF;
      
      --ls_businesscode_create := REPLACE(REPLACE(ls_businesscode, 'UPDATE', 'CREATE'), 'EXTEND', 'CREATE');
    END IF;
    IF ls_businesstype IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Type can''t be empty!';
      RETURN;
    END IF;
    IF ls_deptcode IS NULL THEN
      retcode := 'E';
      retmsg  := 'Department Code can''t be empty!';
      RETURN;
    END IF;
    IF ls_operatetype IS NULL THEN
      retcode := 'E';
      retmsg  := 'Operate Type can''t be empty!';
      RETURN;
    END IF;    

    --责任经营体
    IF ls_businesstype = 'JC' THEN
      ls_belong_yjt := ls_deptcode;
    ELSE
      IF ls_jytcode_next IS NOT NULL THEN
        ls_belong_yjt := ls_jytcode_next;
      ELSE
        IF ls_jytcode IS NOT NULL THEN
          ls_belong_yjt := ls_jytcode;
        ELSE
          ls_belong_yjt := '';
        END IF;
      END IF;
    END IF;
    
    --客户类型标识
    IF ls_customer_flag IS NOT NULL THEN
      IF ls_customer_flag NOT IN ('SX','HS','SZ') THEN
        retcode := 'E';
        retmsg  := 'Customer Flag must be in SX/HS!';
        RETURN;
      ELSE
        IF ls_belong_yjt IS NOT NULL AND 
           ls_belong_yjt NOT IN ('1004','1005') THEN
          retcode := 'E';
          retmsg  := 'When Customer Flag is SX/HS, then jyt_code must be in 1004/1005!';
          RETURN;         
        END IF;
      END IF;
      
    END if;
    
/*    IF ls_businesscode LIKE 'CST%GM%SX' AND ( ls_customer_flag IS NULL OR ls_customer_flag <> 'SX' ) THEN
      retcode := 'E';
      retmsg  := 'When Business Code like [CST%GM%SX], Then Customer Flag is SX!';
      RETURN;
    END IF;*/

      
    ----业务视图关系校验
    --合作伙伴关系校验
    IF l_hm_apply_customer.operate_type = 'CREATE' THEN
      IF l_hm_apply_customer.partner_function = 'SP' THEN 
        IF l_hm_apply_customer.partner_flag_sp IS NULL OR l_hm_apply_customer.partner_flag_sp <> '1' THEN
          retcode := 'E';
          retmsg := '客户创建售达方业务时，售达方标示应被钩选(值为1)!';
          RETURN;
        END IF;
      END IF;
      IF l_hm_apply_customer.partner_function = 'BP' THEN 
        IF l_hm_apply_customer.partner_flag_bp IS NULL OR l_hm_apply_customer.partner_flag_bp <> '1' THEN
          retcode := 'E';
          retmsg := '客户创建开票方业务时，开票方标示应被钩选(值为1)!';
          RETURN;
        END IF;
        
        IF l_hm_apply_customer.partner_flag_sp = '1' OR
           l_hm_apply_customer.partner_flag_py = '1' OR
           l_hm_apply_customer.partner_flag_sh = '1' THEN
          retcode := 'E';
          retmsg := '客户创建开票方业务时，其它方标示不应被钩选(值为0)!';
          RETURN;          
        END IF;
        
      END IF;
      IF l_hm_apply_customer.partner_function = 'PY' THEN 
        IF l_hm_apply_customer.partner_flag_py IS NULL OR l_hm_apply_customer.partner_flag_py <> '1' THEN
          retcode := 'E';
          retmsg := '客户创建付款方业务时，付款方标示应被钩选(值为1)!';
          RETURN;
        END IF;

        IF l_hm_apply_customer.partner_flag_sp = '1' OR
           l_hm_apply_customer.partner_flag_bp = '1' OR
           l_hm_apply_customer.partner_flag_sh = '1' THEN
          retcode := 'E';
          retmsg := '客户创建付款方业务时，其它方标示不应被钩选(值为0)!';
          RETURN;          
        END IF;
      END IF;
      
      IF l_hm_apply_customer.partner_function in ('SH','JCSH') THEN 
        IF l_hm_apply_customer.partner_flag_sh IS NULL OR l_hm_apply_customer.partner_flag_sh <> '1' THEN
          retcode := 'E';
          retmsg := '客户创建送达方业务时，送达方标示应被钩选(值为1)!';
          RETURN;
        END IF;

        IF l_hm_apply_customer.partner_flag_sp = '1' OR
           l_hm_apply_customer.partner_flag_bp = '1' OR
           l_hm_apply_customer.partner_flag_py = '1' THEN
          retcode := 'E';
          retmsg := '客户创建送达方业务时，其它方标示不应被钩选(值为0)!';
          RETURN;          
        END IF;
      END IF;
    
    END IF;  
       --add by baochh 2011-11-16增加对客户性质小类与所对应的售达方小类是否一致
   if ls_operatetype='CREATE' and l_hm_apply_customer.partner_function IN ('SH','JCSH','PY') 
    and l_hm_apply_customer.account_group in ('0280','0380')   THEN 
      
      select  count(*)
      into  temp_count
      from  hm_customers s 
      where s.customer_number=l_hm_apply_customer.sold_to_party
      and   s.industry_class=l_hm_apply_customer.Industry_Class;
      
      IF temp_count = 0 THEN 
       
          retcode := 'E';
          retmsg := '该客户所对应的客户性质小类与售达方的客户性质小类不一致!';
          rollback;
          return;
        END IF;
    end if;
     ---add baochh20120514 增加对所操作的客户状态进行限制
     if ls_operatetype='EXTEND'  THEN 
      
      select  count(*)
      into  temp_count
      from  hm_customers s 
      where s.customer_number=l_hm_apply_customer.Customer_Number
      and   s.DELETE_FLAG='0';
      
      IF temp_count = 0 THEN 
       
          retcode := 'E';
          retmsg := '该客户已经失效，请查看!';
          rollback;
          return;
        END IF;
    end if;
    --管理户视图校验
    IF l_hm_apply_customer.view_subcompany_x = 'X' THEN

      IF l_hm_apply_customer.view_extend_x is null then
        retcode := 'E';
        retmsg := '新建业务时：当管理户信息存在时，扩展视图也需要维护!';
        rollback;
        return;
      end if;

      if ls_operatetype = 'CREATE' THEN
        
        if ( l_hm_apply_customer.manage_customer is not null and
             l_hm_apply_customer.branch_company_code is not null and
             l_hm_apply_customer.manage_customer <> l_hm_apply_customer.branch_company_code ) or
           ( l_hm_apply_customer.manage_customer is null and
             l_hm_apply_customer.branch_company_code is not null ) or
           ( l_hm_apply_customer.manage_customer is not null and
             l_hm_apply_customer.branch_company_code is null ) 
           then
          retcode := 'E';
          retmsg := '新建业务时：管理户信息视图与扩展视图的管理户编码不相同!';
          rollback;
          return; 
        end if;

      ELSIF ls_operatetype IN ('UPDATE','CHANGE') THEN
        if l_hm_apply_customer.manage_customer_x is null then
          retcode := 'E';
          retmsg := '新建业务时：当管理户信息存在时，扩展视图的管理户字段需要被置为待更新!';
          rollback;
          return; 
        end if;
        
        if ( l_hm_apply_customer.manage_customer is not null and
             l_hm_apply_customer.branch_company_code is not null and
             l_hm_apply_customer.manage_customer <> l_hm_apply_customer.branch_company_code ) or
           ( l_hm_apply_customer.manage_customer is not null and
             l_hm_apply_customer.branch_company_code is null ) 
           then
          retcode := 'E';
          retmsg := '更新业务时：当管理户信息存在时，则要求扩展视图的管理户编码为空或与管理户信息视图的编码相同!';
          rollback;
          return; 
        end if;        
        
      END IF;
    ELSE --l_hm_apply_customer.view_subcompany_x <> 'X' THEN
      IF l_hm_apply_customer.view_extend_x IS NOT  null then
        IF ls_operatetype = 'CREATE' AND 
           l_hm_apply_customer.partner_function IN ('SH','JCSH','SP') AND
           l_hm_apply_customer.manage_customer IS NULL THEN
          retcode := 'E';
          retmsg := '创建送达方和售达方时，管理户信息需要指定或维护创建!';
          rollback;
          return;
        END IF;
      END if;
    end if;
    
    --根据客户编码，获取当然申请对应主数据条目
    FOR cur_rows IN (SELECT * FROM hm_customers WHERE customer_number = l_hm_apply_customer.customer_number)
    LOOP
      l_hm_customers := cur_rows;
    END LOOP;


    --000 账户组，客户名，客户编码 提前校验
    
  ----ACCOUNT_GROUP------------------------------start
    --确认待校验的值，有业务相关性
    l_hm_apply_customer.ACCOUNT_GROUP := upper(trim(l_hm_apply_customer.ACCOUNT_GROUP));
    ls_fieldvalue := l_hm_apply_customer.ACCOUNT_GROUP;
      
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '';
      FOR cur_rows IN cur_field_label(ls_businesscode,'ACCOUNT_GROUP')
      LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
        
      comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustomerAccountGroup', 
                                 '', '', retcode, retmsg);
      IF retcode = 'E' THEN RETURN; END IF;
      -----------------------------------------------
    END IF; -- ls_fieldvalue IS NOT NULL
    
  ----CUSTOMER_NUMBER
    --确认待校验的值，有业务相关性
    l_hm_apply_customer.CUSTOMER_NUMBER := upper(trim(l_hm_apply_customer.CUSTOMER_NUMBER));

    ls_fieldvalue := l_hm_apply_customer.customer_number;
      
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      --长度
      IF length(TRIM(ls_fieldvalue)) > 10 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue||',客户编码长度超过10!';
        RETURN;
      END IF;
        
      --有效性校验
          
      FOR cur_rows IN ( SELECT COUNT(*) rowscount,
                               MAX(row_id) row_id,
                               MAX(account_group) account_group,
                               MAX(create_apply_id) create_apply_id
                          FROM hm_customers
                         WHERE customer_number = l_hm_apply_customer.customer_number 
                         and delete_flag = '0'
                       ) 
      LOOP
        IF ls_operatetype IN ('UPDATE','CHANGE') THEN
        ----2.0更新必要性校验
          IF NOT cur_rows.account_group IS NULL AND cur_rows.account_group <> l_hm_apply_customer.account_group THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := '客户:[' || l_hm_apply_customer.customer_number || '] 主数据中账户组 [' || cur_rows.account_group ||
                       '] 不同与申请单中的账户组 [' || l_hm_apply_customer.account_group || ']!';
            RETURN;
          END IF;
          IF cur_rows.rowscount < 1 THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := '更新业务时，客户编码 ' || l_hm_apply_customer.customer_number || ' 不存在!';
            RETURN;
          END IF;

          --added by zhangbiao20110118 增加售达方的经营体与下挂颗粒度经营体的一致性校验（update 和 change 业务）
          --1011	工程 排除校验 20110126 for jibt
          IF ls_belong_yjt NOT IN ( '1011','1021') THEN--1011	工程 --1021 电子商务
          /**
            FOR cur_sparea_jyt IN ( SELECT DISTINCT
                                           --C.CUSTOMER_NUMBER,
                                           --C.CUST_PARTNER_SUBJECT_ID,
                                           --A.MANAGE_CUSTOMER,
                                           AD.SALES_MANAGER_CODE
                                      FROM (SELECT T.CUSTOMER_NUMBER,
                                                   T.CUST_ROW_ID,
                                                   T.CUST_PARTNER_TYPE,
                                                   T.CUST_PARTNER_SUBJECT_ID
                                              FROM VIEW_CUST_PARTNER_ALL T
                                             WHERE T.CUST_DELETE_FLAG = '0'
                                               AND T.SALES_DELETE_FLAG = '0'
                                               AND T.PARTNER_DELETE_FLAG = '0'
                                               AND T.SUB_CUSTOMER_DELETE_FLAG = '0'
                                               AND T.CUST_PARTNER_TYPE = 'SH'
                                               AND T.CUSTOMER_NUMBER = l_hm_apply_customer.customer_number ) C,
                                           HM_CUST_ADDITIONAL_DATA A,
                                           HM_CUST_SUB_COMPANY SC,
                                           HM_AREA_DATA AD
                                     WHERE C.CUST_ROW_ID = A.CUSTOMER_ID
                                       AND A.MANAGE_CUSTOMER = SC.BRANCH_COMPANY_CODE
                                       AND SC.AREA_CODE = AD.AREA_CODE

                                  )
            LOOP
              IF ls_belong_yjt <> cur_sparea_jyt.SALES_MANAGER_CODE THEN
                ROLLBACK;
                retcode := 'E';
                retmsg  := '更新业务时，客户编码 ' || l_hm_apply_customer.customer_number || ' 的责任经营体 '||ls_belong_yjt||' 与其下属颗粒度经营体 '||cur_sparea_jyt.SALES_MANAGER_CODE||' 不同，请先修改颗粒度经营体!';
                RETURN;
              END IF;
            END LOOP;
            **/
            null;
          END IF;
        ELSIF ls_operatetype = 'CREATE' THEN
          IF cur_rows.rowscount > 0 THEN
            IF cur_rows.create_apply_id IS NULL OR cur_rows.create_apply_id <> l_hm_apply_customer.apply_id THEN
              ROLLBACK;
              retcode := 'E';
              retmsg  := '创建业务时，客户编码 ' || l_hm_apply_customer.customer_number || ' 已存在!';
              RETURN;
            END IF;
          END IF;
        END IF;
      END LOOP;
      -----------------------------------------------
    END IF; -- ls_fieldvalue IS NOT NULL
  ----ACCOUNT_GROUP------------------------------end
    
  ----CUSTOMER_NAME------------------------------start
    --确认待校验的值，有业务相关性

    l_hm_apply_customer.CUSTOMER_NAME := trim(l_hm_apply_customer.CUSTOMER_NAME);

    IF ( ls_operatetype = 'CREATE' ) OR
       ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.customer_name_x) = 'X' ) THEN
      ls_fieldvalue := l_hm_apply_customer.customer_name;
    ELSE
      ls_fieldvalue := '';
    END IF;   
      
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      --名称长度
      IF length(TRIM(ls_fieldvalue)) > 40 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue||'，客户名称长度超过40!';
        RETURN;
      END IF;
        
      --名称内容闸口

      --唯一性校验
      IF ls_operatetype = 'CREATE' and (l_hm_apply_customer.account_group='0280' or l_hm_apply_customer.account_group='0380') THEN
        FOR cur_rows IN (  SELECT COUNT(*) rowscount,
                                 MAX(customer_number) customer_number,
                                 MAX(create_apply_id) create_apply_id
                            FROM hm_customers
                           WHERE customer_name1 = l_hm_apply_customer.customer_name
                             AND account_group = l_hm_apply_customer.account_group 
                             and (account_group in ('0280','0210') or account_group in ('0380'))
                             --and delete_flag = '0'
                         ) 
        LOOP
         IF cur_rows.rowscount > 0 THEN
            --name 已存在
            IF cur_rows.create_apply_id IS NULL or 
               cur_rows.create_apply_id <> l_hm_apply_customer.apply_id THEN
              retcode := 'E';
              retmsg  := '创建业务时，客户名称 [' || l_hm_apply_customer.customer_name || '] 已经存在于主数据 [' ||
                         cur_rows.customer_number || ']!';
              RETURN;
            END IF; 
          END IF;
        END LOOP;


          FOR cur_rows IN (  SELECT COUNT(*) rowscount,
                                   MIN(a.apply_id) apply_id,
                                   MIN(b.item_no) item_no
                              FROM hm_applys         a,
                                   hm_apply_customer b
                             WHERE a.apply_id = b.apply_id
                               AND b.customer_name = l_hm_apply_customer.customer_name
                               and  a.account_group =b.account_group  --add by baochh 2011-11-30
                               and (a.account_group in ('0280') or a.account_group in ('0380'))
                               AND a.active_flag = '1'
                               AND a.delete_flag = '0'
                               and b.delete_flag = '0'
                               AND a.audit_flag < '2'
                               AND a.business_code LIKE 'CST-CREATE%'
                              AND A.LAST_AUDIT_RESULT <> 'N'--ADD 20110831
                              
                              
                              
                    /*                                AND (b.apply_id <>
                                    l_hm_apply_customer.apply_id OR
                                    l_hm_apply_customer.apply_id is null)*/
                              AND b.row_id <> l_hm_apply_customer.row_id
                         )
         LOOP
          IF cur_rows.rowscount > 0 THEN
            retcode := 'E';
             retmsg  := '创建业务时，客户名称 [' || l_hm_apply_customer.customer_name || '] 已经存在于申请 [' ||
                       cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
            RETURN;
            END IF;
          END LOOP;
        --END IF;
          
    END IF;      
      -----------------------------------------------
   END IF; -- ls_fieldvalue IS NOT NULL
  ----CUSTOMER_NAME------------------------------end

    --0 基础校验(必输性校验)

    str_sql := ' select * from hm_business_fields '||
               ' where business_code = :ls_businesscode '||--'''|| ls_businesscode_create ||''' '||
               ' AND active_flag =''1'' AND must_input_flag =''1'' AND delete_flag =''0'' ';
               
    IF l_hm_business.refence_apply_table = 'HM_APPLY_CUSTOMER' THEN           
      str_sql := str_sql||' AND ( ';
      str_sql := str_sql||'      ( '''||l_hm_apply_customer.view_base_x||''' = ''X'' AND view_name = ''BASE'' ) OR ';
      str_sql := str_sql||'      ( '''||l_hm_apply_customer.view_company_x||''' = ''X'' AND view_name = ''COMPANY'' ) OR ';
      str_sql := str_sql||'      ( '''||l_hm_apply_customer.view_sales_x||''' = ''X'' AND view_name = ''SALES'' ) OR ';
      str_sql := str_sql||'      ( '''||l_hm_apply_customer.view_extend_x||''' = ''X'' AND view_name = ''EXTEND'' ) OR ';
      str_sql := str_sql||'      ( '''||l_hm_apply_customer.view_subcompany_x||''' = ''X'' AND view_name = ''SUBCOMPANY'' ) ';
      str_sql := str_sql||'     ) ' ;
    END IF;         

    str_sql := str_sql||' ORDER BY order_by ' ;
    
    retmsg := '';
    
    ----COMMIT;
    
    OPEN cur_type_rows FOR str_sql USING ls_businesscode;
    LOOP
      FETCH cur_type_rows INTO l_hm_business_fields;
      EXIT WHEN cur_type_rows%NOTFOUND;
      
      IF upper(l_hm_business_fields.field_name) = 'CUSTOMER_NUMBER' AND
         upper(ls_operatetype) IN ('UPDATE','EXTEND','CHANGE') THEN
        quy_sql := ' SELECT '||l_hm_business_fields.field_name||', '||
                            ' ''X'' '||l_hm_business_fields.field_name||'_x '||
                   ' INTO :ls_value, :ls_value_x FROM hm_apply_customer'||in_tablename_suffix||
                   ' WHERE row_id = :in_row_id';       
      ELSE
        quy_sql := ' SELECT '||l_hm_business_fields.field_name||', '||
                               l_hm_business_fields.field_name||'_x '||
                   ' INTO :ls_value, :ls_value_x FROM hm_apply_customer'||in_tablename_suffix||
                   ' WHERE row_id = :in_row_id';
      END IF;
      
      EXECUTE IMMEDIATE quy_sql  INTO ls_value, ls_value_x USING l_hm_apply_customer.row_id;
      
      --初始化临时变量
      l_retcode_temp := 'S';
      
      IF upper(ls_operatetype) IN ('CREATE','EXTEND') THEN
        IF TRIM(ls_value) IS NULL THEN
          l_retcode_temp := 'E';
        END IF;
      ELSIF upper(ls_operatetype) IN ( 'UPDATE','CHANGE') THEN
        --否则为更新，只需检查相应字段即可
        IF TRIM(ls_value) IS NULL AND TRIM(ls_value_x) = 'X' THEN
          l_retcode_temp := 'E';
        END IF;
      END IF;      
      
      IF l_retcode_temp = 'E' THEN
        retcode := 'E';
        retmsg  := retmsg || ' / ' || l_hm_business_fields.field_label_en;
      END IF;          
   
    END LOOP;
    CLOSE cur_type_rows;
    
    IF retcode = 'E' THEN
      retmsg := l_hm_apply_customer.customer_name || ', 以下字段值在此业务中不能为空：'||retmsg;
      RETURN;
    END IF;
    
    --1 特殊业务校验(与自身数据相关性)-----------------

    for cur_business_fields in (select * from hm_business_fields where business_code = ls_businesscode 
                                                        and audit_version = '0000'
                                                        and active_flag = '1' and delete_flag = '0'
                                                        and field_name not in ( 'ACCOUNT_GROUP','CUSTOMER_NUMBER','CUSTOMER_NAME' )
                                                        order by order_by )
    loop
      in_checkname := cur_business_fields.field_name;
      ----1.1 此处进行CodeList准确性校验

      ----CUSTOMER_COUNTRY
      IF in_checkname = 'CUSTOMER_COUNTRY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_COUNTRY := upper(trim(l_hm_apply_customer.CUSTOMER_COUNTRY));

        ls_fieldvalue := l_hm_apply_customer.CUSTOMER_COUNTRY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUSTOMER_COUNTRY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'Country', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUSTOMER_COUNTRY'
          
      ----REGION
      IF in_checkname = 'REGION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.REGION := upper(trim(l_hm_apply_customer.REGION));

        ls_fieldvalue := l_hm_apply_customer.REGION;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'REGION')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'Region', 
                                     l_hm_apply_customer.customer_country, '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'REGION'
      
      ----LANGUAGE
      IF in_checkname = 'LANGUAGE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.LANGUAGE := upper(trim(l_hm_apply_customer.LANGUAGE));

        ls_fieldvalue := l_hm_apply_customer.LANGUAGE;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'LANGUAGE')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'LanguageType', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'LANGUAGE'

      ----CUSTOMER_CLASS
      IF in_checkname = 'CUSTOMER_CLASS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_CLASS := upper(trim(l_hm_apply_customer.CUSTOMER_CLASS));

        ls_fieldvalue := l_hm_apply_customer.CUSTOMER_CLASS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUSTOMER_CLASS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustomerCategory', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUSTOMER_CLASS'
      
      ----INDUSTRY
      IF in_checkname = 'INDUSTRY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.INDUSTRY := upper(trim(l_hm_apply_customer.INDUSTRY));

        ls_fieldvalue := l_hm_apply_customer.INDUSTRY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'INDUSTRY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'IndustryCategory', 
                             '', '', retcode, retmsg); 

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'INDUSTRY'
          
      ----COMPANY_TYPE
      IF in_checkname = 'COMPANY_TYPE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.COMPANY_TYPE := upper(trim(l_hm_apply_customer.COMPANY_TYPE));

        ls_fieldvalue := l_hm_apply_customer.COMPANY_TYPE;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'COMPANY_TYPE')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CompanyType', 
                             '', '', retcode, retmsg); 

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'COMPANY_TYPE'
          
      ----NILES_MARK
      IF in_checkname = 'NILES_MARK' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.NILES_MARK := upper(trim(l_hm_apply_customer.NILES_MARK));

        ls_fieldvalue := l_hm_apply_customer.NILES_MARK;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'NILES_MARK')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'NilesMark', 
                             '', '', retcode, retmsg); 

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'NILES_MARK'
      
      ----ESTIMATE_STATUS
      IF in_checkname = 'ESTIMATE_STATUS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.ESTIMATE_STATUS := upper(trim(l_hm_apply_customer.ESTIMATE_STATUS));

        ls_fieldvalue := l_hm_apply_customer.ESTIMATE_STATUS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'ESTIMATE_STATUS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'MarketLevel', 
                             '', '', retcode, retmsg); 

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'ESTIMATE_STATUS'
      
      ----TAXDOC_TYPE
      IF in_checkname = 'TAXDOC_TYPE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.TAXDOC_TYPE := upper(trim(l_hm_apply_customer.TAXDOC_TYPE));

        ls_fieldvalue := l_hm_apply_customer.TAXDOC_TYPE;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'TAXDOC_TYPE')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'TaxDocType', 
                             '', '', retcode, retmsg); 

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'TAXDOC_TYPE'      
      
      ----CONTACT_PERSON
      IF in_checkname = 'CONTACT_PERSON' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CONTACT_PERSON := trim(l_hm_apply_customer.CONTACT_PERSON);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.CONTACT_PERSON_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.CONTACT_PERSON;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 35 THEN
            retcode := 'E';
            retmsg  := '客户联系人信息长度超过35!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CONTACT_PERSON'
      
      ----PHONE_NUMBER1
      IF in_checkname = 'PHONE_NUMBER1' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.PHONE_NUMBER1 := trim(l_hm_apply_customer.PHONE_NUMBER1);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.PHONE_NUMBER1_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.PHONE_NUMBER1;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 16 THEN
            retcode := 'E';
            retmsg  := '客户联系人电话信息长度超过16!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'PHONE_NUMBER1'


      ----LEGAL_PERSON
      IF in_checkname = 'LEGAL_PERSON' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.LEGAL_PERSON := trim(l_hm_apply_customer.LEGAL_PERSON);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.LEGAL_PERSON_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.LEGAL_PERSON;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 10 THEN
            retcode := 'E';
            retmsg  := '客户法人信息长度超过10!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'LEGAL_PERSON'

      ----VAT_REG_NO
      IF in_checkname = 'VAT_REG_NO' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.VAT_REG_NO := trim(l_hm_apply_customer.VAT_REG_NO);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.VAT_REG_NO_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.VAT_REG_NO;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 30 THEN
            retcode := 'E';
            retmsg  := '客户税号信息超长!';
            RETURN;
          END IF;
    
 ----add baochh 20110718 增加对税号的控制
    
      --唯一性校验
   /*   IF ( ls_operatetype = 'CREATE'  OR
            ls_operatetype IN ('UPDATE','CHANGE') ) and l_hm_apply_customer.partner_function='SP' THEN
               FOR cur_rows IN (SELECT COUNT(s.row_id) rowscount,
                                 MAX(s.customer_number) customer_number,
                                 MAX(s.create_apply_id) create_apply_id
               
                           FROM VIEW_CUST_ACCOUNT_SP P,hm_customers S
                          WHERE P.customer_number = S.customer_number 
                          AND  S.tax_code = l_hm_apply_customer.VAT_REG_NO
                          and  p.account_group =l_hm_apply_customer.account_group
                          and delete_flag = '0'
                          and p.account_group in ('0280','0110')
                          and ( S.CUSTOMER_FLAG NOT IN ('SX') OR S.customer_flag is null )  
                            )
         LOOP
          IF cur_rows.rowscount > 0 THEN 
            --增值税登记号 已存在
           IF cur_rows.create_apply_id IS NULL or
              cur_rows.create_apply_id <> l_hm_apply_customer.apply_id THEN
              retcode := 'E';
              retmsg  := '创建业务时，增值税登记号 [' ||
                         l_hm_apply_customer.VAT_REG_NO ||
                         '] 已经存在于主数据 [' ||cur_rows.customer_number || ']!';
              RETURN;
            END IF;
          END IF;
        END LOOP;
       end if;
      */
          
          -----------------------------------------------
       END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'VAT_REG_NO'
-------------------------------------------------------------------------------------------end 
      
      ----BANK_COUNTRY
      IF in_checkname = 'BANK_COUNTRY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.BANK_COUNTRY := upper(trim(l_hm_apply_customer.BANK_COUNTRY));

        ls_fieldvalue := l_hm_apply_customer.BANK_COUNTRY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'BANK_COUNTRY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'Country', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'BANK_COUNTRY'
      
      ----BANK_KEY
      IF in_checkname = 'BANK_KEY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.BANK_KEY := trim(l_hm_apply_customer.BANK_KEY);

        ls_fieldvalue := l_hm_apply_customer.BANK_KEY;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          FOR cur_bank_key IN (SELECT COUNT(*) row_count FROM hm_banks t WHERE t.bank_branch_code = ls_fieldvalue AND t.delete_flag = '0' )
          LOOP
            IF cur_bank_key.row_count < 1 THEN
              retcode := 'E';
              retmsg  := '客户所选银行编码信息不存在，请检查!';
              RETURN;
            END IF;
          END LOOP;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'BANK_KEY'
      
      
      ----BANK_ACCOUNT
      IF in_checkname = 'BANK_ACCOUNT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.BANK_ACCOUNT := upper(trim(l_hm_apply_customer.BANK_ACCOUNT));

        ls_fieldvalue := l_hm_apply_customer.BANK_ACCOUNT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_fieldvalue := ls_fieldvalue;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'BANK_COUNTRY'
      
      ----RECON_ACCOUNT
      IF in_checkname = 'RECON_ACCOUNT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.RECON_ACCOUNT := upper(trim(l_hm_apply_customer.RECON_ACCOUNT));

        ls_fieldvalue := l_hm_apply_customer.RECON_ACCOUNT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'RECON_ACCOUNT')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'ReconcileAccount', 
                                     'D', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'RECON_ACCOUNT'
      
      ----SORT_KEY
      IF in_checkname = 'SORT_KEY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SORT_KEY := upper(trim(l_hm_apply_customer.SORT_KEY));

        ls_fieldvalue := l_hm_apply_customer.SORT_KEY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'SORT_KEY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'OrderCode', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SORT_KEY'
      
      ----TERMS_OF_PAYMENT
      IF in_checkname = 'TERMS_OF_PAYMENT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.TERMS_OF_PAYMENT := upper(trim(l_hm_apply_customer.TERMS_OF_PAYMENT));

        ls_fieldvalue := l_hm_apply_customer.TERMS_OF_PAYMENT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'TERMS_OF_PAYMENT')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'PayTerm', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'TERMS_OF_PAYMENT'
      
      ----PAYMENT_METHODS
      IF in_checkname = 'PAYMENT_METHODS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.PAYMENT_METHODS := upper(trim(l_hm_apply_customer.PAYMENT_METHODS));

        ls_fieldvalue := l_hm_apply_customer.PAYMENT_METHODS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'PAYMENT_METHODS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'PayMethod', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'PAYMENT_METHODS'

      ----PREFERENCE_FLAG
      IF in_checkname = 'PREFERENCE_FLAG' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.PREFERENCE_FLAG := upper(trim(l_hm_apply_customer.PREFERENCE_FLAG));

        ls_fieldvalue := l_hm_apply_customer.PREFERENCE_FLAG;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'PREFERENCE_FLAG')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'PreferenceFlag', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'PREFERENCE_FLAG'  
      
      ----DISCOUNT_PRINT_FLAG
      IF in_checkname = 'DISCOUNT_PRINT_FLAG' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.DISCOUNT_PRINT_FLAG := upper(trim(l_hm_apply_customer.DISCOUNT_PRINT_FLAG));

        ls_fieldvalue := l_hm_apply_customer.DISCOUNT_PRINT_FLAG;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'DISCOUNT_PRINT_FLAG')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'DiscountPrintFlag', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'DISCOUNT_PRINT_FLAG'
          
      ----SALES_DISTRICT
      IF in_checkname = 'SALES_DISTRICT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SALES_DISTRICT := upper(trim(l_hm_apply_customer.SALES_DISTRICT));

        ls_fieldvalue := l_hm_apply_customer.SALES_DISTRICT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'SALES_DISTRICT')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'SalesArea', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SALES_DISTRICT'
          
      ----SALES_GROUP
      IF in_checkname = 'SALES_GROUP' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SALES_GROUP := upper(trim(l_hm_apply_customer.SALES_GROUP));

        ls_fieldvalue := l_hm_apply_customer.SALES_GROUP;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'SALES_GROUP')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'SalesGroup', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SALES_GROUP'
          
      ----CURRENCY
      IF in_checkname = 'CURRENCY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CURRENCY := upper(trim(l_hm_apply_customer.CURRENCY));

        ls_fieldvalue := l_hm_apply_customer.CURRENCY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CURRENCY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'Currency', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CURRENCY'        

      ----PRICE_GROUP
      IF in_checkname = 'PRICE_GROUP' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.PRICE_GROUP := upper(trim(l_hm_apply_customer.PRICE_GROUP));

        ls_fieldvalue := l_hm_apply_customer.PRICE_GROUP;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'PRICE_GROUP')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'PriceGroup', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'PRICE_GROUP'
      
      ----CUSTOMER_SUMMARY_GROUP
      IF in_checkname = 'CUSTOMER_SUMMARY_GROUP' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_SUMMARY_GROUP := upper(trim(l_hm_apply_customer.CUSTOMER_SUMMARY_GROUP));

        ls_fieldvalue := l_hm_apply_customer.CUSTOMER_SUMMARY_GROUP;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUSTOMER_SUMMARY_GROUP')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustomerStatGroup', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUSTOMER_SUMMARY_GROUP'
      

      ----CUSTOMER_PRICE_PROCEDURE
      IF in_checkname = 'CUSTOMER_PRICE_PROCEDURE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_PRICE_PROCEDURE := upper(trim(l_hm_apply_customer.CUSTOMER_PRICE_PROCEDURE));

        ls_fieldvalue := l_hm_apply_customer.CUSTOMER_PRICE_PROCEDURE;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUSTOMER_PRICE_PROCEDURE')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'FixPriceProcess', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUSTOMER_PRICE_PROCEDURE'    

      ----DELIVERING_PLANT
      IF in_checkname = 'DELIVERING_PLANT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.DELIVERING_PLANT := upper(trim(l_hm_apply_customer.DELIVERING_PLANT));

        ls_fieldvalue := l_hm_apply_customer.DELIVERING_PLANT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'DELIVERING_PLANT')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'DeliveringPlant', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'DELIVERING_PLANT'
      

      ----ACCT_ASSGMT_GROUP
      IF in_checkname = 'ACCT_ASSGMT_GROUP' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.ACCT_ASSGMT_GROUP := upper(trim(l_hm_apply_customer.ACCT_ASSGMT_GROUP));

        ls_fieldvalue := l_hm_apply_customer.ACCT_ASSGMT_GROUP;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'ACCT_ASSGMT_GROUP')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'AccountDistributeGroup', 
                                     '', '', retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'ACCT_ASSGMT_GROUP'
      

      ----TAX_CLASSIFICATION
      IF in_checkname = 'TAX_CLASSIFICATION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.TAX_CLASSIFICATION := upper(trim(l_hm_apply_customer.TAX_CLASSIFICATION));

        ls_fieldvalue := l_hm_apply_customer.TAX_CLASSIFICATION;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'TAX_CLASSIFICATION')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'TaxClassification', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'TAX_CLASSIFICATION'
      
      ----SHIP_CONDITION
      IF in_checkname = 'SHIP_CONDITION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SHIP_CONDITION := upper(trim(l_hm_apply_customer.SHIP_CONDITION));

        ls_fieldvalue := l_hm_apply_customer.SHIP_CONDITION;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'SHIP_CONDITION')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'ShippingCondition', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SHIP_CONDITION'
      
      ----INDUSTRY_CLASS
      IF in_checkname = 'INDUSTRY_CLASS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.INDUSTRY_CLASS := upper(trim(l_hm_apply_customer.INDUSTRY_CLASS));

        ls_fieldvalue := l_hm_apply_customer.INDUSTRY_CLASS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'INDUSTRY_CLASS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'IndustryClass2', 
                                     ls_belong_yjt, '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;
          
          --根据小渠道 确定大渠道 
          FOR cur_rows2 IN (SELECT * FROM hm_fnd_values t
                           WHERE t.value_set_id = 'IndustryClass'
                           AND t.value = l_hm_apply_customer.INDUSTRY_CLASS ) 
          loop
            l_hm_apply_customer.customer_class := cur_rows2.parent_value_low;
          END LOOP;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'INDUSTRY_CLASS'

      ----IS_STOREFRONT
      IF in_checkname = 'IS_STOREFRONT' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.IS_STOREFRONT := upper(trim(l_hm_apply_customer.IS_STOREFRONT));

        ls_fieldvalue := l_hm_apply_customer.IS_STOREFRONT;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'IS_STOREFRONT')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'IsStoreFront', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;
          
          ----PARENT_COMPANY_CODE
          IF ls_fieldvalue = '2' THEN
          /**************暂时先不校验客户为门店时上级公司代码Lvdecheng 2012-05-15********************/
          /**  **/
            IF l_hm_apply_customer.operate_type = 'CREATE' OR 
               ( l_hm_apply_customer.operate_type IN ('UPDATE','CHANGE') AND
                 l_hm_apply_customer.Parent_Company_Code_x = 'X' ) THEN
              IF TRIM(l_hm_apply_customer.Parent_Company_Code) IS NULL THEN
                RETCODE := 'E';
                RETMSG := '当客户为门店时，必须选择上级公司代码!';
                RETURN;
              END IF;
            END IF;
          END IF;
          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'IS_STOREFRONT'
      
      ----IS_SELLER
      IF in_checkname = 'IS_SELLER' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.IS_SELLER := upper(trim(l_hm_apply_customer.IS_SELLER));

        ls_fieldvalue := l_hm_apply_customer.IS_SELLER;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'IS_SELLER')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'IsSeller', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'IS_SELLER'

      ----SALES_REGION
      IF in_checkname = 'SALES_REGION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SALES_REGION := upper(trim(l_hm_apply_customer.SALES_REGION));

        ls_fieldvalue := l_hm_apply_customer.SALES_REGION;
        
        --add 20100420 如果是门店，则必填
        /*IF l_hm_apply_customer.operate_type = 'CREATE' and l_hm_apply_customer.is_storefront in ('2','3') then
           IF ls_fieldvalue is null then
              retcode := 'E';
              retmsg := '门店必须选择行政区域';
               RETURN;
           end if;
        end if;*/
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL AND l_hm_apply_customer.account_group not in ( '0260' ) THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'SALES_REGION')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'SalesRegions', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SALES_REGION'

      ----CUST_PROPERTY
      IF in_checkname = 'CUST_PROPERTY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUST_PROPERTY := upper(trim(l_hm_apply_customer.CUST_PROPERTY));

        ls_fieldvalue := l_hm_apply_customer.CUST_PROPERTY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUST_PROPERTY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustProperty', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUST_PROPERTY'
      
      ----CUST_TYPE
      IF in_checkname = 'CUST_TYPE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUST_TYPE := upper(trim(l_hm_apply_customer.CUST_TYPE));

        ls_fieldvalue := l_hm_apply_customer.CUST_TYPE;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUST_TYPE')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustType', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUST_TYPE'
      
      ----CSG_KEYACCOUNT_FLAG
      IF in_checkname = 'CSG_KEYACCOUNT_FLAG' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CSG_KEYACCOUNT_FLAG := upper(trim(l_hm_apply_customer.CSG_KEYACCOUNT_FLAG));

        ls_fieldvalue := l_hm_apply_customer.CSG_KEYACCOUNT_FLAG;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF ls_fieldvalue NOT IN ('0','1') THEN
            retcode := 'E';
            retmsg := '大客户标记必须为 [0,1]';
            RETURN;
          END IF;         
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CSG_KEYACCOUNT_FLAG'

      ----CSG_KEYACCOUNT_CATEGORY
      IF in_checkname = 'CSG_KEYACCOUNT_CATEGORY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CSG_KEYACCOUNT_CATEGORY := upper(trim(l_hm_apply_customer.CSG_KEYACCOUNT_CATEGORY));

        ls_fieldvalue := l_hm_apply_customer.CSG_KEYACCOUNT_CATEGORY;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CSG_KEYACCOUNT_CATEGORY')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'KeyAccountCategory', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CSG_KEYACCOUNT_CATEGORY'
      
      ----CSG_KEYACCOUNT_CLASS
      IF in_checkname = 'CSG_KEYACCOUNT_CLASS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CSG_KEYACCOUNT_CLASS := upper(trim(l_hm_apply_customer.CSG_KEYACCOUNT_CLASS));

        ls_fieldvalue := l_hm_apply_customer.CSG_KEYACCOUNT_CLASS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CSG_KEYACCOUNT_CLASS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'KeyAccountClass', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CSG_KEYACCOUNT_CLASS'
      
      ----CUST_FUNCTIONS
      IF in_checkname = 'CUST_FUNCTIONS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUST_FUNCTIONS := upper(trim(l_hm_apply_customer.CUST_FUNCTIONS));

        ls_fieldvalue := l_hm_apply_customer.CUST_FUNCTIONS;
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode,'CUST_FUNCTIONS')
          LOOP ls_field_label_en := cur_rows.field_label_en; END LOOP;
          comm_util.prc_getfndvalues(ls_field_label_en, ls_fieldvalue, 'CustFunctions', 
                                     '', '', retcode, retmsg);        

          IF retcode = 'E' THEN RETURN; END IF;          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUST_FUNCTIONS'
      
      ----1.2 此处进行特殊闸口校验

      ----NAME2
      IF in_checkname = 'NAME2' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.NAME2 := trim(l_hm_apply_customer.NAME2);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.name2_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.name2;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 40 THEN
            retcode := 'E';
            retmsg  := '客户名称2的长度超过40!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'NAME2'

      ----STREET
      IF in_checkname = 'STREET' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.STREET := trim(l_hm_apply_customer.STREET);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.street_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.street;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 60 THEN
            retcode := 'E';
            retmsg  := '客户的街道信息长度超过60!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'STREET'

      ----CITY
      IF in_checkname = 'CITY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CITY := upper(trim(l_hm_apply_customer.CITY));

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.CITY_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.CITY;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 40 THEN
            retcode := 'E';
            retmsg  := '客户的城市信息长度超过40!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CITY'

      ----SEARCH_TERMS
      IF in_checkname = 'SEARCH_TERMS' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SEARCH_TERMS := upper(trim(l_hm_apply_customer.SEARCH_TERMS));

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.search_terms_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.search_terms;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 10 THEN
            retcode := 'E';
            retmsg  := '客户检索项信息长度超过10!';
            RETURN;
          END IF;

          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SEARCH_TERMS'

      ----TELEPHONE
      IF in_checkname = 'TELEPHONE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.TELEPHONE := upper(trim(l_hm_apply_customer.TELEPHONE));

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.TELEPHONE_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.TELEPHONE;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 16 THEN
            retcode := 'E';
            retmsg  := '客户电话信息长度超过16!';
            RETURN;
          END IF;

          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'TELEPHONE'

      ----FAX
      IF in_checkname = 'FAX' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.FAX := upper(trim(l_hm_apply_customer.FAX));

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.FAX_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.FAX;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 16 THEN
            retcode := 'E';
            retmsg  := '客户传真信息长度超过16!';
            RETURN;
          END IF;

          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'FAX'

      ----POD_RELATION
      IF in_checkname = 'POD_RELATION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.POD_RELATION := upper(trim(l_hm_apply_customer.POD_RELATION));

        IF ( ls_operatetype in ( 'CREATE','EXTEND') ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.POD_RELATION_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.POD_RELATION;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF ls_fieldvalue <> 'X' THEN
            retcode := 'E';
            retmsg  := '客户 与 POD 处理相关 信息只能填入 [空,X]!';
            RETURN;
          END IF;

          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'POD_RELATION'
      
      ----POSTAL_CODE
      IF in_checkname = 'POSTAL_CODE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.POSTAL_CODE := upper(trim(l_hm_apply_customer.POSTAL_CODE));

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.POSTAL_CODE_x) = 'X' ) THEN
          ls_fieldvalue := l_hm_apply_customer.POSTAL_CODE;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 6 THEN
            retcode := 'E';
            retmsg  := '邮政编码长度超过6!';
            RETURN;
          END IF;

          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL 
        
      END IF; -- in_checkname = 'POSTAL_CODE'

      --CUSTOMER_MANAGER
      IF in_checkname = 'CUSTOMER_MANAGER' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_MANAGER := upper(trim(l_hm_apply_customer.CUSTOMER_MANAGER));

        IF ( ls_operatetype IN ('CREATE','EXTEND' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.CUSTOMER_MANAGER_x) = 'X' ) ) THEN
          ls_fieldvalue := lpad(l_hm_apply_customer.CUSTOMER_MANAGER,10,'0');
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
      END IF; -- in_checkname = 'CUSTOMER_MANAGER'
      
      --SOLD_TO_PARTY
      IF in_checkname = 'SOLD_TO_PARTY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.SOLD_TO_PARTY := upper(trim(l_hm_apply_customer.SOLD_TO_PARTY));

        IF ( ls_operatetype IN ('CREATE','EXTEND' ) OR
           ( ls_operatetype IN ( 'UPDATE', 'CHANGE' ) AND upper(l_hm_apply_customer.SOLD_TO_PARTY_x) = 'X' ) ) THEN
          ls_fieldvalue := l_hm_apply_customer.SOLD_TO_PARTY;
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          FOR cur_rows IN cur_business2company(l_hm_applys.business_type,l_hm_applys.dept_code,l_hm_applys.stock_flag,'SalesOrganization',l_hm_applys.partner_function)
          LOOP
            --FOR cur_rows3 IN ( SELECT count(*) row_count FROM hm_fnd_cust_rrs2salesorg t
            --                  WHERE t.SALES_ORGANIZATION = cur_rows.company_code )
            --loop                  
            --  IF cur_rows3.row_count < 1 THEN --校验出去日日顺公司
     
                FOR cur_rows2 IN ( SELECT COUNT(*) row_count FROM hm_customer_sales_data tt 
                                   WHERE tt.sales_group = cur_rows.company_code
                                   AND EXISTS ( SELECT 1 FROM hm_customers t
                                                WHERE t.row_id = tt.customer_id 
                                                AND t.customer_number = ls_fieldvalue ) 
                                   
                                 )
                LOOP
                  IF cur_rows2.row_count < 1 THEN
                    retcode := 'E';
                    retmsg := '对应售达方['||ls_fieldvalue||'],在销售区域['||cur_rows.company_code||']尚未维护销售视图信息,请先维护其销售视图信息!相关工贸['||cur_rows.trade_code||']';
                    ROLLBACK;
                    RETURN;
                  END IF;
                END LOOP;                     
             
            --  END if;
            --END loop;              
            
          END LOOP;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL        
      END IF; -- in_checkname = 'SOLD_TO_PARTY'

      ----CUSTOMER_FLAG
      IF in_checkname = 'CUSTOMER_FLAG' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.CUSTOMER_FLAG := trim(l_hm_apply_customer.CUSTOMER_FLAG);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.CUSTOMER_FLAG_x) = 'X' ) THEN
          ls_fieldvalue := TRIM(l_hm_apply_customer.CUSTOMER_FLAG);
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF ls_fieldvalue NOT IN ('SX','HS') THEN
            retcode := 'E';
            retmsg  := '伞下店标识应为 空/SX/HS!';
            RETURN;
          ELSE
            IF ls_belong_yjt NOT IN ('1005','1004') THEN
              retcode := 'E';
              retmsg  := '伞下店客户业务应在 社区店/专卖店 范围内办理!';
              RETURN;              
            END if;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'CUSTOMER_FLAG'
      
      
      ----BRANCH_CODE
      IF in_checkname = 'BRANCH_CODE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_customer.BRANCH_CODE := trim(l_hm_apply_customer.BRANCH_CODE);

        IF ( ls_operatetype = 'CREATE' ) OR
           ( ls_operatetype IN ('UPDATE','CHANGE') AND upper(l_hm_apply_customer.BRANCH_CODE_x) = 'X' ) THEN
          ls_fieldvalue := TRIM(l_hm_apply_customer.BRANCH_CODE);
        ELSE
          ls_fieldvalue := '';
        END IF;   
        
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          l_find_flag := '';
          FOR CUR_BRANCH_CODE IN (SELECT * FROM HM_FND_VALUES V WHERE V.VALUE_SET_ID='BranchCode' 
              AND V.VALUE = ls_fieldvalue)
          LOOP
            l_find_flag := 'X';
          END LOOP;
          
          if l_find_flag <> 'X' THEN
            retcode := 'E';
            retmsg  := ls_fieldvalue||'不是合法的工贸编码!';
            RETURN;
          END IF;
          
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'BRANCH_CODE'
      
--------------------------------------------------------------------------------------
------此处以上不断添加字段的验证闸口，字段顺序无需考虑，但最好保证一个字段只出现一次效验代码段
--------------------------------------------------------------------------------------      
    end loop; --all field
    
    ----1.3 此处进行特别校验        
    
    --数据微调反馈
    v_hm_apply_customer := l_hm_apply_customer;

    --创建业务发主数据临时码
    if v_hm_apply_customer.view_base_x = 'X' THEN
      prc_apply_tmpcode('CUSTOMER_NUMBER',v_hm_apply_customer,retcode,retmsg);
      IF retcode = 'E' THEN RETURN; END IF;
    END IF;
    IF v_hm_apply_customer.View_Subcompany_x = 'X' then
      prc_apply_tmpcode('MANAGER_CUSTOMER',v_hm_apply_customer,retcode,retmsg);
      IF retcode = 'E' THEN RETURN; END IF;
    end if;
    
    --用v_hm_apply_customer更新数据库
    prc_input_type2db('', v_hm_apply_customer,retcode,retmsg);

	EXCEPTION
		WHEN OTHERS THEN
			retcode := 'E';
			--retmsg  := 'The need for input validation error:' || SQLERRM;
      retmsg  := 
             chr(10)||'['||comm_util.f_get_current_procname||']:'||SQLERRM||
             chr(10)||'AT SOURCE LINE:'||
             chr(10)||comm_util.sys_get_error_source( dbms_utility.format_error_backtrace ,0);		
	END prc_input_allcheck;  

	/****************************************************************
  功能描述：根据批次号将导入的数据从HM_APPLY_CUSTOMER_IMP导入HM_APPLY_CUSTOMER
            及HM_APPLYS中
  作者：    zhangbiao
  时间：    2009-03-26       
       
  输入参数说明： IN_ACTION_BATCH_ID    批次号码
                 IN_APPLY_ID           申请单ID
                 IN_TABLE_NAME         导入表名
                 IN_COLUMN_NAME        导入字段名
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。首先判断必输项（根据HM_BUSINESS_FIELDS_REQUIED获取必输字段）。
       2。判断是全部导入还是单字段导入（IN_COLUMN_NAME非空则为单字段导入）。
       3。根据输入参数IN_APPLY_ID判断是更新还是新增。
       4。对于新增数据（IN_APPLY_ID为空）,分别向HM_APPLYS和HM_APPLY_CUSTOMER分发数据。
       5。对于更新数据（IN_APPLY_ID非空）,仅向HM_APPLY_CUSTOMER分发数据,同时更新HM_APPLYS表。
       6,内部调用 prc_input_allcheck
  ****************************************************************/
	PROCEDURE prc_applys_import
	(
		in_action_batch_id IN VARCHAR2,
		in_apply_id        IN VARCHAR2,
		in_business_code   IN VARCHAR2,
		in_applyby         IN VARCHAR2,
		in_applyemail      IN VARCHAR2,
		retcode            OUT VARCHAR2,
		retmsg             OUT VARCHAR2
	) IS
		str_sql   VARCHAR2(250); --查询SQL
		--str_rowid VARCHAR2(50); --ROWID
		TYPE cur_type IS REF CURSOR;
		cur_view_table          cur_type;
    l_apply                 hm_applys%ROWTYPE;
		l_apply_customer        hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
		l_hm_apply_customer_tpt hm_apply_customer_tpt%ROWTYPE;
	
		--ls_table_name     VARCHAR2(20);
		rows_customers    INTEGER := 0;
		li_count          INTEGER := 0;
		li_times          INTEGER := 0;
		ls_applyid        VARCHAR2(20);
		--ls_msg            VARCHAR2(250);
		--ls_code           VARCHAR2(2);
		--ls_operatetype    VARCHAR2(10);
		ls_version        VARCHAR2(4);
		--ls_fieldname      VARCHAR2(50);
		--ls_valuesetid     VARCHAR2(50);
		--ls_parvaluelow    VARCHAR2(50);
		--ls_companycode    VARCHAR2(50);
		--lv_retcode        VARCHAR2(10);
		--lv_retmsg         VARCHAR2(500);
		--ls_codetemp       VARCHAR2(10);
		--ls_customernumber VARCHAR2(20);
		--ls_tempappid      VARCHAR2(20);
		li_countdefault   INTEGER := 0;
	
		--ls_customerid VARCHAR2(30);
		--ls_accountgrp VARCHAR2(30);
	
	BEGIN
	
		retcode := 'S';
		retmsg  := 'Import Successful!';
	
		str_sql := 'select * from hm_apply_customer_imp where action_batch_id = ''' || in_action_batch_id || '''';
		IF in_business_code IS NULL THEN
			retcode := 'E';
			retmsg  := 'Business Type can''t be empty!';
			RETURN;
		END IF;
	
		SELECT COUNT(*)
			INTO li_countdefault
			FROM hm_apply_customer_tpt
		 WHERE business_code = in_business_code
			 AND active_flag = '1';
		IF li_countdefault > 0 THEN
			--存在需要默认的值
			SELECT DISTINCT *
				INTO l_hm_apply_customer_tpt
				FROM hm_apply_customer_tpt
			 WHERE business_code = in_business_code
				 AND active_flag = '1';
		
			-----------------------------首先更新临时表中的默认值  
      
      UPDATE hm_apply_customer_imp
         SET partner_flag_sp = decode(partner_flag_sp, NULL, l_hm_apply_customer_tpt.partner_flag_sp, partner_flag_sp),
             partner_flag_sh = decode(partner_flag_sh, NULL, l_hm_apply_customer_tpt.partner_flag_sh, partner_flag_sh),
             partner_flag_bp = decode(partner_flag_bp, NULL, l_hm_apply_customer_tpt.partner_flag_bp, partner_flag_bp),
             partner_flag_py = decode(partner_flag_py, NULL, l_hm_apply_customer_tpt.partner_flag_py, partner_flag_py),
             customer_title = decode(customer_title, NULL, l_hm_apply_customer_tpt.customer_title, customer_title),
             account_group = decode(account_group, NULL, l_hm_apply_customer_tpt.account_group, account_group),
             customer_number = decode(customer_number, NULL, l_hm_apply_customer_tpt.customer_number, customer_number),
             customer_name = decode(customer_name, NULL, l_hm_apply_customer_tpt.customer_name, customer_name),
             name2 = decode(name2, NULL, l_hm_apply_customer_tpt.name2, name2),
             name3 = decode(name3, NULL, l_hm_apply_customer_tpt.name3, name3),
             search_terms = decode(search_terms, NULL, l_hm_apply_customer_tpt.search_terms, search_terms),
             customer_country = decode(customer_country, NULL, l_hm_apply_customer_tpt.customer_country, customer_country),
             LANGUAGE = decode(LANGUAGE, NULL, l_hm_apply_customer_tpt.LANGUAGE, LANGUAGE),
             region = decode(region, NULL, l_hm_apply_customer_tpt.region, region),
             city = decode(city, NULL, l_hm_apply_customer_tpt.city, city),
             street = decode(street, NULL, l_hm_apply_customer_tpt.street, street),
             postal_code = decode(postal_code, NULL, l_hm_apply_customer_tpt.postal_code, postal_code),
             telephone = decode(telephone, NULL, l_hm_apply_customer_tpt.telephone, telephone),
             fax = decode(fax, NULL, l_hm_apply_customer_tpt.fax, fax),
             contact_person_department = decode(contact_person_department, NULL, l_hm_apply_customer_tpt.contact_person_department, contact_person_department),
             contact_person = decode(contact_person, NULL, l_hm_apply_customer_tpt.contact_person, contact_person),
             phone_number1 = decode(phone_number1, NULL, l_hm_apply_customer_tpt.phone_number1, phone_number1),
             legal_person = decode(legal_person, NULL, l_hm_apply_customer_tpt.legal_person, legal_person),
             company_type = decode(company_type, NULL, l_hm_apply_customer_tpt.company_type, company_type),
             vat_reg_no = decode(vat_reg_no, NULL, l_hm_apply_customer_tpt.vat_reg_no, vat_reg_no),
             train_station = decode(train_station, NULL, l_hm_apply_customer_tpt.train_station, train_station),
             customer_class = decode(customer_class, NULL, l_hm_apply_customer_tpt.customer_class, customer_class),
             industry_class = decode(industry_class, NULL, l_hm_apply_customer_tpt.industry_class, industry_class),
             market_area = decode(market_area, NULL, l_hm_apply_customer_tpt.market_area, market_area),
             industry = decode(industry, NULL, l_hm_apply_customer_tpt.industry, industry),
             niles_mark = decode(niles_mark, NULL, l_hm_apply_customer_tpt.niles_mark, niles_mark),
             estimate_status = decode(estimate_status, NULL, l_hm_apply_customer_tpt.estimate_status, estimate_status),
             taxdoc_type = decode(taxdoc_type, NULL, l_hm_apply_customer_tpt.taxdoc_type, taxdoc_type),
             customer_stat_category = decode(customer_stat_category, NULL, l_hm_apply_customer_tpt.customer_stat_category, customer_stat_category),
             vendor = decode(vendor, NULL, l_hm_apply_customer_tpt.vendor, vendor),
             bank_country = decode(bank_country, NULL, l_hm_apply_customer_tpt.bank_country, bank_country),
             bank_key = decode(bank_key, NULL, l_hm_apply_customer_tpt.bank_key, bank_key),
             bank_account = decode(bank_account, NULL, l_hm_apply_customer_tpt.bank_account, bank_account),
             account_holder = decode(account_holder, NULL, l_hm_apply_customer_tpt.account_holder, account_holder),
             bank_name = decode(bank_name, NULL, l_hm_apply_customer_tpt.bank_name, bank_name),
             recon_account = decode(recon_account, NULL, l_hm_apply_customer_tpt.recon_account, recon_account),
             sort_key = decode(sort_key, NULL, l_hm_apply_customer_tpt.sort_key, sort_key),
             terms_of_payment = decode(terms_of_payment, NULL, l_hm_apply_customer_tpt.terms_of_payment, terms_of_payment),
             payment_methods = decode(payment_methods, NULL, l_hm_apply_customer_tpt.payment_methods, payment_methods),
             prev_acct_no = decode(prev_acct_no, NULL, l_hm_apply_customer_tpt.prev_acct_no, prev_acct_no),
             hq = decode(hq, NULL, l_hm_apply_customer_tpt.hq, hq),
             preference_flag = decode(preference_flag, NULL, l_hm_apply_customer_tpt.preference_flag, preference_flag),
             discount_print_flag = decode(discount_print_flag, NULL, l_hm_apply_customer_tpt.discount_print_flag, discount_print_flag),
             account_remark = decode(account_remark, NULL, l_hm_apply_customer_tpt.account_remark, account_remark),
             sales_district = decode(sales_district, NULL, l_hm_apply_customer_tpt.sales_district, sales_district),
             sales_group = decode(sales_group, NULL, l_hm_apply_customer_tpt.sales_group, sales_group),
             currency = decode(currency, NULL, l_hm_apply_customer_tpt.currency, currency),
             price_group = decode(price_group, NULL, l_hm_apply_customer_tpt.price_group, price_group),
             customer_summary_group = decode(customer_summary_group, NULL, l_hm_apply_customer_tpt.customer_summary_group, customer_summary_group),
             customer_price_procedure = decode(customer_price_procedure, NULL, l_hm_apply_customer_tpt.customer_price_procedure, customer_price_procedure),
             delivering_plant = decode(delivering_plant, NULL, l_hm_apply_customer_tpt.delivering_plant, delivering_plant),
             acct_assgmt_group = decode(acct_assgmt_group, NULL, l_hm_apply_customer_tpt.acct_assgmt_group, acct_assgmt_group),
             tax_classification = decode(tax_classification, NULL, l_hm_apply_customer_tpt.tax_classification, tax_classification),
             ship_condition = decode(ship_condition, NULL, l_hm_apply_customer_tpt.ship_condition, ship_condition),
             pod_relation = decode(pod_relation, NULL, l_hm_apply_customer_tpt.pod_relation, pod_relation),
             sold_to_party = decode(sold_to_party, NULL, l_hm_apply_customer_tpt.sold_to_party, sold_to_party),
             global_pc_code = decode(global_pc_code, NULL, l_hm_apply_customer_tpt.global_pc_code, global_pc_code),
             parent_company_code = decode(parent_company_code, NULL, l_hm_apply_customer_tpt.parent_company_code, parent_company_code),
             org_group_code = decode(org_group_code, NULL, l_hm_apply_customer_tpt.org_group_code, org_group_code),
             is_storefront = decode(is_storefront, NULL, l_hm_apply_customer_tpt.is_storefront, is_storefront),
             old_customer_code = decode(old_customer_code, NULL, l_hm_apply_customer_tpt.old_customer_code, old_customer_code),
             is_seller = decode(is_seller, NULL, l_hm_apply_customer_tpt.is_seller, is_seller),
             sales_region = decode(sales_region, NULL, l_hm_apply_customer_tpt.sales_region, sales_region),
             cust_property = decode(cust_property, NULL, l_hm_apply_customer_tpt.cust_property, cust_property),
             cust_property_desc = decode(cust_property_desc, NULL, l_hm_apply_customer_tpt.cust_property_desc, cust_property_desc),
             cust_type = decode(cust_type, NULL, l_hm_apply_customer_tpt.cust_type, cust_type),
             csg_keyaccount_flag = decode(csg_keyaccount_flag, NULL, l_hm_apply_customer_tpt.csg_keyaccount_flag, csg_keyaccount_flag),
             csg_keyaccount_category = decode(csg_keyaccount_category, NULL, l_hm_apply_customer_tpt.csg_keyaccount_category, csg_keyaccount_category),
             csg_keyaccount_class = decode(csg_keyaccount_class, NULL, l_hm_apply_customer_tpt.csg_keyaccount_class, csg_keyaccount_class),
             cust_functions = decode(cust_functions, NULL, l_hm_apply_customer_tpt.cust_functions, cust_functions),

             BRAND1 = decode(BRAND1, NULL, l_hm_apply_customer_tpt.BRAND1, BRAND1),
             BRAND2 = decode(BRAND2, NULL, l_hm_apply_customer_tpt.BRAND2, BRAND2),
             BRAND3 = decode(BRAND3, NULL, l_hm_apply_customer_tpt.BRAND3, BRAND3),
             SALES_AMOUNT1 = decode(SALES_AMOUNT1, NULL, l_hm_apply_customer_tpt.SALES_AMOUNT1, SALES_AMOUNT1),
             SALES_AMOUNT2 = decode(SALES_AMOUNT2, NULL, l_hm_apply_customer_tpt.SALES_AMOUNT2, SALES_AMOUNT2),
             SALES_AMOUNT3 = decode(SALES_AMOUNT3, NULL, l_hm_apply_customer_tpt.SALES_AMOUNT3, SALES_AMOUNT3),
             SALES_VOLUME = decode(SALES_VOLUME, NULL, l_hm_apply_customer_tpt.SALES_VOLUME, SALES_VOLUME),
             OUTLET_AREA = decode(OUTLET_AREA, NULL, l_hm_apply_customer_tpt.OUTLET_AREA, OUTLET_AREA),
             REGISTERED_CAPITAL = decode(REGISTERED_CAPITAL, NULL, l_hm_apply_customer_tpt.REGISTERED_CAPITAL, REGISTERED_CAPITAL),
             MANAGE_LIMIT_YEAR = decode(MANAGE_LIMIT_YEAR, NULL, l_hm_apply_customer_tpt.MANAGE_LIMIT_YEAR, MANAGE_LIMIT_YEAR),
             COOPERATION_SCOPE = decode(COOPERATION_SCOPE, NULL, l_hm_apply_customer_tpt.COOPERATION_SCOPE, COOPERATION_SCOPE),
             COOPERATION_SALES_VOLUMN = decode(COOPERATION_SALES_VOLUMN, NULL, l_hm_apply_customer_tpt.COOPERATION_SALES_VOLUMN, COOPERATION_SALES_VOLUMN),

             manage_customer = decode(manage_customer, NULL, l_hm_apply_customer_tpt.manage_customer, manage_customer),
             branch_code = decode(branch_code, NULL, l_hm_apply_customer_tpt.branch_code, branch_code),
             branch_company_code = decode(branch_company_code, NULL, l_hm_apply_customer_tpt.branch_company_code, branch_company_code),
             branch_company_name = decode(branch_company_name, NULL, l_hm_apply_customer_tpt.branch_company_name, branch_company_name),
             customer_manager = decode(customer_manager, NULL, l_hm_apply_customer_tpt.customer_manager, customer_manager),
             area_code = decode(area_code, NULL, l_hm_apply_customer_tpt.area_code, area_code),
             jyt = decode(jyt, NULL, l_hm_apply_customer_tpt.jyt, jyt)
			 WHERE action_batch_id = in_action_batch_id;
      		
			-----------------------------  
		END IF; 
    
    
		OPEN cur_view_table FOR str_sql;
		LOOP
			<<loops>>
			FETCH cur_view_table
				INTO l_apply_customer;
			rows_customers := cur_view_table%ROWCOUNT;
			EXIT WHEN cur_view_table%NOTFOUND;
      
			----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
      prc_input_allcheck(in_row_id => '',
                         in_tablename_suffix => '_IMP',
                         v_hm_apply_customer => l_apply_customer,
                         retcode => retcode, 
                         retmsg => retmsg);
		  IF retcode = 'E' THEN
				UPDATE hm_action_batch_item
					 SET success_flag = '0',
							 remark = 'Customer ' || l_apply_customer.customer_name || ' import error: ' || retmsg
				 WHERE action_batch_id = l_apply_customer.action_batch_id
					 AND master_row_id = l_apply_customer.row_id;
				RETURN;
				-- GOTO loops;        
			END IF;
      
      /*此处替换掉众多校验...*/
      
			---------------------------------------------此处进行版次获取
			SELECT MAX(current_audit_version)
				INTO ls_version
				FROM hm_business_audit
			 WHERE business_code = in_business_code
				 AND active_flag = '1'
				 AND delete_flag = '0';
			IF ls_version IS NULL THEN
				retcode := 'E';
				retmsg  := 'Get Audit Version failure !';
				UPDATE hm_action_batch_item
					 SET success_flag = '0',
							 remark = 'Customer ' || l_apply_customer.customer_name || ' import error: ' || retmsg
				 WHERE action_batch_id = l_apply_customer.action_batch_id
					 AND master_row_id = l_apply_customer.row_id;
				RETURN;
			END IF;
		
			-------------------------------End 20090514 By LIYI-----------------------------------------------
			IF in_apply_id IS NULL THEN
			
				--说明为新增导入，需要分别向HM_APPLYS和HM_APPLY_CUSTOMER分发数据
				BEGIN
					IF li_times = 0 THEN
						--仅插入一笔申请单主表数据
						retmsg     := l_apply_customer.business_code;
						--str_rowid  := comm_util.func_new_rowid();
						ls_applyid := comm_util.func_new_applyid('CST');
            
            --
            l_apply.row_id := comm_util.func_new_rowid();
            l_apply.created_by := l_apply_customer.created_by;
            l_apply.created := l_apply_customer.created;
            l_apply.last_upd_by := l_apply_customer.last_upd_by;
            l_apply.last_upd := l_apply_customer.last_upd;
            l_apply.modification_num := 0;
            l_apply.delete_flag := '0';
            l_apply.active_flag := '1';
            l_apply.remark := '导入创建';
            l_apply.apply_id := ls_applyid;
            --l_apply.parent_apply_id := '';
            l_apply.master_type := l_apply_customer.master_type;
            l_apply.operate_type := l_apply_customer.operate_type;
            l_apply.business_code := in_business_code;
            l_apply.current_audit_version := ls_version;
            l_apply.for_sap := '1'; --?需要加逻辑
            l_apply.batch_flag := '1';
            l_apply.transaction_flag := '0';
            l_apply.audit_flag := '0';
            l_apply.apply_by := in_applyby;
            l_apply.apply_email := in_applyemail;
            l_apply.business_type := l_apply_customer.business_type;
            l_apply.partner_function := l_apply_customer.partner_function;
            l_apply.is_samejyt := l_apply_customer.is_samejyt;
            l_apply.dept_code := l_apply_customer.dept_code;
            l_apply.stock_flag := l_apply_customer.stock_flag;
            l_apply.jyt_code := l_apply_customer.jyt_code;
            l_apply.jyt_code_next := l_apply_customer.jyt_code_next;
            
            l_apply.CUSTOMER_FLAG := l_apply_customer.CUSTOMER_FLAG;
            
            INSERT INTO hm_applys VALUES l_apply;
					
						li_times := li_times + 1;

					END IF;
				
					l_apply_customer.apply_id := ls_applyid;
					--l_apply_customer.Row_Id := ;
					INSERT INTO hm_apply_customer
					VALUES l_apply_customer;
					comm_util.copy_table_line('HM_APPLY_CUSTOMER', '', '_HIS', l_apply_customer.row_id, retcode, retmsg);
					UPDATE hm_action_batch_item
						 SET success_flag = '1',
								 remark = 'Customer ' || l_apply_customer.customer_name || ' import successful'
					 WHERE action_batch_id = l_apply_customer.action_batch_id
						 AND master_row_id = l_apply_customer.row_id;
				
				EXCEPTION
					WHEN OTHERS THEN
						retcode := 'E';
						retmsg  := 'Insert failed!Exception Code:' || SQLCODE || ';Exception message:' || SQLERRM;
					
						UPDATE hm_action_batch_item
							 SET success_flag = '0',
									 remark = 'Customer ' || l_apply_customer.customer_name || ' import error: ' || retmsg
						 WHERE action_batch_id = l_apply_customer.action_batch_id
							 AND master_row_id = l_apply_customer.row_id;
					
				END;
			ELSE
			
				ls_applyid := in_apply_id;
			
				--说明非新增导入，只需要向HM_APPLY_CUSTOMER增加数据，更新HM_APPLYS的最后更新记录
				BEGIN
					SELECT COUNT(*)
						INTO li_count
						FROM hm_applys
					 WHERE apply_id = ls_applyid;
					IF li_count = 0 THEN
						retcode := 'E';
						retmsg  := 'Apply ID has not benn created!';
					
						UPDATE hm_action_batch_item
							 SET success_flag = '0',
									 remark = 'Customer ' || l_apply_customer.customer_name || ' import error: ' || retmsg
						 WHERE action_batch_id = l_apply_customer.action_batch_id
							 AND master_row_id = l_apply_customer.row_id;
					
						GOTO loops; --继续下一步循环；
					END IF;
					IF li_times = 0 THEN
						UPDATE hm_applys
							 SET last_upd_by = l_apply_customer.last_upd_by,
									 last_upd = l_apply_customer.last_upd,
									 modification_num = modification_num + 1,
									 apply_by = decode(apply_by, NULL, in_applyby, apply_by),
									 apply_email = decode(apply_email, NULL, in_applyemail, apply_email)
						 WHERE apply_id = ls_applyid;
						li_times := li_times + 1;
					END IF;
				
					--  L_APPLY_CUSTOMER.ROW_ID := COMM_UTIL.FUNC_NEW_ROWID();
					INSERT INTO hm_apply_customer
					VALUES l_apply_customer;
					comm_util.copy_table_line('HM_APPLY_CUSTOMER', '', '_HIS', l_apply_customer.row_id, retcode, retmsg);
					UPDATE hm_action_batch_item
						 SET success_flag = '1',
								 remark = 'Customer ' || l_apply_customer.customer_name || ' import successful'
					 WHERE action_batch_id = l_apply_customer.action_batch_id
						 AND master_row_id = l_apply_customer.row_id;
				
				EXCEPTION
					WHEN OTHERS THEN
						retcode := 'E';
						retmsg  := 'Update failed!Exception Code:' || SQLCODE || ';Exception message:' || SQLERRM;
					
						UPDATE hm_action_batch_item
							 SET success_flag = '0',
									 remark = 'Customer ' || l_apply_customer.customer_name || ' import error: ' || retmsg
						 WHERE action_batch_id = l_apply_customer.action_batch_id
							 AND master_row_id = l_apply_customer.row_id;
					
				END;
			END IF;
		END LOOP;
		CLOSE cur_view_table;
	
		--COMMIT;
	
		--applys.prc_apply_get_itemno(ls_applyid, lv_retcode, lv_retmsg);
	  applys.prc_apply_get_itemno(in_apply_id => ls_applyid,
                                retcode => retcode,retmsg => retmsg);    
    IF retcode = 'E' THEN	RETURN; END IF;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'Update failed!Exception Code:' || SQLCODE || ';Exception message:' || SQLERRM;
	END prc_applys_import;

	/****************************************************************
  功能描述：申请明显信息保存前处理 (应用位置: save)
  作者：    zhangbiao 
  时间：    2009-09-15       
       
  输入参数说明： in_row_id        申请单_信息ID              
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,为保存按钮数据commit前的标准方法，可进行数据校验，数据联动等等
       2,前提：数据已经保存至正式表中，尚未提交
       3,内部调用 prc_input_allcheck
  ****************************************************************/
	PROCEDURE prc_apply_customer_save
	(
		in_row_id IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_hm_applys hm_applys%rowtype;
	  l_hm_apply_customer hm_apply_customer%rowtype;
    --l_hm_customers hm_customers%rowtype;
    
	BEGIN
    --获取当前申请条目信息
    for cur_rows in (select * from hm_apply_customer where row_id = in_row_id)
    loop
      l_hm_apply_customer := cur_rows;
    end loop;
    
    
    if l_hm_apply_customer.row_id is null then
			retcode := 'E';
			retmsg  := 'Customer apply info not exist!';    
      RETURN;  
    end if;
    
    --获取当前申请头信息
    for cur_rows in (select * from hm_applys where apply_id = l_hm_apply_customer.apply_id)
    loop
      l_hm_applys := cur_rows;
    end loop;

/*    --获取当然申请对应主数据条目
    FOR cur_rows IN (SELECT * FROM hm_customers WHERE customer_number = l_hm_apply_customer.customer_number)
    LOOP
      l_hm_customers := cur_rows;
    END LOOP;*/
    
    
	  ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)--调用--prc_apply_customer_change
    prc_input_allcheck(in_row_id => '',
                       in_tablename_suffix => '',
                       v_hm_apply_customer => l_hm_apply_customer,
                       retcode => retcode,
                       retmsg => retmsg);
    IF retcode = 'E' THEN	RETURN; END IF;

    applys.prc_apply_get_itemno(in_apply_id => l_hm_apply_customer.apply_id,
                                retcode => retcode,retmsg => retmsg);    
    IF retcode = 'E' THEN	RETURN; END IF;
                               
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_apply_customer_save:'|| SQLERRM;
	END prc_apply_customer_save;

	/****************************************************************
  功能描述：根据业务类型创建、更新税分类信息
  作者：    zhangbiao
  时间：    2009-04-09    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
     根据业务类型分为三部分：创建(银行信息挂在基本视图下，不可能出现扩展)、更新
       1.创建操作
         直接向银行信息表中插入一笔银行数据
       2.更新操作       
         如果有更新银行信息,直接向银行信息表中插入一笔数据即可
  ****************************************************************/
	PROCEDURE prc_tax_create
	(
		in_datavalue   IN hm_apply_customer%ROWTYPE,
		in_customer_id IN VARCHAR2,
		in_user_name   IN VARCHAR2,
		retcode        OUT VARCHAR2,
		retmsg         OUT VARCHAR2
	) IS
		l_apply_customer   hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_taxs hm_customer_taxs%ROWTYPE;
	
		li_count  INTEGER := 0;
		lv_taxid VARCHAR2(20);

	BEGIN
    retcode := 'S';
    retmsg  := 'The tax create success ! ';

		l_apply_customer := in_datavalue;
	
		SELECT COUNT(*),
					 MAX(t.row_id)
			INTO li_count,
					 lv_taxid
			FROM hm_customer_taxs t
		 WHERE t.aland = 'CN'--l_apply_customer.customer_country
			 AND t.tatyp = 'MWST'
			 AND t.customer_id = in_customer_id;
	
		IF li_count < 1 THEN
				
			--创建/扩展客户税分类信息
			lv_taxid := comm_util.func_new_rowid();
		
			l_hm_customer_taxs.tatyp             := 'MWST';
			l_hm_customer_taxs.aland             := 'CN';--l_apply_customer.customer_country;
      l_hm_customer_taxs.taxkd             := l_apply_customer.tax_classification;
      l_hm_customer_taxs.customer_id       := in_customer_id;
  
      l_hm_customer_taxs.row_id            := lv_taxid;
      l_hm_customer_taxs.created_by        := in_user_name;
      l_hm_customer_taxs.created           := SYSDATE;
      l_hm_customer_taxs.last_upd_by       := in_user_name;
      l_hm_customer_taxs.last_upd          := SYSDATE;
      l_hm_customer_taxs.modification_num  := 0;
      l_hm_customer_taxs.active_flag       := '1';
      l_hm_customer_taxs.version           := '1.0';
      l_hm_customer_taxs.last_version_flag := '2';
      l_hm_customer_taxs.operate_status    := 'CREATE';
      l_hm_customer_taxs.lock_flag         := '0';
      l_hm_customer_taxs.for_gvs           := '1';
      l_hm_customer_taxs.delete_flag       := '0';
		
			INSERT INTO hm_customer_taxs VALUES l_hm_customer_taxs;
			comm_util.copy_table_line('HM_CUSTOMER_TAXS', '', '_HIS', lv_taxid, retcode, retmsg);
      
		ELSE
		
			UPDATE hm_customer_taxs
				 SET taxkd = l_apply_customer.tax_classification,
						 last_upd_by = in_user_name,
						 last_upd = SYSDATE
			 WHERE row_id = lv_taxid;
       comm_util.copy_table_line('HM_CUSTOMER_TAXS', '', '_HIS', lv_taxid, retcode, retmsg);
       
		END IF;


	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The tax classification create error :' || SQLERRM;
	END prc_tax_create;

	/****************************************************************
  功能描述：根据业务类型创建、更新银行信息
  作者：    zhangbiao
  时间：    2009-04-09    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
     根据业务类型分为三部分：创建(银行信息挂在基本视图下，不可能出现扩展)、更新
       1.创建操作
         直接向银行信息表中插入一笔银行数据
       2.更新操作       
         如果有更新银行信息,直接向银行信息表中插入一笔数据即可
  ****************************************************************/
	PROCEDURE prc_bank_create
	(
		in_datavalue   IN hm_apply_customer%ROWTYPE,
		in_customer_id IN VARCHAR2,
		in_user_name   IN VARCHAR2,
		retcode        OUT VARCHAR2,
		retmsg         OUT VARCHAR2
	) IS
		l_apply_customer        hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_cust_bank_accounts hm_cust_bank_accounts%ROWTYPE;
	
		--ls_partnerid VARCHAR2(20);
	
		li_count  INTEGER := 0;
		lv_bankid VARCHAR2(20);
	
	BEGIN
    retcode := 'S';
    retmsg  := 'The bank create success ! ';

		l_apply_customer := in_datavalue;
	
  /*
      银行视图只有一条数据，先冻结原数据，然后新增
  */
  			UPDATE hm_cust_bank_accounts
		 SET delete_flag  = '1',
				 last_upd_by = in_user_name,
				 last_upd = SYSDATE
	 WHERE customer_id = in_customer_id;
   /*
		SELECT COUNT(*),
					 MAX(t.row_id)
			INTO li_count,
					 lv_bankid
			FROM hm_cust_bank_accounts t
		 WHERE t.bank_country = l_apply_customer.bank_country
			 AND t.bank_branch_code = l_apply_customer.bank_key
			 AND t.account_holder_name = l_apply_customer.bank_account
			 AND t.customer_id = in_customer_id
       AND T.DELETE_FLAG = '0';
	
		IF li_count < 1 THEN
    */
		
			--if l_apply_customer.iban_code is null then
		
			--创建/扩展客户银行账户信息
			lv_bankid := comm_util.func_new_rowid();

      if l_apply_customer.bank_account is null then 
         l_apply_customer.bank_account := '1';
      end if;
      
      if l_apply_customer.bank_country is null then 
         l_apply_customer.bank_country := 'CN';
      end if;     
      		
			l_hm_cust_bank_accounts.row_id                   := lv_bankid;
			l_hm_cust_bank_accounts.customer_id              := in_customer_id;
			l_hm_cust_bank_accounts.bank_country             := l_apply_customer.bank_country;
      l_hm_cust_bank_accounts.bank_name := l_apply_customer.bank_name;
			l_hm_cust_bank_accounts.bank_branch_code         := l_apply_customer.bank_key;
			l_hm_cust_bank_accounts.bank_account_num         := l_apply_customer.bank_account;
			l_hm_cust_bank_accounts.account_holder_name      := l_apply_customer.account_holder;
  
      l_hm_cust_bank_accounts.row_id            := lv_bankid;
			l_hm_cust_bank_accounts.created_by        := in_user_name;
			l_hm_cust_bank_accounts.created           := SYSDATE;
			l_hm_cust_bank_accounts.last_upd_by       := in_user_name;
			l_hm_cust_bank_accounts.last_upd          := SYSDATE;
			l_hm_cust_bank_accounts.modification_num  := 0;
			l_hm_cust_bank_accounts.active_flag       := '1';
			l_hm_cust_bank_accounts.version           := '1.0';
			l_hm_cust_bank_accounts.last_version_flag := '2';
			l_hm_cust_bank_accounts.operate_status    := 'CREATE';
      l_hm_cust_bank_accounts.active_range := 'ALL';
			l_hm_cust_bank_accounts.lock_flag         := '0';
			l_hm_cust_bank_accounts.for_gvs           := '1';
			l_hm_cust_bank_accounts.delete_flag       := '0';
		
			INSERT INTO hm_cust_bank_accounts
			VALUES l_hm_cust_bank_accounts;
			comm_util.copy_table_line('HM_CUST_BANK_ACCOUNTS', '', '_HIS', lv_bankid, retcode, retmsg);
      
      /*
		ELSE
		
			UPDATE hm_cust_bank_accounts
				 SET account_holder_name = l_apply_customer.bank_account,
						 bank_account_num = l_apply_customer.account_holder, --bank_name = v_bank_name,
						 last_upd_by = in_user_name,
						 last_upd = SYSDATE
			 WHERE row_id = lv_bankid;
			comm_util.copy_table_line('HM_CUST_BANK_ACCOUNTS', '', '_HIS', lv_bankid, retcode, retmsg);
		END IF;
	*/
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The bank create error ! ' || SQLERRM;
	END prc_bank_create;

	/****************************************************************
  功能描述：根据业务类型创建、更新合作伙伴
  作者：    zhangbiao
  时间：    2009-04-03    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
     根据业务类型分为三部分：创建、更新、扩展
       1.创建操作
         1.1创建0211(sold to)：
            默认创建四个合作伙伴(SP、BP、PY、SH),值为本身； --
         1.2创建0222(payer): 
             默认创建PY,值为本身；--
         1.3创建0111/0101(internal)
             默认创建四个合作伙伴(SP、BP、PY、SH),值为本身；--               
         1.4创建Z001(sales manager)               
         1.5创建0402(ship to)
             默认创建SH,值为本身；--
         1.6创建0301(non_trading)              
         1.7创建0204(one_time) --
             默认创建四个合作伙伴(SP、BP、PY、SH),值为本身；
             
            若有Regional GM/Manager(Z1) 、 Customer Manager(Z2)
                Assistant Cust. Mgr(Z5) 、 Sales Rep.(Z9)
                Sales Agent(ZA)、 key account manager(ZF)
                Credit manager code(Zd)、 SOE code(Ze)
                Forwarding agent(CR)等，需要分别创建Partner;
              若有central account，则更新BP/PY为所录入得值；
       2。更新操作
          先删除合作伙伴然后重新创建
       3。扩展操作
          同创建操作。
    decode(#, 'AG','SP' , 'RE','BP', 'RG','PY', 'WE','SH', 'SP','CR',#)
   备注：SP：Sold-to party   
         BP：Bill-to party
         PY：Payer
         SH：Ship-to party
  ****************************************************************/
	PROCEDURE prc_partner_create
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_customer_number IN VARCHAR2,
		in_sales_id  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer       hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners hm_customer_partners%ROWTYPE;  
	
		li_count  INTEGER := 0;
		lv_partnerid VARCHAR2(20);

	BEGIN
    retcode := 'S';
    retmsg  := 'prc_partner_create:The partner create success ! ';

		l_apply_customer := in_datavalue;
    
    -- SP 方处理
    SELECT COUNT(*),
           MAX(t.row_id)
      INTO li_count,
           lv_partnerid
      FROM hm_customer_partners t
     WHERE t.cust_partner_type = 'SP'
       AND t.cust_partner_subject_id = in_customer_number
       AND t.sales_area_view_id = in_sales_id;
  	
    IF li_count < 1 THEN
      IF ( l_apply_customer.operate_type IN ('CREATE','EXTEND') AND 
           l_apply_customer.partner_flag_sp = '1' ) OR
         ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_sp_x = 'X' AND
           l_apply_customer.partner_flag_sp = '1' ) THEN
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'SP';
        l_hm_customer_partners.cust_partner_subject_id := in_customer_number;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
      END IF;  
    ELSIF li_count = 1 THEN
  		IF ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_sp_x = 'X' AND
           l_apply_customer.partner_flag_sp = '0' ) THEN
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        DELETE FROM hm_customer_partners WHERE row_id = lv_partnerid;
      END IF;
    ELSE 
      retcode := 'E';
      retmsg := 'prc_partner_create:SP合作伙伴信息异常，请检查数据！';
    END IF;
           
    -- SH 方处理
    SELECT COUNT(*),
           MAX(t.row_id)
      INTO li_count,
           lv_partnerid
      FROM hm_customer_partners t
     WHERE t.cust_partner_type = 'SH'
       AND t.cust_partner_subject_id = in_customer_number
       AND t.sales_area_view_id = in_sales_id;
  	
    IF li_count < 1 THEN
      IF ( l_apply_customer.operate_type IN ('CREATE','EXTEND') AND 
           l_apply_customer.partner_flag_sh = '1' ) OR
         ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_sh_x = 'X' AND
           l_apply_customer.partner_flag_sh = '1' )  THEN
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'SH';
        l_hm_customer_partners.cust_partner_subject_id := in_customer_number;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
      END IF;  
    ELSIF li_count = 1 THEN
  		IF ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_sh_x = 'X' AND
           l_apply_customer.partner_flag_sh = '0' ) THEN
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        DELETE FROM hm_customer_partners WHERE row_id = lv_partnerid;
      END IF;
    ELSE 
      retcode := 'E';
      retmsg := 'prc_partner_create:SH合作伙伴信息异常，请检查数据！';
    END IF;
           
    -- BP 方处理
    SELECT COUNT(*),
           MAX(t.row_id)
      INTO li_count,
           lv_partnerid
      FROM hm_customer_partners t
     WHERE t.cust_partner_type = 'BP'
       AND t.cust_partner_subject_id = in_customer_number
       AND t.sales_area_view_id = in_sales_id;
  	
    IF li_count < 1 THEN
      IF ( l_apply_customer.operate_type IN ('CREATE','EXTEND') AND 
           l_apply_customer.partner_flag_bp = '1' ) OR
         ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_bp_x = 'X' AND
           l_apply_customer.partner_flag_bp = '1' ) THEN
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'BP';
        l_hm_customer_partners.cust_partner_subject_id := in_customer_number;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
      END IF;  
    ELSIF li_count = 1 THEN
  		IF ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_bp_x = 'X' AND
           l_apply_customer.partner_flag_bp = '0' ) THEN
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        DELETE FROM hm_customer_partners WHERE row_id = lv_partnerid;
      END IF;
    ELSE 
      retcode := 'E';
      retmsg := 'prc_partner_create:BP合作伙伴信息异常，请检查数据！';
    END IF;
           
    -- PY 方处理
    SELECT COUNT(*),
           MAX(t.row_id)
      INTO li_count,
           lv_partnerid
      FROM hm_customer_partners t
     WHERE t.cust_partner_type = 'PY'
       AND t.cust_partner_subject_id = in_customer_number
       AND t.sales_area_view_id = in_sales_id;
  	
    IF li_count < 1 THEN
      IF ( l_apply_customer.operate_type IN ('CREATE','EXTEND') AND 
           l_apply_customer.partner_flag_py = '1' ) OR
         ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_py_x = 'X' AND
           l_apply_customer.partner_flag_py = '1' )  THEN
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'PY';
        l_hm_customer_partners.cust_partner_subject_id := in_customer_number;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
      END IF;  
    ELSIF li_count = 1 THEN
  		IF ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') AND
           l_apply_customer.partner_flag_py_x = 'X' AND
           l_apply_customer.partner_flag_py = '0' ) THEN
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        DELETE FROM hm_customer_partners WHERE row_id = lv_partnerid;
      END IF;
    ELSE 
      retcode := 'E';
      retmsg := 'prc_partner_create:PY合作伙伴信息异常，请检查数据！';
    END IF;
           
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The partner create error:' || SQLERRM;
	END prc_partner_create;
  
	/****************************************************************
  功能描述：根据申请单更新Sold to party
  作者：    zhangbiao
  时间：    2009-04-23    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_SALES_ID           销售区域ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
         0.业务背景说明：假如申请单客户为A，选择的Sold to party为B.
         1.更新sold to party(B)的基本视图和销售视图状态：
             基本视图状态：NVL(OPERATE_STATUS,'DOING');
             销售视图状态：DECODE(OPERATE_STATUS,'CREATE','CREATE','UPDATE')
         2.客户B的销售视图下创建一个PARTNER: 
             默认创建PY,值为本身；--    
  ****************************************************************/
	PROCEDURE prc_soldto_update
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_salesorg  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer         hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners   hm_customer_partners%ROWTYPE;
		l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
	
		ls_partnerid VARCHAR2(20);
		ls_salesid   hm_customer_sales_data.row_id%TYPE; --B客户的销售视图ID
	
		li_count INTEGER := 0;
	  lv_partner_function VARCHAR2(10);
    
    ls_belong_yjt varchar2(20);
    
    lv_old_sp_num varchar2(20);
    
	BEGIN
	  retcode := 'S';
    retmsg  := 'The soldto partner create success!';
	
  	l_apply_customer := in_datavalue;
    
    --责任经营体
    IF l_apply_customer.business_type = 'JC' THEN
      ls_belong_yjt := l_apply_customer.dept_code;
    ELSE
      IF l_apply_customer.jyt_code_next IS NOT NULL THEN
        ls_belong_yjt := l_apply_customer.jyt_code_next;
      ELSE
        IF l_apply_customer.jyt_code IS NOT NULL THEN
          ls_belong_yjt := l_apply_customer.jyt_code;
        ELSE
          ls_belong_yjt := '';
        END IF;
      END IF;
    END IF;

    IF l_apply_customer.sold_to_party IS NOT NULL THEN
      --deleted by zhangbiao for fanzg 20110407 此闸口为上线初期使用，现全部开放
/*      FOR CUR_ROWS IN (SELECT COUNT(*) ROWSCOUNT FROM HM_FND_CUST_RRS2SALESORG
                                            WHERE SALES_ORGANIZATION = in_salesorg  )
      LOOP
         IF CUR_ROWS.ROWSCOUNT > 0 and (ls_belong_yjt is null or (ls_belong_yjt is not null and ls_belong_yjt not in ('1005','1011','1004','1021')))THEN --1005  社区店--1011  工程--1020	专卖店--1021	电子商务
           RETURN;
         END IF;
      END LOOP; */   
      --deleted by zhangbiao for fanzg 20110407
    
      --伞下付款方提交时，校验理货商售达方 Lvdecheng 20121024
      IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169'  THEN 
         SELECT MAX(b.row_id)
                INTO ls_salesid
         FROM hm_customers           a,
                 hm_customer_sales_data b
         WHERE a.row_id = b.customer_id
         AND lpad(a.customer_number, 10, '0') = lpad(l_apply_customer.sbr_sp_number, 10, '0')
         AND b.sales_group = in_salesorg
         AND b.distribution_channel = '00'
         AND b.division = '00'
         AND a.active_flag = '1'
         AND a.delete_flag = '0'
         AND b.active_flag = '1'
         AND b.delete_flag = '0';
         
         IF ls_salesid IS NULL THEN
      
            retcode := 'E';
            retmsg  := '对应售达方更新: 客户:[' || l_apply_customer.sbr_sp_number || '] 在销售区域:[' ||
                   in_salesorg || '] 中尚未维护视图信息，请先进行EXTEND业务扩展动作 !';
           RETURN;
         END IF;      	
         
      ELSE 
    
         SELECT MAX(b.row_id)
                INTO ls_salesid
         FROM hm_customers           a,
             hm_customer_sales_data b
         WHERE a.row_id = b.customer_id
         AND lpad(a.customer_number, 10, '0') = lpad(l_apply_customer.sold_to_party, 10, '0')
         AND b.sales_group = in_salesorg
         AND b.distribution_channel = '00'
         AND b.division = '00'
         AND a.active_flag = '1'
         AND a.delete_flag = '0'
         AND b.active_flag = '1'
         AND b.delete_flag = '0';
         
         IF ls_salesid IS NULL THEN
        
/*        FOR CUR_TEMP IN (SELECT T.CUSTOMER_NAME1 FROM HM_CUSTOMERS T WHERE T.CUSTOMER_NUMBER = l_apply_customer.sold_to_party )  
        LOOP
          LC_TEMP_CUSTOMER_NAME1 := CUR_TEMP.CUSTOMER_NAME1;
        END LOOP;*/
      
            retcode := 'E';
            retmsg  := '对应售达方更新: 客户:[' || l_apply_customer.sold_to_party || '] 在销售区域:[' ||
                   in_salesorg || '] 中尚未维护视图信息，请先进行EXTEND业务扩展动作 !';
            RETURN;
        END IF;   
      END IF ;   	
      
      IF l_apply_customer.partner_function = 'JCSH' THEN
        lv_partner_function := 'SH';
      ELSIF l_apply_customer.partner_function = 'PYSF' THEN --Lvdecheng 20121024
        lv_partner_function := 'PY';
      ELSE
        lv_partner_function := l_apply_customer.partner_function;
      END IF;
      
      SELECT COUNT(*)
        INTO li_count
        FROM hm_customer_partners
       WHERE cust_partner_type = lv_partner_function
         AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_customer.customer_number, 10, '0')
         AND sales_area_view_id = ls_salesid
         AND active_flag = '1'
         AND delete_flag = '0';
  	
      --sold_to_party 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
      IF li_count < 1 THEN
        --B中不经存在SH
        l_hm_customer_partners.sales_area_view_id      := ls_salesid;
        l_hm_customer_partners.created_by              := in_user_name;
        l_hm_customer_partners.created                 := SYSDATE;
        l_hm_customer_partners.last_upd_by             := in_user_name;
        l_hm_customer_partners.last_upd                := SYSDATE;
        l_hm_customer_partners.modification_num        := 0;
        l_hm_customer_partners.active_flag             := '1';
        l_hm_customer_partners.version                 := '1.0';
        l_hm_customer_partners.last_version_flag       := '2';
        l_hm_customer_partners.operate_status          := 'CREATE';
        l_hm_customer_partners.lock_flag               := '0';
        l_hm_customer_partners.for_gvs                 := '1';
        l_hm_customer_partners.delete_flag             := '0';
        ls_partnerid                                   := comm_util.func_new_rowid();
        l_hm_customer_partners.row_id                  := ls_partnerid;
        l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.customer_number;
        l_hm_customer_partners.cust_partner_type       := lv_partner_function;
        
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
  		
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = ls_salesid;
  		
        --伞下付款方客户申请，更改理货商售达方状态  Lvdecheng 20121224
  		  IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169'  THEN
           UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = l_apply_customer.sbr_sp_number;
        ELSE 
           UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = l_apply_customer.sold_to_party;
        END IF;
  		
      END IF;
  
      l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
      l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
      l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
      --若伞下付款方，对应售达方为Sbr_Sp_Number字段 Lvdecheng 20121024
      IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169'  THEN
         l_hm_applys_transactions.master_row_code := l_apply_customer.Sbr_Sp_Number;
      ELSE 
         l_hm_applys_transactions.master_row_code := l_apply_customer.sold_to_party;
      END IF;
      l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
      l_hm_applys_transactions.created_by      := in_user_name;
      l_hm_applys_transactions.created         := SYSDATE;
      l_hm_applys_transactions.last_upd_by     := in_user_name;
      l_hm_applys_transactions.last_upd        := SYSDATE;
      l_hm_applys_transactions.active_flag     := '1';
      l_hm_applys_transactions.delete_flag     := '0';
    		
      INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
      
      --若伞下付款方，对应售达方为Sbr_Sp_Number字段 Lvdecheng 20121024
      --其它则对应sold_to_party字段
      IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169'  THEN
         lv_old_sp_num := l_apply_customer.Sbr_Sp_Number;
      ELSE 
         lv_old_sp_num := l_apply_customer.sold_to_party;
      END IF;
      
      --老售达方处理 soldto old party 处理
      FOR cur_rows IN CUR_PARTNER2SPCUST_item (l_apply_customer.customer_number, 
                                              lv_partner_function, 
                                              in_salesorg, 
                                              lv_old_sp_num )
      LOOP
        --ls_old_soldtoparty := ls_old_soldtoparty||cur_rows.customer_number||CHR(9)||cur_rows.account_group||CHR(9)||cur_rows.customer_name1||CHR(13)||CHR(10);
        
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', cur_rows.row_id, retcode, retmsg);
        
        UPDATE HM_CUSTOMER_PARTNERS
           SET DELETE_FLAG = '1',
               LAST_UPD_BY = IN_USER_NAME,
               LAST_UPD    = SYSDATE
         WHERE ROW_ID = CUR_ROWS.ROW_ID;
        
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = cur_rows.sales_area_view_id;
  		
        UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = cur_rows.customer_id;

        --
        l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
        l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
        l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
        l_hm_applys_transactions.master_row_code := CUR_ROWS.CUSTOMER_NUMBER;
        l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
        l_hm_applys_transactions.created_by      := in_user_name;
        l_hm_applys_transactions.created         := SYSDATE;
        l_hm_applys_transactions.last_upd_by     := in_user_name;
        l_hm_applys_transactions.last_upd        := SYSDATE;
        l_hm_applys_transactions.active_flag     := '1';
        l_hm_applys_transactions.delete_flag     := '0';

        INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
        
      END LOOP;
      
    END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The soldto partner create error:' || SQLERRM;
	END prc_soldto_update;
  
	/****************************************************************
  功能描述：根据申请单更新Sold to party old.
  作者：    zhangbiao
  时间：    2009-04-23    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_SALES_ID           销售区域ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
         0.业务背景说明：假如申请单客户为A，选择的Sold to party为B.
         1.更新sold to party(B)的基本视图和销售视图状态：
             基本视图状态：NVL(OPERATE_STATUS,'DOING');
             销售视图状态：DECODE(OPERATE_STATUS,'CREATE','CREATE','UPDATE')
         2.客户B的销售视图下创建一个PARTNER: 
             默认创建PY,值为本身；--    
  ****************************************************************/
/*	PROCEDURE prc_soldto_old_update
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_salesorg  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer         hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners   hm_customer_partners%ROWTYPE;
		l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
	
		ls_partnerid VARCHAR2(20);
		ls_salesid   hm_customer_sales_data.row_id%TYPE; --B客户的销售视图ID
	
		li_count INTEGER := 0;
	  lv_partner_function VARCHAR2(10);
    
	BEGIN
	  retcode := 'S';
    retmsg  := 'The old soldto partner delete success!';
	
  	l_apply_customer := in_datavalue;
    
    IF l_apply_customer.sold_to_party IS NOT NULL THEN
    
      --FOR cur_rows IN CUR_PARTNER2SPCUST(
    
    
      SELECT MAX(b.row_id)
        INTO ls_salesid
        FROM hm_customers           a,
             hm_customer_sales_data b
       WHERE a.row_id = b.customer_id
         AND lpad(a.customer_number, 10, '0') = lpad(l_apply_customer.sold_to_party, 10, '0')
         AND b.sales_group = in_salesorg
         AND b.distribution_channel = '00'
         AND b.division = '00'
         AND a.active_flag = '1'
         AND a.delete_flag = '0'
         AND b.active_flag = '1'
         AND b.delete_flag = '0';
      IF ls_salesid IS NULL THEN
        retcode := 'E';
        retmsg  := 'SoldTo_update: Customer:[' || l_apply_customer.sold_to_party || '] Sales Area View:[' ||
                   in_salesorg || '] has not been created !';
        RETURN;
      END IF;
	
      IF l_apply_customer.partner_function = 'JCSH' THEN
        lv_partner_function := 'SH';
      ELSE
        lv_partner_function := l_apply_customer.partner_function;
      END IF;
      
      SELECT COUNT(*)
        INTO li_count
        FROM hm_customer_partners
       WHERE cust_partner_type = lv_partner_function
         AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_customer.customer_number, 10, '0')
         AND sales_area_view_id = ls_salesid
         AND active_flag = '1'
         AND delete_flag = '0';
  	
      --sold_to_party 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
      IF li_count < 1 THEN
        --B中不经存在SH
        l_hm_customer_partners.sales_area_view_id      := ls_salesid;
        l_hm_customer_partners.created_by              := in_user_name;
        l_hm_customer_partners.created                 := SYSDATE;
        l_hm_customer_partners.last_upd_by             := in_user_name;
        l_hm_customer_partners.last_upd                := SYSDATE;
        l_hm_customer_partners.modification_num        := 0;
        l_hm_customer_partners.active_flag             := '1';
        l_hm_customer_partners.version                 := '1.0';
        l_hm_customer_partners.last_version_flag       := '2';
        l_hm_customer_partners.operate_status          := 'CREATE';
        l_hm_customer_partners.lock_flag               := '0';
        l_hm_customer_partners.for_gvs                 := '1';
        l_hm_customer_partners.delete_flag             := '0';
        ls_partnerid                                   := comm_util.func_new_rowid();
        l_hm_customer_partners.row_id                  := ls_partnerid;
        l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.customer_number;
        l_hm_customer_partners.cust_partner_type       := lv_partner_function;
        
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
  		
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = ls_salesid;
  		
        UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = l_apply_customer.sold_to_party;
  		
      END IF;
  
      l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
      l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
      l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
      l_hm_applys_transactions.master_row_code := l_apply_customer.sold_to_party;
      l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
      l_hm_applys_transactions.created_by      := in_user_name;
      l_hm_applys_transactions.created         := SYSDATE;
      l_hm_applys_transactions.last_upd_by     := in_user_name;
      l_hm_applys_transactions.last_upd        := SYSDATE;
      l_hm_applys_transactions.active_flag     := '1';
      l_hm_applys_transactions.delete_flag     := '0';
    		
      INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
        
    END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The soldto partner create error:' || SQLERRM;
	END prc_soldto_old_update;
*/  
	PROCEDURE prc_rrsflag_update
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_salesorg  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer         hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners   hm_customer_partners%ROWTYPE;
		l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
	
		ls_partnerid VARCHAR2(20);
		ls_salesid   hm_customer_sales_data.row_id%TYPE; --B客户的销售视图ID
	
		li_count INTEGER := 0;
	  lv_partner_function VARCHAR2(10);
    
	BEGIN
	  retcode := 'S';
    retmsg  := 'The RRS partner create success!';
	
  	l_apply_customer := in_datavalue;
    
    IF l_apply_customer.market_area IN ('X','S','W') AND l_apply_customer.partner_function <> 'PY' THEN
    
      FOR CUR_ROWS IN ( SELECT * FROM HM_MAP_CUST_SALESORG2RRSCUST T WHERE T.SALES_ORG = in_salesorg )
      LOOP
        SELECT MAX(b.row_id)
          INTO ls_salesid
          FROM hm_customers           a,
               hm_customer_sales_data b
         WHERE a.row_id = b.customer_id
           AND lpad(a.customer_number, 10, '0') = lpad(cur_rows.sp_customer_number, 10, '0')
           AND b.sales_group = in_salesorg
           AND b.distribution_channel = '00'
           AND b.division = '00'
           AND a.active_flag = '1'
           AND a.delete_flag = '0'
           AND b.active_flag = '1'
           AND b.delete_flag = '0';
        IF ls_salesid IS NULL THEN
          retcode := 'E';
          retmsg  := '日日顺合作伙伴关系更新: 客户:[' || cur_rows.sp_customer_number || ']的[' ||
                     in_salesorg || ']销售区域视图尚未维护 !';
          RETURN;
        END IF;
  	
        lv_partner_function := 'SH';
        
        SELECT COUNT(*)
          INTO li_count
          FROM hm_customer_partners
         WHERE cust_partner_type = lv_partner_function
           AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_customer.customer_number, 10, '0')
           AND sales_area_view_id = ls_salesid
           AND active_flag = '1'
           AND delete_flag = '0';
    	
        --market_area(RRS_FLAG) 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
        IF li_count < 1 THEN
          --B中不经存在SH
          l_hm_customer_partners.sales_area_view_id      := ls_salesid;
          l_hm_customer_partners.created_by              := in_user_name;
          l_hm_customer_partners.created                 := SYSDATE;
          l_hm_customer_partners.last_upd_by             := in_user_name;
          l_hm_customer_partners.last_upd                := SYSDATE;
          l_hm_customer_partners.modification_num        := 0;
          l_hm_customer_partners.active_flag             := '1';
          l_hm_customer_partners.version                 := '1.0';
          l_hm_customer_partners.last_version_flag       := '2';
          l_hm_customer_partners.operate_status          := 'CREATE';
          l_hm_customer_partners.lock_flag               := '0';
          l_hm_customer_partners.for_gvs                 := '1';
          l_hm_customer_partners.delete_flag             := '0';
          ls_partnerid                                   := comm_util.func_new_rowid();
          l_hm_customer_partners.row_id                  := ls_partnerid;
          l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.customer_number;
          l_hm_customer_partners.cust_partner_type       := lv_partner_function;
          
          INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
          comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
    		
          UPDATE hm_customer_sales_data
             SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE row_id = ls_salesid;
    		
          UPDATE hm_customers
             SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE customer_number = cur_rows.sp_customer_number;
    		
        END IF;
    
        l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
        l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
        l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
        l_hm_applys_transactions.master_row_code := cur_rows.sp_customer_number;
        l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
        l_hm_applys_transactions.created_by      := in_user_name;
        l_hm_applys_transactions.created         := SYSDATE;
        l_hm_applys_transactions.last_upd_by     := in_user_name;
        l_hm_applys_transactions.last_upd        := SYSDATE;
        l_hm_applys_transactions.active_flag     := '1';
        l_hm_applys_transactions.delete_flag     := '0';
      		
        INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
        
      END LOOP;
    END IF;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The RRS partner create error:' || SQLERRM;
	END prc_rrsflag_update;
  
  /****************************************************************
  功能描述：客户信息从结构更新到数据库,依据in_hm_customers.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_customers 待更新结构
                                     (*如果in_hm_customers.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_customer_type2db( in_hm_customers IN hm_customers%Rowtype,
                                  retcode OUT VARCHAR2,
                                  retmsg  OUT VARCHAR2)
  IS
    l_hm_customers hm_customers%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_customer_type2db: succeed!';
    
    if in_hm_customers.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_customer_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_customers := in_hm_customers;
    
    update hm_customers
       set row_id = l_hm_customers.row_id,
           customer_number = l_hm_customers.customer_number,
           account_group = l_hm_customers.account_group,
           customer_name1 = l_hm_customers.customer_name1,
           customer_name2 = l_hm_customers.customer_name2,
           customer_name3 = l_hm_customers.customer_name3,
           customer_name = l_hm_customers.customer_name,
           search_term = l_hm_customers.search_term,
           postal_code = l_hm_customers.postal_code,
           city_street_room = l_hm_customers.city_street_room,
           street_room = l_hm_customers.street_room,
           country = l_hm_customers.country,
           region = l_hm_customers.region,
           phone_number = l_hm_customers.phone_number,
           language = l_hm_customers.language,
           fax_number = l_hm_customers.fax_number,
           name1 = l_hm_customers.name1,
           phone_number1 = l_hm_customers.phone_number1,
           cust_contact_dept = l_hm_customers.cust_contact_dept,
           cust_contact_desc = l_hm_customers.cust_contact_desc,
           cust_contact_func = l_hm_customers.cust_contact_func,
           tax_code = l_hm_customers.tax_code,
           tax_code_desc = l_hm_customers.tax_code_desc,
           bank_account_num = l_hm_customers.bank_account_num,
           bank_branch_code = l_hm_customers.bank_branch_code,
           bank_country = l_hm_customers.bank_country,
           bank_name = l_hm_customers.bank_name,
           customer_category = l_hm_customers.customer_category,
           niles_mark = l_hm_customers.niles_mark,
           estimate_status = l_hm_customers.estimate_status,
           industry_category = l_hm_customers.industry_category,
           industry_class = l_hm_customers.industry_class,
           created_by = l_hm_customers.created_by,
           created = l_hm_customers.created,
           last_upd_by = l_hm_customers.last_upd_by,
           last_upd = l_hm_customers.last_upd,
           modification_num = l_hm_customers.modification_num,
           last_version_flag = l_hm_customers.last_version_flag,
           version = l_hm_customers.version,
           active_flag = l_hm_customers.active_flag,
           lock_flag = l_hm_customers.lock_flag,
           delete_flag = l_hm_customers.delete_flag,
           operate_status = l_hm_customers.operate_status,
           remark = l_hm_customers.remark,
           customer_stat_category = l_hm_customers.customer_stat_category,
           taxdoc_type = l_hm_customers.taxdoc_type,
           legal_person = l_hm_customers.legal_person,
           company_type = l_hm_customers.company_type,
           vendor_code = l_hm_customers.vendor_code,
           trade_code = l_hm_customers.trade_code,
           action_batch_id = l_hm_customers.action_batch_id,
           return_batch_id = l_hm_customers.return_batch_id,
           business_type = l_hm_customers.business_type,
           generate_code_flag = l_hm_customers.generate_code_flag,
           market_area = l_hm_customers.market_area,
           customer_title = l_hm_customers.customer_title,
           for_gvs = l_hm_customers.for_gvs,
           account_holder_name = l_hm_customers.account_holder_name,
           city_street_room2 = l_hm_customers.city_street_room2,
           audit_flag = l_hm_customers.audit_flag,
           cust_sub_class = l_hm_customers.cust_sub_class,
           registered_capital = l_hm_customers.registered_capital,
           handset_special_channal = l_hm_customers.handset_special_channal,
           computer_special_channal = l_hm_customers.computer_special_channal,
           temp_attribute1 = l_hm_customers.temp_attribute1,
           temp_attribute2 = l_hm_customers.temp_attribute2,
           temp_attribute3 = l_hm_customers.temp_attribute3,
           old_cust_code = l_hm_customers.old_cust_code,
           partner_flag_sp = l_hm_customers.partner_flag_sp,
           partner_flag_sh = l_hm_customers.partner_flag_sh,
           partner_flag_bp = l_hm_customers.partner_flag_bp,
           partner_flag_py = l_hm_customers.partner_flag_py,
           delete_flag_sales_org = l_hm_customers.delete_flag_sales_org,
           delete_flag_company = l_hm_customers.delete_flag_company,
           company_share = l_hm_customers.company_share,
           bu = l_hm_customers.bu,
           pl = l_hm_customers.pl,
           expiry_date = l_hm_customers.expiry_date,
           les_code = l_hm_customers.les_code,
           transportation_region = l_hm_customers.transportation_region,
           virtual_payment_flag = l_hm_customers.virtual_payment_flag,
           create_apply_id = l_hm_customers.create_apply_id,
           customer_number_temp = l_hm_customers.customer_number_temp,
           customer_flag = l_hm_customers.customer_flag,
           cust_flag_md = l_hm_customers.cust_flag_md,
           cust_con_flag = l_hm_customers.cust_con_flag, --国家政策标识 Lvdecheng 20120926
           cust_ds_flag = l_hm_customers.cust_ds_flag ,
           cust_hub_flag = l_hm_customers.cust_hub_flag,  --是否HUB库
           cust_cnumber_base = l_hm_customers.cust_cnumber_base,
           cust_flag_banking = l_hm_customers.cust_flag_banking
     where row_id = l_hm_customers.row_id;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_customer_type2db:'|| SQLERRM;
  END prc_customer_type2db;

  /****************************************************************
  功能描述：客户公司代码信息从结构更新到数据库,依据 in_hm_cust_company_data.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_cust_company_data 待更新结构
                                     (*如果 in_hm_cust_company_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_customer_company_type2db( in_hm_cust_company_data IN hm_cust_company_data%Rowtype,
                                  retcode OUT VARCHAR2,
                                  retmsg  OUT VARCHAR2)
  IS
    l_hm_cust_company_data hm_cust_company_data%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_customer_company_type2db: succeed!';
    
    if in_hm_cust_company_data.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_customer_company_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_cust_company_data := in_hm_cust_company_data;
    
    UPDATE hm_cust_company_data
       SET --row_id = l_hm_cust_company_data.row_id,
           customer_id = l_hm_cust_company_data.customer_id,
           company_code = l_hm_cust_company_data.company_code,
           hq = l_hm_cust_company_data.hq,
           reconcile_account = l_hm_cust_company_data.reconcile_account,
           previous_acct_number = l_hm_cust_company_data.previous_acct_number,
           sequence_no = l_hm_cust_company_data.sequence_no,
           payment_term = l_hm_cust_company_data.payment_term,
           payment_method = l_hm_cust_company_data.payment_method,
           payment_history = l_hm_cust_company_data.payment_history,
           supplier_accounting = l_hm_cust_company_data.supplier_accounting,
           tolerance_group = l_hm_cust_company_data.tolerance_group,
           created_by = l_hm_cust_company_data.created_by,
           created = l_hm_cust_company_data.created,
           last_upd_by = l_hm_cust_company_data.last_upd_by,
           last_upd = l_hm_cust_company_data.last_upd,
           modification_num = l_hm_cust_company_data.modification_num,
           last_version_flag = l_hm_cust_company_data.last_version_flag,
           version = l_hm_cust_company_data.version,
           active_flag = l_hm_cust_company_data.active_flag,
           lock_flag = l_hm_cust_company_data.lock_flag,
           delete_flag = l_hm_cust_company_data.delete_flag,
           operate_status = l_hm_cust_company_data.operate_status,
           remark = l_hm_cust_company_data.remark,
           return_batch_id = l_hm_cust_company_data.return_batch_id,
           action_batch_id = l_hm_cust_company_data.action_batch_id,
           for_gvs = l_hm_cust_company_data.for_gvs,
           preference_flag = l_hm_cust_company_data.preference_flag,
           discount_print_flag = l_hm_cust_company_data.discount_print_flag,
           account_remark = l_hm_cust_company_data.account_remark,
           audit_flag = l_hm_cust_company_data.audit_flag,
           handset_cust_type = l_hm_cust_company_data.handset_cust_type,
           handset_cust_level = l_hm_cust_company_data.handset_cust_level,
           computer_special_channal = l_hm_cust_company_data.computer_special_channal,
           temp_attribute1 = l_hm_cust_company_data.temp_attribute1,
           temp_attribute2 = l_hm_cust_company_data.temp_attribute2,
           temp_attribute3 = l_hm_cust_company_data.temp_attribute3,
           create_apply_id = l_hm_cust_company_data.create_apply_id
     WHERE row_id = l_hm_cust_company_data.row_id;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_customer_company_type2db:'|| SQLERRM;
  END prc_customer_company_type2db;

  /****************************************************************
  功能描述：客户销售信息从结构更新到数据库,依据 in_hm_customer_sales_data.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_customer_sales_data 待更新结构
                                     (*如果 in_hm_customer_sales_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_customer_salesorg_type2db( in_hm_customer_sales_data IN hm_customer_sales_data%Rowtype,
                                  retcode OUT VARCHAR2,
                                  retmsg  OUT VARCHAR2)
  IS
    l_hm_customer_sales_data hm_customer_sales_data%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_customer_salesorg_type2db: succeed!';
    
    if in_hm_customer_sales_data.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_customer_salesorg_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_customer_sales_data := in_hm_customer_sales_data;


    
    UPDATE hm_customer_sales_data
       SET --row_id = l_hm_customer_sales_data.row_id,
           customer_id = l_hm_customer_sales_data.customer_id,
           distribution_channel = l_hm_customer_sales_data.distribution_channel,
           division = l_hm_customer_sales_data.division,
           sales_group = l_hm_customer_sales_data.sales_group,
           sales_region = l_hm_customer_sales_data.sales_region,
           currency_code = l_hm_customer_sales_data.currency_code,
           customer_pricing_proccess = l_hm_customer_sales_data.customer_pricing_proccess,
           customer_summary_group = l_hm_customer_sales_data.customer_summary_group,
           ship_condition = l_hm_customer_sales_data.ship_condition,
           ship_plant = l_hm_customer_sales_data.ship_plant,
           account_distribute_group = l_hm_customer_sales_data.account_distribute_group,
           cust_tax_category = l_hm_customer_sales_data.cust_tax_category,
           price_list_type = l_hm_customer_sales_data.price_list_type,
           payment_terms_1 = l_hm_customer_sales_data.payment_terms_1,
           price_group = l_hm_customer_sales_data.price_group,
           created_by = l_hm_customer_sales_data.created_by,
           created = l_hm_customer_sales_data.created,
           last_upd_by = l_hm_customer_sales_data.last_upd_by,
           last_upd = l_hm_customer_sales_data.last_upd,
           modification_num = l_hm_customer_sales_data.modification_num,
           last_version_flag = l_hm_customer_sales_data.last_version_flag,
           version = l_hm_customer_sales_data.version,
           active_flag = l_hm_customer_sales_data.active_flag,
           lock_flag = l_hm_customer_sales_data.lock_flag,
           delete_flag = l_hm_customer_sales_data.delete_flag,
           operate_status = l_hm_customer_sales_data.operate_status,
           remark = l_hm_customer_sales_data.remark,
           sales_grp = l_hm_customer_sales_data.sales_grp,
           pod_relation = l_hm_customer_sales_data.pod_relation,
           return_batch_id = l_hm_customer_sales_data.return_batch_id,
           action_batch_id = l_hm_customer_sales_data.action_batch_id,
           for_gvs = l_hm_customer_sales_data.for_gvs,
           audit_flag = l_hm_customer_sales_data.audit_flag,
           create_apply_id = l_hm_customer_sales_data.create_apply_id
     WHERE row_id = l_hm_customer_sales_data.row_id;

    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_customer_salesorg_type2db:'|| SQLERRM;
  END prc_customer_salesorg_type2db;  
  
  /****************************************************************
  功能描述：客户管理户信息从结构更新到数据库,依据 in_hm_cust_sub_company.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_cust_sub_company 待更新结构
                                     (*如果 in_hm_cust_sub_company.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_customer_subcomp_type2db( in_hm_cust_sub_company IN hm_cust_sub_company%Rowtype,
                                  retcode OUT VARCHAR2,
                                  retmsg  OUT VARCHAR2)
  IS
    l_hm_cust_sub_company hm_cust_sub_company%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_customer_subcomp_type2db: succeed!';
    
    if in_hm_cust_sub_company.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_customer_subcomp_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_cust_sub_company := in_hm_cust_sub_company;

    UPDATE hm_cust_sub_company
       SET --row_id = l_hm_cust_sub_company.row_id,
           branch_code = l_hm_cust_sub_company.branch_code,
           customer_category = l_hm_cust_sub_company.customer_category,
           branch_company_code = l_hm_cust_sub_company.branch_company_code,
           branch_company_name = l_hm_cust_sub_company.branch_company_name,
           customer_manager = l_hm_cust_sub_company.customer_manager,
           created_by = l_hm_cust_sub_company.created_by,
           created = l_hm_cust_sub_company.created,
           last_upd_by = l_hm_cust_sub_company.last_upd_by,
           last_upd = l_hm_cust_sub_company.last_upd,
           modification_num = l_hm_cust_sub_company.modification_num,
           delete_flag = l_hm_cust_sub_company.delete_flag,
           active_flag = l_hm_cust_sub_company.active_flag,
           remark = l_hm_cust_sub_company.remark,
           version = l_hm_cust_sub_company.version,
           last_version_flag = l_hm_cust_sub_company.last_version_flag,
           operate_status = l_hm_cust_sub_company.operate_status,
           lock_flag = l_hm_cust_sub_company.lock_flag,
           return_batch_id = l_hm_cust_sub_company.return_batch_id,
           action_batch_id = l_hm_cust_sub_company.action_batch_id,
           for_gvs = l_hm_cust_sub_company.for_gvs,
           audit_flag = l_hm_cust_sub_company.audit_flag,
           industry_class = l_hm_cust_sub_company.industry_class,
           area_code = l_hm_cust_sub_company.area_code,
           jyt = l_hm_cust_sub_company.jyt,--cuiyj20110112
           create_apply_id = l_hm_cust_sub_company.create_apply_id,
           BRANCH_COMPANY_CODE_TEMP = l_hm_cust_sub_company.BRANCH_COMPANY_CODE_TEMP
           --customer_flag = l_hm_cust_sub_company.customer_flag
     WHERE row_id = l_hm_cust_sub_company.row_id;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_customer_subcomp_type2db:'|| SQLERRM;
  END prc_customer_subcomp_type2db;  
  
  /****************************************************************
  功能描述：客户扩展信息从结构更新到数据库,依据 in_hm_cust_addition_data.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_cust_addition_data 待更新结构
                                     (*如果 in_hm_cust_addition_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_customer_extend_type2db( in_hm_cust_addition_data IN hm_cust_additional_data%Rowtype,
                                  retcode OUT VARCHAR2,
                                  retmsg  OUT VARCHAR2)
  IS
    l_hm_cust_additional_data hm_cust_additional_data%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_customer_extend_type2db: succeed!';
    
    if in_hm_cust_addition_data.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_customer_extend_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
    
    l_hm_cust_additional_data := in_hm_cust_addition_data;

    UPDATE hm_cust_additional_data
       SET --row_id = l_hm_cust_additional_data.row_id,
           customer_id = l_hm_cust_additional_data.customer_id,
           global_pc_code = l_hm_cust_additional_data.global_pc_code,
           parent_company_code = l_hm_cust_additional_data.parent_company_code,
           org_group_code = l_hm_cust_additional_data.org_group_code,
           is_storefront = l_hm_cust_additional_data.is_storefront,
           old_customer_code = l_hm_cust_additional_data.old_customer_code,
           trade_descript = l_hm_cust_additional_data.trade_descript,
           is_seller = l_hm_cust_additional_data.is_seller,
           sales_region = l_hm_cust_additional_data.sales_region,
           cust_property = l_hm_cust_additional_data.cust_property,
           cust_property_desc = l_hm_cust_additional_data.cust_property_desc,
           return_batch_id = l_hm_cust_additional_data.return_batch_id,
           action_batch_id = l_hm_cust_additional_data.action_batch_id,
           area_code = l_hm_cust_additional_data.area_code,
           created_by = l_hm_cust_additional_data.created_by,
           created = l_hm_cust_additional_data.created,
           last_upd_by = l_hm_cust_additional_data.last_upd_by,
           last_upd = l_hm_cust_additional_data.last_upd,
           modification_num = l_hm_cust_additional_data.modification_num,
           last_version_flag = l_hm_cust_additional_data.last_version_flag,
           version = l_hm_cust_additional_data.version,
           active_flag = l_hm_cust_additional_data.active_flag,
           lock_flag = l_hm_cust_additional_data.lock_flag,
           delete_flag = l_hm_cust_additional_data.delete_flag,
           operate_status = l_hm_cust_additional_data.operate_status,
           remark = l_hm_cust_additional_data.remark,
           for_gvs = l_hm_cust_additional_data.for_gvs,
           audit_flag = l_hm_cust_additional_data.audit_flag,
           cust_type = l_hm_cust_additional_data.cust_type,
           csg_keyaccount_flag = l_hm_cust_additional_data.csg_keyaccount_flag,
           csg_keyaccount_category = l_hm_cust_additional_data.csg_keyaccount_category,
           csg_keyaccount_class = l_hm_cust_additional_data.csg_keyaccount_class,
           cust_functions = l_hm_cust_additional_data.cust_functions,
           
           BRAND1 = l_hm_cust_additional_data.BRAND1,
           BRAND2 = l_hm_cust_additional_data.BRAND2,
           BRAND3 = l_hm_cust_additional_data.BRAND3,
           SALES_AMOUNT1 = l_hm_cust_additional_data.SALES_AMOUNT1,
           SALES_AMOUNT2 = l_hm_cust_additional_data.SALES_AMOUNT2,
           SALES_AMOUNT3 = l_hm_cust_additional_data.SALES_AMOUNT3,
           SALES_VOLUME = l_hm_cust_additional_data.SALES_VOLUME,
           OUTLET_AREA = l_hm_cust_additional_data.OUTLET_AREA,
           REGISTERED_CAPITAL = l_hm_cust_additional_data.REGISTERED_CAPITAL,
           MANAGE_LIMIT_YEAR = l_hm_cust_additional_data.MANAGE_LIMIT_YEAR,
           COOPERATION_SCOPE = l_hm_cust_additional_data.COOPERATION_SCOPE,
           COOPERATION_SALES_VOLUMN = l_hm_cust_additional_data.COOPERATION_SALES_VOLUMN,
           
           /****/
           -------------start baochh 20120717
            CUST_SHOP_NUMBER = l_hm_cust_additional_data.cust_shop_number,          
             CUST_SHOP_CONTAIN = l_hm_cust_additional_data.cust_shop_contain,   
             CUST_SHOP_SALE_RATE_MONTH = l_hm_cust_additional_data.cust_shop_sale_rate_month,      
             CUST_SHOP_RETAIL_RATE = l_hm_cust_additional_data.Cust_Shop_Retail_Rate,  
             SBR_NAME = l_hm_cust_additional_data.Sbr_Name,
             SBR_OWNERNAME = l_hm_cust_additional_data.Sbr_Ownername,    
             SBR_ADDRESSEX = l_hm_cust_additional_data.Sbr_Addressex, 
             SBR_POST = l_hm_cust_additional_data.Sbr_Post,          
             SBR_PHONE = l_hm_cust_additional_data.Sbr_Phone,
             SBR_HOUSEMJ = l_hm_cust_additional_data.Sbr_Housemj,
             SBR_YJBUILDDATE = l_hm_cust_additional_data.Sbr_Yjbuilddate,
             SBR_SHOPTYPE = l_hm_cust_additional_data.Sbr_Shoptype,
             CUST_CNUMBER = l_hm_cust_additional_data.Cust_Cnumber,
             SBR_JTCUSTOMER = l_hm_cust_additional_data.Sbr_Jtcustomer,
            Sbr_Jtcustomer_Name=l_hm_cust_additional_data.Sbr_Jtcustomer_Name,
    ----------------- baochh end 
           
           manage_customer = l_hm_cust_additional_data.manage_customer,
           create_apply_id = l_hm_cust_additional_data.create_apply_id
     WHERE row_id = l_hm_cust_additional_data.row_id;
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_customer_extend_type2db:'|| SQLERRM;
  END prc_customer_extend_type2db;  
  
	/****************************************************************
  功能描述：根据业务申请ID将业务申请信息触发成为相应的客户主数据维护动作
  作者：    zhangbiao
  时间：    2009-04-01    
         
  输入参数说明： IN_APPLY_ID           业务申请单ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。根据业务类型分为三部分：创建、更新、扩展
       2。创建时将申请表中的数据分发到客户表中即可
       3。更新时根据申请表中_X的内容更新客户表
       4。扩展时根据扩展试图将数据分发到客户表
       5,内部调用 prc_input_allcheck
  ****************************************************************/
	PROCEDURE prc_base_trans
	( customer_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_customers IN OUT hm_customers%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';  
    
        IF l_apply_customer.operate_type = 'CREATE' THEN

          l_hm_customers.customer_name1 := l_apply_customer.customer_name; --客户全称1(名称.ADDR1_DATA-NAME1)
          l_hm_customers.customer_name2 := l_apply_customer.name2; --客户名称2(名称.ADDR1_DATA-NAME2)
          l_hm_customers.customer_name3 := l_apply_customer.name3; --客户名称3(事业部大工贸客户.ADDR1_DATA-NAME3)
          l_hm_customers.search_term := l_apply_customer.search_terms; --搜索项(排序字段.ADDR1_DATA-SORT1)
          l_hm_customers.postal_code := l_apply_customer.postal_code; --邮政编码(邮政编码.ADDR1_DATA-POST_CODE1)
          l_hm_customers.city_street_room := l_apply_customer.city; --城市(城市.ADDR1_DATA-CITY1)
          l_hm_customers.street_room := l_apply_customer.street; --街道(住宅号及街道.ADDR1_DATA-STREET)
          l_hm_customers.country := l_apply_customer.customer_country; --国家(国家代码.ADDR1_DATA-COUNTRY)[Country]
          l_hm_customers.region := l_apply_customer.region; --地区(地区.ADDR1_DATA-REGION)[Region]
          l_hm_customers.phone_number := l_apply_customer.telephone; --电话(电话.SZA1_D0100-TEL_NUMBER)
          l_hm_customers.language := l_apply_customer.language; --语言代码(语言.ADDR1_DATA-LANGU)[LanguageType]
          l_hm_customers.fax_number := l_apply_customer.fax; --传真(SZA1_D0100-FAX_NUMBER)
          l_hm_customers.name1 := l_apply_customer.contact_person; --名称1:联系人名称
          l_hm_customers.phone_number1 := l_apply_customer.phone_number1; --电话1:联系人电话1
          l_hm_customers.tax_code := l_apply_customer.vat_reg_no; --纳税人登记号(增值税登记号.KNA1-STCEG)

          l_hm_customers.niles_mark := l_apply_customer.niles_mark; --80性质(尼尔森标识.KNA1-NIELS)[NilesMark]
          l_hm_customers.estimate_status := l_apply_customer.estimate_status; --市场级别(预测合法状态,KNA1-GFORM)[MarketLevel]
          l_hm_customers.industry_category := l_apply_customer.industry; --行业分类(行业,KNA1-BRSCH)[IndustryCategory]
          l_hm_customers.industry_class := l_apply_customer.industry_class; --客户性质小类(行业部门.KNA1-BRAN1)[IndustryClass]
          --l_hm_customers.customer_category := l_apply_customer.customer_class; --客户性质大类(客户分类.KNA1-KUKLA)[CustomerCategory]
          --根据小渠道 确定大渠道 
          FOR cur_rows IN (SELECT * FROM hm_fnd_values t
                           WHERE t.value_set_id = 'IndustryClass'
                           AND t.value = l_apply_customer.INDUSTRY_CLASS ) 
          loop
            l_hm_customers.customer_category := cur_rows.parent_value_low;
          END LOOP;
          
          l_hm_customers.customer_stat_category := l_apply_customer.customer_stat_category; --客户统计分类
          l_hm_customers.taxdoc_type := l_apply_customer.taxdoc_type; --开票类型(层次类型)0增值税1普通发票(分配给层次.KNA1-HZUOR)[TaxDocType]
          l_hm_customers.legal_person := l_apply_customer.legal_person; --法人代表(组代码.KNA1-KONZS)
          l_hm_customers.company_type := l_apply_customer.company_type; --公司类型(县代码.KNA1-COUNC)[CompanyType]
          l_hm_customers.vendor_code := l_apply_customer.vendor; --供应商编号(供应商.KNA1-LIFNR)
          if l_apply_customer.business_type = 'GM' then
            l_hm_customers.trade_code := l_apply_customer.dept_code; --工贸代码(列车站.KNA1-BAHNS)
          elsif l_apply_customer.business_type = 'JC' then
            --modified by zhangbiao 20110526 for fanzg
            --l_hm_customers.trade_code := '12'; --工贸代码(列车站.KNA1-BAHNS)
            l_hm_customers.trade_code := l_apply_customer.train_station; --工贸代码(列车站.KNA1-BAHNS)
          else --pl
            l_hm_customers.trade_code := l_apply_customer.train_station;
          end if;
          l_hm_customers.market_area := l_apply_customer.market_area; --客户分类标识(地区市场.KNA1-RPMKR) 
          l_hm_customers.customer_title := l_apply_customer.customer_title; --客户标题(标题.SZA1_D0100-TITLE_MEDI)
          l_hm_customers.partner_flag_sp := l_apply_customer.partner_flag_sp; --是否有售达方功能,1:有;0:无
          l_hm_customers.partner_flag_sh := l_apply_customer.partner_flag_sh; --是否有送大方功能,1:有;0:无
          l_hm_customers.partner_flag_bp := l_apply_customer.partner_flag_bp; --是否有开票方功能,1:有;0:无
          l_hm_customers.partner_flag_py := l_apply_customer.partner_flag_py; --是否有付款方功能,1:有;0:无
          
          l_hm_customers.customer_flag := l_apply_customer.customer_flag; 
          
          l_hm_customers.cust_flag_md := l_apply_customer.cust_flag_md; --是否为门店 Lvdecheng
          
          l_hm_customers.cust_con_flag := l_apply_customer.cust_con_flag ; --国家政策标识 Lvdecheng 20120926
          
          --客户伞下付款方时，日日顺标记为'V' Lvdecheng 20121024
          IF l_apply_customer.Business_Code = 'CST-CREATE-GM-PYSF-1169' THEN
              l_hm_customers.market_area := 'V';
              l_hm_customers.customer_flag := '';
          END IF;
          
          --l_hm_customers.customer_name := l_apply_customer.; --客户简称
          --l_hm_customers.cust_contact_dept := l_apply_customer.cust_contact_dept; --客户联系人部门
          --l_hm_customers.cust_contact_desc := l_apply_customer.cust_contact_desc; --描述:客户联系人描述
          --l_hm_customers.cust_contact_func := l_apply_customer.cust_contact_func; --客户联系人功能
          l_hm_customers.tax_code_desc := l_apply_customer.tax_code_desc; --描述:税号描述(用作组织代码证STCD1)
          --l_hm_customers.bank_account_num := l_apply_customer.bank_account_num; --银行帐户
          --l_hm_customers.bank_branch_code := l_apply_customer.bank_branch_code; --银行码;一般为供应商编码
          --l_hm_customers.bank_country := l_apply_customer.bank_country; --银行所属国家
          --l_hm_customers.bank_name := l_apply_customer.bank_name; --银行名称
          --l_hm_customers.account_holder_name := l_apply_customer.account_holder_name; --帐户持有人名称
          --l_hm_customers.city_street_room2 := l_apply_customer.city_street_room2; --城市街道房号2
          --l_hm_customers.cust_sub_class := l_apply_customer.cust_sub_class; --客户子分类标识(0,无 1,日日顺客户、2,成套客户、3,特种电器客户、4工贸自营店)
          --l_hm_customers.registered_capital := l_apply_customer.registered_capital; --客户注册资本(数字型)
          --l_hm_customers.handset_special_channal := l_apply_customer.handset_special_channal; --手机专用渠道
          --l_hm_customers.computer_special_channal := l_apply_customer.computer_special_channal; --计算机专用渠道
          --l_hm_customers.temp_attribute1 := l_apply_customer.temp_attribute1; --临时属性1
          --l_hm_customers.temp_attribute2 := l_apply_customer.temp_attribute2; --临时属性2
          --l_hm_customers.temp_attribute3 := l_apply_customer.temp_attribute3; --临时属性3
          --l_hm_customers.old_cust_code := l_apply_customer.old_cust_code; --旧客户编码
          --l_hm_customers.delete_flag_sales_org := l_apply_customer.delete_flag_sales_org; --客户销售组织删除标记:0正常,1删除
          --l_hm_customers.delete_flag_company := l_apply_customer.delete_flag_company; --客户公司删除标记:0正常,1删除
          --l_hm_customers.company_share := l_apply_customer.company_share; --股份，行业代码 2
          --l_hm_customers.bu := l_apply_customer.bu; --BU，行业代码 3
          --l_hm_customers.pl := l_apply_customer.pl; --PL，行业代码 4
          --l_hm_customers.expiry_date := l_apply_customer.expiry_date; --有效期，名称 3
          --l_hm_customers.les_code := l_apply_customer.les_code; --LES编码
          --l_hm_customers.transportation_region := l_apply_customer.transportation_region; --运输区域
          --l_hm_customers.virtual_payment_flag := l_apply_customer.virtual_payment_flag; --是否虚拟付款方
                    
          --是否电商付款方 Lvdecheng 20130823
          l_hm_customers.cust_ds_flag := l_apply_customer.cust_ds_flag ;
          
          --是否Hub库 Lvdecheng 20131127
          l_hm_customers.cust_hub_flag := l_apply_customer.cust_hub_flag;
          
          --客户方代码 Lvdecheng 20140630
          l_hm_customers.cust_cnumber_base := l_apply_customer.cust_cnumber_base;
          --是否金融户 lzl 
           l_hm_customers.cust_flag_banking := l_apply_customer.cust_flag_banking;
        
        ELSIF l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') THEN
        
          if l_apply_customer.customer_name_x = 'X' then
            l_hm_customers.customer_name1 := l_apply_customer.customer_name; --客户全称1(名称.ADDR1_DATA-NAME1)
          end if;
          if l_apply_customer.name2_x = 'X' then
            l_hm_customers.customer_name2 := l_apply_customer.name2; --客户名称2(名称.ADDR1_DATA-NAME2)
          end if;
          if l_apply_customer.name3_x = 'X' then
            l_hm_customers.customer_name3 := l_apply_customer.name3; --客户名称3(事业部大工贸客户.ADDR1_DATA-NAME3)
          end if;
          if l_apply_customer.search_terms_x = 'X' then
            l_hm_customers.search_term := l_apply_customer.search_terms; --搜索项(排序字段.ADDR1_DATA-SORT1)
          end if;
          if l_apply_customer.postal_code_x = 'X' then
            l_hm_customers.postal_code := l_apply_customer.postal_code; --邮政编码(邮政编码.ADDR1_DATA-POST_CODE1)
          end if;
          if l_apply_customer.city_x = 'X' then
            l_hm_customers.city_street_room := l_apply_customer.city; --城市(城市.ADDR1_DATA-CITY1)
          end if;
          if l_apply_customer.street_x = 'X' then
            l_hm_customers.street_room := l_apply_customer.street; --街道(住宅号及街道.ADDR1_DATA-STREET)
          end if;
          if l_apply_customer.customer_country_x = 'X' then
            l_hm_customers.country := l_apply_customer.customer_country; --国家(国家代码.ADDR1_DATA-COUNTRY)[Country]
          end if;
          if l_apply_customer.region_x = 'X' then
            l_hm_customers.region := l_apply_customer.region; --地区(地区.ADDR1_DATA-REGION)[Region]
          end if;
          if l_apply_customer.telephone_x = 'X' then
            l_hm_customers.phone_number := l_apply_customer.telephone; --电话(电话.SZA1_D0100-TEL_NUMBER)
          end if;
          if l_apply_customer.language_x = 'X' then
            l_hm_customers.language := l_apply_customer.language; --语言代码(语言.ADDR1_DATA-LANGU)[LanguageType]
          end if;
          if l_apply_customer.fax_x = 'X' then
            l_hm_customers.fax_number := l_apply_customer.fax; --传真(SZA1_D0100-FAX_NUMBER)
          end if;
          if l_apply_customer.contact_person_x = 'X' then
            l_hm_customers.name1 := l_apply_customer.contact_person; --名称1:联系人名称
          end if;
          if l_apply_customer.phone_number1_x = 'X' then
            l_hm_customers.phone_number1 := l_apply_customer.phone_number1; --电话1:联系人电话1
          end if;
          if l_apply_customer.vat_reg_no_x = 'X' then
            l_hm_customers.tax_code := l_apply_customer.vat_reg_no; --纳税人登记号(增值税登记号.KNA1-STCEG)
          end if;
          if l_apply_customer.niles_mark_x = 'X' then
            l_hm_customers.niles_mark := l_apply_customer.niles_mark; --80性质(尼尔森标识.KNA1-NIELS)[NilesMark]
          end if;
          if l_apply_customer.estimate_status_x = 'X' then
            l_hm_customers.estimate_status := l_apply_customer.estimate_status; --市场级别(预测合法状态,KNA1-GFORM)[MarketLevel]
          end if;
          if l_apply_customer.industry_x = 'X' then
            l_hm_customers.industry_category := l_apply_customer.industry; --行业分类(行业,KNA1-BRSCH)[IndustryCategory]
          end if;
/*          if l_apply_customer.customer_class_x = 'X' then
            l_hm_customers.customer_category := l_apply_customer.customer_class; --客户性质大类(客户分类.KNA1-KUKLA)[CustomerCategory]
          end if;*/
          if l_apply_customer.industry_class_x = 'X' then
            l_hm_customers.industry_class := l_apply_customer.industry_class; --客户性质小类(行业部门.KNA1-BRAN1)[IndustryClass]
            --根据小渠道 确定大渠道 
            FOR cur_rows IN (SELECT * FROM hm_fnd_values t
                             WHERE t.value_set_id = 'IndustryClass'
                             AND t.value = l_apply_customer.INDUSTRY_CLASS ) 
            loop
              l_hm_customers.customer_category := cur_rows.parent_value_low;
            END LOOP;
            
          end if;
          if l_apply_customer.customer_stat_category_x = 'X' then
            l_hm_customers.customer_stat_category := l_apply_customer.customer_stat_category; --客户统计分类
          end if;
          if l_apply_customer.taxdoc_type_x = 'X' then
            l_hm_customers.taxdoc_type := l_apply_customer.taxdoc_type; --开票类型(层次类型)0增值税1普通发票(分配给层次.KNA1-HZUOR)[TaxDocType]
          end if;
          if l_apply_customer.legal_person_x = 'X' then
            l_hm_customers.legal_person := l_apply_customer.legal_person; --法人代表(组代码.KNA1-KONZS)
          end if;
          if l_apply_customer.company_type_x = 'X' then
            l_hm_customers.company_type := l_apply_customer.company_type; --公司类型(县代码.KNA1-COUNC)[CompanyType]
          end if;
          if l_apply_customer.vendor_x = 'X' then
            l_hm_customers.vendor_code := l_apply_customer.vendor; --供应商编号(供应商.KNA1-LIFNR)
          end if;
                      
          if l_apply_customer.market_area_x = 'X' then
            l_hm_customers.market_area := l_apply_customer.market_area; --客户分类标识(地区市场.KNA1-RPMKR) 
          end if;
          if l_apply_customer.customer_title_x = 'X' then
            l_hm_customers.customer_title := l_apply_customer.customer_title; --客户标题(标题.SZA1_D0100-TITLE_MEDI)
          end if;
          if l_apply_customer.partner_flag_sp_x = 'X' then
            l_hm_customers.partner_flag_sp := l_apply_customer.partner_flag_sp; --是否有售达方功能,1:有;0:无
          end if;
          if l_apply_customer.partner_flag_sh_x = 'X' then
            l_hm_customers.partner_flag_sh := l_apply_customer.partner_flag_sh; --是否有送大方功能,1:有;0:无
          end if;
          if l_apply_customer.partner_flag_bp_x = 'X' then
            l_hm_customers.partner_flag_bp := l_apply_customer.partner_flag_bp; --是否有开票方功能,1:有;0:无
          end if;
          if l_apply_customer.partner_flag_py_x = 'X' then
            l_hm_customers.partner_flag_py := l_apply_customer.partner_flag_py; --是否有付款方功能,1:有;0:无
          end if;
          if l_apply_customer.train_station_x= 'X' then
            l_hm_customers.trade_code := l_apply_customer.train_station; --工贸代码
          end if;

          if l_apply_customer.customer_flag_x= 'X' then
            l_hm_customers.customer_flag := l_apply_customer.customer_flag; --客户类别标识
          end if;
          
          if l_apply_customer.cust_flag_md_x= 'X' then
            l_hm_customers.cust_flag_md := l_apply_customer.cust_flag_md; --是否为门店 Lvdecheng
          end if;
          
          if l_apply_customer.cust_con_flag_x= 'X' then
            l_hm_customers.cust_con_flag := l_apply_customer.cust_con_flag; --是否国家政策标识
          end if;
          
          if l_apply_customer.cust_ds_flag_x = 'X' then --电商付款方 Lvdecheng 20130823
            l_hm_customers.cust_ds_flag := l_apply_customer.cust_ds_flag ; 
          end if;
          
          if l_apply_customer.cust_hub_flag_x = 'X' then --是否HUB库 Lvdecheng 20131127
            l_hm_customers.cust_hub_flag := l_apply_customer.cust_hub_flag ; 
          end if;
          
          if l_apply_customer.cust_cnumber_base_x = 'X' then --客户方代码 Lvdecheng 20140630
            l_hm_customers.cust_cnumber_base := l_apply_customer.cust_cnumber_base;
          end if;
             --是否金融户 Liuzhilong 201407
          if l_apply_customer.cust_flag_banking_x = 'X' then --客户方代码 Lvdecheng 20140630
            l_hm_customers.cust_flag_banking := l_apply_customer.cust_flag_banking;
          end if;
        END IF;
      
        --l_hm_customers 数据填充完毕，往数据库回写处理
        IF customer_exists_flag < 1 THEN
          if l_hm_customers.customer_number is null then
            l_hm_customers.customer_number := l_apply_customer.customer_number; --客户编号(客户编号.RF02D-KUNNR)
          end if;
          if l_hm_customers.account_group is null then
            l_hm_customers.account_group := l_apply_customer.account_group;--科目组(账户组.KNA1-KTOKD)[CustomerAccountGroup]
          end if;
                  
          if l_hm_customers.create_apply_id is null AND
             l_apply_customer.operate_type = 'CREATE' then
            l_hm_customers.create_apply_id := l_apply_customer.apply_id; --创建业务申请单ID
          end if;
          if l_hm_customers.customer_number_temp is null and 
             instr(l_apply_customer.customer_number,'TEMP') > 0 then
            l_hm_customers.customer_number_temp := l_apply_customer.customer_number; --临时客户编码
          end if;  
          
          if l_apply_customer.customer_number is null then
            l_hm_customers.generate_code_flag := '0'; --主数据编码生成(0,未生成,1,生成)
          else
            if instr(l_apply_customer.customer_number,'TEMP') > 0 then
              l_hm_customers.generate_code_flag := '0'; --主数据编码生成(0,未生成,1,生成)     
            else
              l_hm_customers.generate_code_flag := '1'; --主数据编码生成(0,未生成,1,生成)     
            end if;        
          end if;        
        
          if l_hm_customers.row_id is null then
            l_hm_customers.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
          end if;
          if l_hm_customers.created_by is null then
            l_hm_customers.created_by := in_user_name; --创建人_通用字段
            l_hm_customers.created := sysdate; --创建时间_通用字段
          end if;
          l_hm_customers.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_customers.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_customers.modification_num := nvl(l_hm_customers.modification_num,0) + 1; --修改次数_通用字段
          l_hm_customers.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_customers.version is null then
            l_hm_customers.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
          end if;
          if l_hm_customers.active_flag is null then
            l_hm_customers.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
          end if;
          if l_hm_customers.lock_flag is null then
            l_hm_customers.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
          end if;
          if l_hm_customers.delete_flag is null then
            l_hm_customers.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
          end if;
          if l_hm_customers.operate_status is null then
            l_hm_customers.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_customers.remark is null then
            l_hm_customers.remark := l_apply_customer.remark; --备注(可选)_通用字段
          end if;
          if l_hm_customers.action_batch_id is null then
            l_hm_customers.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
          if l_hm_customers.business_type is null then
            l_hm_customers.business_type := l_apply_customer.business_code; --MDM业务类型
          end if;
          --if l_hm_customers.for_gvs is null THEN
            --if l_hm_customers.view_base_x is null and
            --   l_hm_customers.view_company_x is null and 
            --   l_hm_customers.view_sales_x is null then
            --  l_hm_customers.for_gvs := '0';
            --else
          --IF l_hm_customers.customer_flag = 'SX' THEN
            --l_hm_customers.for_gvs := '0'; --是否传输至GVS(1,传输,0,不传)
          --ELSE
            l_hm_customers.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
          --END IF;
            --end if;
          --end if;
          if l_hm_customers.audit_flag is null then
            l_hm_customers.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
          end if;
                    
          insert into hm_customers values l_hm_customers;   -------------------------------
          
        elsif customer_exists_flag = 1 then

          l_hm_customers.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_customers.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_customers.modification_num := nvl(l_hm_customers.modification_num,0) + 1; --修改次数_通用字段
          l_hm_customers.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_customers.operate_status <> 'CREATE' then
            l_hm_customers.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_customers.action_batch_id is null then
            l_hm_customers.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;

          IF l_hm_customers.customer_flag = 'SX' THEN
            l_hm_customers.for_gvs := '0'; --是否传输至GVS(1,传输,0,不传)
          END IF;
        
          prc_customer_type2db(l_hm_customers,retcode,retmsg); ------------------------
          if retcode = 'E' then rollback; return; end if;
        ELSE 
          retcode := 'E';
          retmsg  := 'prc_base_trans: 客户信息存在，且多于一条!';
          ROLLBACK;
          RETURN;
        end if;  
        
  			comm_util.copy_table_line('HM_CUSTOMERS', '', '_HIS', l_hm_customers.row_id, retcode, retmsg);

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_base_trans:operate failure !' || SQLERRM;  
  END prc_base_trans;  
  
	PROCEDURE prc_company_trans
	( customer_company_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
    l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_cust_company_data IN OUT hm_cust_company_data%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_company_trans:operate success !';  
    
        IF l_apply_customer.operate_type IN ( 'CREATE', 'EXTEND','CHANGE' ) THEN

          l_hm_cust_company_data.hq := l_apply_customer.hq; --总部;
          l_hm_cust_company_data.reconcile_account := l_apply_customer.recon_account; --统驭科目(统驭科目.KNB1-AKONT)[ReconcileAccount];
          l_hm_cust_company_data.previous_acct_number := l_apply_customer.prev_acct_no; --先前的帐号(先前的帐号.KNB1-ALTKN);
          l_hm_cust_company_data.sequence_no := l_apply_customer.sort_key; --排序码(排序码.KNB1-ZUAWA)[OrderCode];
          l_hm_cust_company_data.payment_term := l_apply_customer.terms_of_payment; --付款条款(付款条件.KNB1-ZTERM)[PayTerm];
          l_hm_cust_company_data.payment_method := l_apply_customer.payment_methods; --付款方式(付款方式.KNB1-ZWELS)[PayMethod];
          l_hm_cust_company_data.preference_flag := l_apply_customer.preference_flag; --优先标识(01,手机户 02, 空调户);
          l_hm_cust_company_data.discount_print_flag := l_apply_customer.discount_print_flag; --折扣打印标识(职员的传真);
          l_hm_cust_company_data.account_remark := l_apply_customer.account_remark; --用友编号(账号的备注);

          --add by jun.zhao 20100426 默认值
          if l_hm_cust_company_data.sequence_no is null then
             if l_apply_customer.account_group in ('0210','0310','0330','0410') then
                l_hm_cust_company_data.sequence_no := '002';
             elsif l_apply_customer.account_group in ('0280','0380','0110','0230','0260') then
                l_hm_cust_company_data.sequence_no := '001';
              end if;
          end if;
          --add end.
          --l_hm_cust_company_data.payment_history := l_apply_customer.; --付款历史信息;
          --l_hm_cust_company_data.supplier_accounting := l_apply_customer.; --具有供应商的清算;
          --l_hm_cust_company_data.tolerance_group := l_apply_customer.; --容差组(容差组.KNB1-TOGRU);
          --l_hm_cust_company_data.handset_cust_type := l_apply_customer.handset_cust_type; --手机客户属性分类;
          --l_hm_cust_company_data.handset_cust_level := l_apply_customer.handset_cust_level; --手机客户政策级别;
          --l_hm_cust_company_data.computer_special_channal := l_apply_customer.computer_special_channal; --计算机专用渠道;
          --l_hm_cust_company_data.temp_attribute1 := l_apply_customer.temp_attribute1; --临时属性1;
          --l_hm_cust_company_data.temp_attribute2 := l_apply_customer.temp_attribute2; --临时属性2;
          --l_hm_cust_company_data.temp_attribute3 := l_apply_customer.temp_attribute3; --临时属性3;
          
          --客户总账标记 Lvdecheng 20130205
          l_hm_cust_company_data.customer_ledger_flag := l_apply_customer.customer_ledger_flag;
                    
        ELSIF l_apply_customer.operate_type IN ( 'UPDATE') THEN
          
          if l_apply_customer.hq_x = 'X' THEN
            l_hm_cust_company_data.hq := l_apply_customer.hq; --总部;
          END IF;
          IF l_apply_customer.recon_account_x = 'X' THEN
            l_hm_cust_company_data.reconcile_account := l_apply_customer.recon_account; --统驭科目(统驭科目.KNB1-AKONT)[ReconcileAccount];
          END IF;
          IF l_apply_customer.prev_acct_no_x = 'X' THEN
            l_hm_cust_company_data.previous_acct_number := l_apply_customer.prev_acct_no; --先前的帐号(先前的帐号.KNB1-ALTKN);
          END IF;
          IF l_apply_customer.sort_key_x = 'X' THEN
            l_hm_cust_company_data.sequence_no := l_apply_customer.sort_key; --排序码(排序码.KNB1-ZUAWA)[OrderCode];
          END IF;
          IF l_apply_customer.terms_of_payment_x = 'X' THEN
            l_hm_cust_company_data.payment_term := l_apply_customer.terms_of_payment; --付款条款(付款条件.KNB1-ZTERM)[PayTerm];
          END IF;
          IF l_apply_customer.payment_methods_x = 'X' THEN
            l_hm_cust_company_data.payment_method := l_apply_customer.payment_methods; --付款方式(付款方式.KNB1-ZWELS)[PayMethod];
          END IF;
          IF l_apply_customer.preference_flag_x = 'X' THEN
            l_hm_cust_company_data.preference_flag := l_apply_customer.preference_flag; --优先标识(01,手机户 02, 空调户);
          END IF;
          IF l_apply_customer.discount_print_flag_x = 'X' THEN
            l_hm_cust_company_data.discount_print_flag := l_apply_customer.discount_print_flag; --折扣打印标识(职员的传真);
          END IF;
          IF l_apply_customer.account_remark_x = 'X' THEN
            l_hm_cust_company_data.account_remark := l_apply_customer.account_remark; --用友编号(账号的备注);
          END IF;
          IF l_apply_customer.customer_ledger_flag_x = 'X' THEN
            l_hm_cust_company_data.customer_ledger_flag := l_apply_customer.customer_ledger_flag; --客户总账 Lvdecheng 20130205
          END IF;

        END IF;
      
        --l_hm_cust_company_data 数据填充完毕，往数据库回写处理
        IF customer_company_exists_flag < 1 THEN
        
          --customer_id, company_code 已经在外部填充
          --对于修改操作，只修改当前客户的公司
          --Lvdecheng 20121105
          if l_apply_customer.operate_type = 'UPDATE' then 
             NULL;
          ELSE                 
          if l_hm_cust_company_data.create_apply_id is null AND
             l_apply_customer.operate_type = 'CREATE' then
            l_hm_cust_company_data.create_apply_id := l_apply_customer.apply_id; --创建业务申请单ID
          end if;
                  
          if l_hm_cust_company_data.row_id is null then
            l_hm_cust_company_data.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
          end if;
          if l_hm_cust_company_data.created_by is null then
            l_hm_cust_company_data.created_by := in_user_name; --创建人_通用字段
            l_hm_cust_company_data.created := sysdate; --创建时间_通用字段
          end if;
          l_hm_cust_company_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_company_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_company_data.modification_num := nvl(l_hm_cust_company_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_company_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_company_data.version is null then
            l_hm_cust_company_data.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
          end if;
          if l_hm_cust_company_data.active_flag is null then
            l_hm_cust_company_data.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
          end if;
          if l_hm_cust_company_data.lock_flag is null then
            l_hm_cust_company_data.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
          end if;
          if l_hm_cust_company_data.delete_flag is null then
            l_hm_cust_company_data.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
          end if;
          if l_hm_cust_company_data.operate_status is null then
            l_hm_cust_company_data.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_company_data.remark is null then
            l_hm_cust_company_data.remark := l_apply_customer.remark; --备注(可选)_通用字段
          end if;
          if l_hm_cust_company_data.action_batch_id is null then
            l_hm_cust_company_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
          if l_hm_cust_company_data.for_gvs is null then
            l_hm_cust_company_data.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
          end if;
          if l_hm_cust_company_data.audit_flag is null then
            l_hm_cust_company_data.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
          end if;
                    
          insert into hm_cust_company_data values l_hm_cust_company_data;   -------------------------------
          end if ;
        elsif customer_company_exists_flag = 1 then

          l_hm_cust_company_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_company_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_company_data.modification_num := nvl(l_hm_cust_company_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_company_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_company_data.operate_status <> 'CREATE' then
            l_hm_cust_company_data.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_company_data.action_batch_id is null then
            l_hm_cust_company_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
        
          prc_customer_company_type2db(l_hm_cust_company_data,retcode,retmsg); ------------------------
          if retcode = 'E' then rollback; return; end if;
        ELSE 
          retcode := 'E';
          retmsg  := 'prc_company_trans: 公司代码存在，且多于一条!';
          ROLLBACK;
          RETURN;
        end if;  

				comm_util.copy_table_line('HM_CUST_COMPANY_DATA', '', '_HIS', l_hm_cust_company_data.row_id, retcode, retmsg);
  
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_company_trans:operate failure !' || SQLERRM;  
  END prc_company_trans;  

	PROCEDURE prc_sales_trans
	( customer_sales_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
    l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_customer_sales_data IN OUT hm_customer_sales_data%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_sales_trans:operate success !';  


    
        IF l_apply_customer.operate_type IN ( 'CREATE', 'EXTEND','CHANGE') THEN

          l_hm_customer_sales_data.sales_region := l_apply_customer.sales_district; --销售地区;
          l_hm_customer_sales_data.currency_code := l_apply_customer.currency; --货币代码;
          l_hm_customer_sales_data.customer_pricing_proccess := l_apply_customer.customer_price_procedure; --客户定价过程;
          l_hm_customer_sales_data.customer_summary_group := l_apply_customer.customer_summary_group; --客户统计组;
          l_hm_customer_sales_data.ship_condition := l_apply_customer.ship_condition; --装运条件;
          l_hm_customer_sales_data.ship_plant := l_apply_customer.delivering_plant; --交货工厂;
          l_hm_customer_sales_data.account_distribute_group := l_apply_customer.acct_assgmt_group; --客户组的帐户分配;
          l_hm_customer_sales_data.cust_tax_category := l_apply_customer.tax_classification; --客户的税分类;
          l_hm_customer_sales_data.payment_terms_1 := l_apply_customer.terms_of_payment; --付款条件-未包含在最近模板;
          l_hm_customer_sales_data.price_group := l_apply_customer.price_group; --价格组-未包含在最近模板;
          l_hm_customer_sales_data.sales_grp := l_apply_customer.sales_group; --销售组;
          l_hm_customer_sales_data.pod_relation := l_apply_customer.pod_relation; --与 POD 处理相关;
                    
          --l_hm_customer_sales_data.price_list_type := l_apply_customer.; --价格清单类型-未包含在最近模板;
          
          --add by jun.zhao 20100426 默认值
          if l_hm_customer_sales_data.account_distribute_group is null then
             if l_apply_customer.account_group = '0110' then
                l_hm_customer_sales_data.account_distribute_group := '10';
             elsif l_apply_customer.account_group <> '0230' then
                l_hm_customer_sales_data.account_distribute_group := '20';
              end if;
          end if;
          
          if l_hm_customer_sales_data.pod_relation is null then
             if l_apply_customer.account_group in('0280','0380') and 
                l_apply_customer.business_code != 'CST-CREATE-PL-SP'  --当业务码为事业部售达方时，POD标记为空 Lvdecheng 20121121
             then
                l_hm_customer_sales_data.pod_relation := 'X';
              end if;
          end if;         
          
          if l_hm_customer_sales_data.distribution_channel  is null then
             l_hm_customer_sales_data.distribution_channel := '00';
          end if;
           
          if l_hm_customer_sales_data.division  is null then
             l_hm_customer_sales_data.division := '00';
          end if;           
          
          if l_hm_customer_sales_data.currency_code  is null then
             l_hm_customer_sales_data.currency_code := 'CNY';
          end if;            
          
          if l_hm_customer_sales_data.customer_pricing_proccess  is null then
             l_hm_customer_sales_data.customer_pricing_proccess := '1';
          end if;                 
          
          if l_hm_customer_sales_data.customer_summary_group  is null then
             l_hm_customer_sales_data.customer_summary_group := '1';
          end if;                  
          
          if l_hm_customer_sales_data.ship_condition  is null then
             l_hm_customer_sales_data.ship_condition := '01';
          end if;            
          --add end.
          
        ELSIF l_apply_customer.operate_type IN ( 'UPDATE') THEN
          
          IF l_apply_customer.sales_district_x = 'X' THEN
            l_hm_customer_sales_data.sales_region := l_apply_customer.sales_district; --销售地区;
          END IF;
          IF l_apply_customer.currency_x = 'X' THEN
            l_hm_customer_sales_data.currency_code := l_apply_customer.currency; --货币代码;
          END IF;
          IF l_apply_customer.customer_price_procedure_x = 'X' THEN
            l_hm_customer_sales_data.customer_pricing_proccess := l_apply_customer.customer_price_procedure; --客户定价过程;
          END IF;
          IF l_apply_customer.customer_summary_group_x = 'X' THEN
            l_hm_customer_sales_data.customer_summary_group := l_apply_customer.customer_summary_group; --客户统计组;
          END IF;
          IF l_apply_customer.ship_condition_x = 'X' THEN
            l_hm_customer_sales_data.ship_condition := l_apply_customer.ship_condition; --装运条件;
          END IF;
          IF l_apply_customer.delivering_plant_x = 'X' THEN
            l_hm_customer_sales_data.ship_plant := l_apply_customer.delivering_plant; --交货工厂;
          END IF;
          IF l_apply_customer.acct_assgmt_group_x = 'X' THEN
            l_hm_customer_sales_data.account_distribute_group := l_apply_customer.acct_assgmt_group; --客户组的帐户分配;
          END IF;
          IF l_apply_customer.tax_classification_x = 'X' THEN
            l_hm_customer_sales_data.cust_tax_category := l_apply_customer.tax_classification; --客户的税分类;
          END IF;
          IF l_apply_customer.terms_of_payment_x = 'X' THEN
            l_hm_customer_sales_data.payment_terms_1 := l_apply_customer.terms_of_payment; --付款条件-未包含在最近模板;
          END IF;
          IF l_apply_customer.price_group_x = 'X' THEN
            l_hm_customer_sales_data.price_group := l_apply_customer.price_group; --价格组-未包含在最近模板;
          END IF;
          IF l_apply_customer.sales_group_x = 'X' THEN
            l_hm_customer_sales_data.sales_grp := l_apply_customer.sales_group; --销售组;
          END IF;
          IF l_apply_customer.pod_relation_x = 'X' THEN
            l_hm_customer_sales_data.pod_relation := l_apply_customer.pod_relation; --与 POD 处理相关;
          END IF;
          
        END IF;
      
        --l_hm_customer_sales_data 数据填充完毕，往数据库回写处理
        IF customer_sales_exists_flag < 1 THEN
        
          --customer_id, sales_group, divison 已经在外部填充
          --当客户为修改业务流程，销售视图不自动扩充
           /************Start Lvdecheng 20121105***********************************************/
          if l_apply_customer.operate_type = 'UPDATE'  then 
              NULL;
          else
                          
          if l_hm_customer_sales_data.create_apply_id is null AND
             l_apply_customer.operate_type = 'CREATE' then
            l_hm_customer_sales_data.create_apply_id := l_apply_customer.apply_id; --创建业务申请单ID
          end if;
                  
          if l_hm_customer_sales_data.row_id is null then
            l_hm_customer_sales_data.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
          end if;
          if l_hm_customer_sales_data.created_by is null then
            l_hm_customer_sales_data.created_by := in_user_name; --创建人_通用字段
            l_hm_customer_sales_data.created := sysdate; --创建时间_通用字段
          end if;
          l_hm_customer_sales_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_customer_sales_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_customer_sales_data.modification_num := nvl(l_hm_customer_sales_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_customer_sales_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_customer_sales_data.version is null then
            l_hm_customer_sales_data.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
          end if;
          if l_hm_customer_sales_data.active_flag is null then
            l_hm_customer_sales_data.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
          end if;
          if l_hm_customer_sales_data.lock_flag is null then
            l_hm_customer_sales_data.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
          end if;
          if l_hm_customer_sales_data.delete_flag is null then
            l_hm_customer_sales_data.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
          end if;
          if l_hm_customer_sales_data.operate_status is null then
            l_hm_customer_sales_data.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_customer_sales_data.remark is null then
            l_hm_customer_sales_data.remark := l_apply_customer.remark; --备注(可选)_通用字段
          end if;
          if l_hm_customer_sales_data.action_batch_id is null then
            l_hm_customer_sales_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
          if l_hm_customer_sales_data.for_gvs is null then
            l_hm_customer_sales_data.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
          end if;
          if l_hm_customer_sales_data.audit_flag is null then
            l_hm_customer_sales_data.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
          end if;
                    
          insert into hm_customer_sales_data values l_hm_customer_sales_data;   -------------------------------
          
          end if;
        elsif customer_sales_exists_flag = 1 then

          l_hm_customer_sales_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_customer_sales_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_customer_sales_data.modification_num := nvl(l_hm_customer_sales_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_customer_sales_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_customer_sales_data.operate_status <> 'CREATE' then
            l_hm_customer_sales_data.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_customer_sales_data.action_batch_id is null then
            l_hm_customer_sales_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
        
          prc_customer_salesorg_type2db(l_hm_customer_sales_data,retcode,retmsg); ------------------------
          if retcode = 'E' then rollback; return; end if;
        ELSE 
          retcode := 'E';
          retmsg  := 'prc_sales_trans: 销售区域存在，且多于一条!';
          ROLLBACK;
          RETURN;
        end if;  

				comm_util.copy_table_line('HM_CUSTOMER_SALES_DATA', '', '_HIS', l_hm_customer_sales_data.row_id, retcode, retmsg);
  
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_sales_trans:operate failure !' || SQLERRM;  
  END prc_sales_trans;  

	PROCEDURE prc_subcomp_trans
	( customer_subcomp_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
    l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_cust_sub_company IN OUT hm_cust_sub_company%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_subcomp_trans:operate success !';  
    
        IF l_apply_customer.operate_type = 'CREATE' THEN

          l_hm_cust_sub_company.branch_code := l_apply_customer.branch_code; --工贸编码;
          l_hm_cust_sub_company.branch_company_code := l_apply_customer.branch_company_code; --分公司编码;
          l_hm_cust_sub_company.branch_company_name := l_apply_customer.branch_company_name; --分公司名称;
          l_hm_cust_sub_company.customer_manager := l_apply_customer.customer_manager; --客户经理;
          l_hm_cust_sub_company.area_code := l_apply_customer.area_code; --区域编码;
          l_hm_cust_sub_company.jyt := l_apply_customer.jyt;--cuiyj20120111 增加管理客户试图

          --l_hm_cust_sub_company.customer_category := l_apply_customer.customer_category; --大渠道;
          l_hm_cust_sub_company.industry_class := l_apply_customer.industry_class; --小渠道客户性质小类(行业部门);
          --l_hm_cust_sub_company.customer_flag := l_apply_customer.customer_flag; --客户性质分类(伞下店);


        ELSIF l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') THEN
          
          IF l_apply_customer.branch_code_x = 'X' THEN
            l_hm_cust_sub_company.branch_code := l_apply_customer.branch_code; --工贸编码;
          END IF;
          IF l_apply_customer.branch_company_code_x = 'X' THEN
            l_hm_cust_sub_company.branch_company_code := l_apply_customer.branch_company_code; --分公司编码;
          END IF;
          IF l_apply_customer.branch_company_name_x = 'X' THEN
            l_hm_cust_sub_company.branch_company_name := l_apply_customer.branch_company_name; --分公司名称;
          END IF;
          IF l_apply_customer.customer_manager_x = 'X' THEN
            l_hm_cust_sub_company.customer_manager := l_apply_customer.customer_manager; --客户经理;
          END IF;
          IF l_apply_customer.area_code_x = 'X' THEN
            l_hm_cust_sub_company.area_code := l_apply_customer.area_code; --区域编码;
          END IF;
          IF l_apply_customer.jyt_x = 'X' THEN
            l_hm_cust_sub_company.jyt := l_apply_customer.jyt; --jytcuiyj20110112;
          END IF;
/*          IF l_apply_customer.customer_flag_x = 'X' THEN
            l_hm_cust_sub_company.customer_flag := l_apply_customer.customer_flag; --客户性质分类(伞下店);
          END IF;*/

          --当前客户的性质信息
          l_hm_cust_sub_company.customer_category := ''; --大渠道;
          l_hm_cust_sub_company.industry_class := ''; --小渠道客户性质小类(行业部门);
          
        END IF;
      
        --l_hm_cust_sub_company 数据填充完毕，往数据库回写处理
        IF customer_subcomp_exists_flag < 1 THEN
        
          --branch_code, branch_company_code 已经在外部填充
                          
          if l_hm_cust_sub_company.branch_company_code_temp is null  
             then
            l_hm_cust_sub_company.branch_company_code_temp := l_apply_customer.branch_company_code_temp; 
          end if;
                  
          if l_hm_cust_sub_company.create_apply_id is null --AND l_hm_cust_sub_company.operate_type = 'CREATE' 
             then
            l_hm_cust_sub_company.create_apply_id := l_apply_customer.apply_id; --创建业务申请单ID
          end if;
                  
          if l_hm_cust_sub_company.row_id is null then
            l_hm_cust_sub_company.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
          end if;
          if l_hm_cust_sub_company.created_by is null then
            l_hm_cust_sub_company.created_by := in_user_name; --创建人_通用字段
            l_hm_cust_sub_company.created := sysdate; --创建时间_通用字段
          end if;
          l_hm_cust_sub_company.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_sub_company.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_sub_company.modification_num := nvl(l_hm_cust_sub_company.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_sub_company.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_sub_company.version is null then
            l_hm_cust_sub_company.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
          end if;
          if l_hm_cust_sub_company.active_flag is null then
            l_hm_cust_sub_company.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
          end if;
          if l_hm_cust_sub_company.lock_flag is null then
            l_hm_cust_sub_company.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
          end if;
          if l_hm_cust_sub_company.delete_flag is null then
            l_hm_cust_sub_company.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
          end if;
          if l_hm_cust_sub_company.operate_status is null then
            l_hm_cust_sub_company.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_sub_company.remark is null then
            l_hm_cust_sub_company.remark := l_apply_customer.remark; --备注(可选)_通用字段
          end if;
          if l_hm_cust_sub_company.action_batch_id is null then
            l_hm_cust_sub_company.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
          if l_hm_cust_sub_company.for_gvs is null then
            l_hm_cust_sub_company.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
          end if;
          if l_hm_cust_sub_company.audit_flag is null then
            l_hm_cust_sub_company.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
          end if;
                    
          insert into hm_cust_sub_company values l_hm_cust_sub_company;   -------------------------------
          
        elsif customer_subcomp_exists_flag = 1 then

          l_hm_cust_sub_company.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_sub_company.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_sub_company.modification_num := nvl(l_hm_cust_sub_company.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_sub_company.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_sub_company.operate_status <> 'CREATE' then
            l_hm_cust_sub_company.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_sub_company.action_batch_id is null then
            l_hm_cust_sub_company.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
        
          prc_customer_subcomp_type2db(l_hm_cust_sub_company,retcode,retmsg); ------------------------
          if retcode = 'E' then rollback; return; end if;
        ELSE 
          retcode := 'E';
          retmsg  := 'prc_subcomp_trans: 扩展信息存在，且多于一条!';
          ROLLBACK;
          RETURN;
        end if;  

				comm_util.copy_table_line('HM_CUST_SUB_COMPANY', '', '_HIS', l_hm_cust_sub_company.row_id, retcode, retmsg);
  
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_subcomp_trans:operate failure !' || SQLERRM;  
  END prc_subcomp_trans;  

	PROCEDURE prc_extend_trans
	( customer_extend_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
    l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_cust_additional_data IN OUT hm_cust_additional_data%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
    
    ------------Lvdecheng 20120911 start ----------------------
    ls_code varchar2(20) ; --门店编码S码
    flag_customer_number hm_apply_customer.customer_number%type;
    TEMP_CUSTOMER_NAME hm_apply_customer.Customer_Name%TYPE;
    --------------------end-----------------------------------------
    
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_extend_trans:operate success !';  


    
        IF l_apply_customer.operate_type = 'CREATE' THEN

          l_hm_cust_additional_data.global_pc_code := l_apply_customer.global_pc_code; --GLOBAL_PC_CODE-DCMS;
          l_hm_cust_additional_data.parent_company_code := l_apply_customer.parent_company_code; --上级公司代码-DCMS;
          l_hm_cust_additional_data.org_group_code := l_apply_customer.org_group_code; --所属分组-DCMS;
          l_hm_cust_additional_data.is_storefront := l_apply_customer.is_storefront; --是否为门店(1,0);
          if   l_apply_customer.account_group = '0380' then
               l_hm_cust_additional_data.is_storefront := '';
          end if;        
          l_hm_cust_additional_data.old_customer_code := l_apply_customer.old_customer_code; --旧客户编码;
          l_hm_cust_additional_data.is_seller := l_apply_customer.is_seller; --是否为直销员(1,0);
          l_hm_cust_additional_data.sales_region := l_apply_customer.sales_region; --行政区域(销售);
          l_hm_cust_additional_data.cust_property := l_apply_customer.cust_property; --客户性质;
          l_hm_cust_additional_data.cust_property_desc := l_apply_customer.cust_property_desc; --客户性质名称;
          l_hm_cust_additional_data.cust_type := l_apply_customer.cust_type; --客户分类;
          l_hm_cust_additional_data.csg_keyaccount_flag := l_apply_customer.csg_keyaccount_flag; --大客户标记;
          l_hm_cust_additional_data.csg_keyaccount_category := l_apply_customer.csg_keyaccount_category; --大客户大类;
          l_hm_cust_additional_data.csg_keyaccount_class := l_apply_customer.csg_keyaccount_class; --大客户小类;
          l_hm_cust_additional_data.cust_functions := l_apply_customer.cust_functions; --客户功能(1、门店 2、送达方 3、既是门店又是送达方);

          l_hm_cust_additional_data.BRAND1 := l_apply_customer.BRAND1;
          l_hm_cust_additional_data.BRAND2 := l_apply_customer.BRAND2;
          l_hm_cust_additional_data.BRAND3 := l_apply_customer.BRAND3;
          l_hm_cust_additional_data.SALES_AMOUNT1 := l_apply_customer.SALES_AMOUNT1;
          l_hm_cust_additional_data.SALES_AMOUNT2 := l_apply_customer.SALES_AMOUNT2;
          l_hm_cust_additional_data.SALES_AMOUNT3 := l_apply_customer.SALES_AMOUNT3;
          l_hm_cust_additional_data.SALES_VOLUME := l_apply_customer.SALES_VOLUME;
          l_hm_cust_additional_data.OUTLET_AREA := l_apply_customer.OUTLET_AREA;
          l_hm_cust_additional_data.REGISTERED_CAPITAL := l_apply_customer.REGISTERED_CAPITAL;
          l_hm_cust_additional_data.MANAGE_LIMIT_YEAR := l_apply_customer.MANAGE_LIMIT_YEAR;
          l_hm_cust_additional_data.COOPERATION_SCOPE := l_apply_customer.COOPERATION_SCOPE;
          l_hm_cust_additional_data.COOPERATION_SALES_VOLUMN := l_apply_customer.COOPERATION_SALES_VOLUMN;

          l_hm_cust_additional_data.manage_customer := l_apply_customer.manage_customer; --管理客户;
          
          --增加门店信息 Lvdecheng 20120911
          -->>>>>>>>>>>>>>START>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          if l_apply_customer.cust_flag_md = '1' and (l_apply_customer.operate_type = 'CREATE' or l_apply_customer.operate_type = 'UPDATE')   then
             l_hm_cust_additional_data.Cust_Shop_Contain := TO_NUMBER(l_apply_customer.Cust_Shop_Contain, '9G9999999D99') ;
             l_hm_cust_additional_data.Cust_Shop_Sale_Rate_Month := TO_NUMBER(l_apply_customer.Cust_Shop_Sale_Rate_Month, '9G9999999D99') ;
             l_hm_cust_additional_data.Cust_Shop_Retail_Rate :=  TO_NUMBER(l_apply_customer.Cust_Shop_Retail_Rate, '9G9999999D99'); 
             l_hm_cust_additional_data.Sbr_Name := l_apply_customer.Sbr_Name ;
             l_hm_cust_additional_data.Sbr_Ownername := l_apply_customer.Sbr_Ownername ;
             l_hm_cust_additional_data.Sbr_Addressex := l_apply_customer.Sbr_Addressex ;
             l_hm_cust_additional_data.Sbr_Post := l_apply_customer.Sbr_Post ;
             l_hm_cust_additional_data.Sbr_Phone := l_apply_customer.Sbr_Phone ;
             l_hm_cust_additional_data.Sbr_Housemj := TO_NUMBER(l_apply_customer.Sbr_Housemj, '9G9999999D99'); 
             l_hm_cust_additional_data.Sbr_Yjbuilddate := TO_DATE(l_apply_customer.Sbr_Yjbuilddate,'yyyy-MM-dd') ;
             l_hm_cust_additional_data.Sbr_Shoptype := l_apply_customer.Sbr_Shoptype ;
             l_hm_cust_additional_data.Cust_Cnumber := l_apply_customer.Cust_Cnumber ;
             l_hm_cust_additional_data.sbr_jtcustomer:=l_apply_customer.sbr_jtcustomer;
             l_hm_cust_additional_data.Sbr_Jtcustomer_Name:=l_apply_customer.Sbr_Jtcustomer_Name;
          end if;
          if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'CREATE' then
             l_hm_cust_additional_data.cust_shop_number := l_apply_customer.cust_shop_number ;
          end if ;
          --add baochh 20120911
           if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'UPDATE'  AND 
          ( substr(l_apply_customer.cust_shop_number,0,1)!='S' ) then
             l_hm_cust_additional_data.cust_shop_number := l_apply_customer.cust_shop_number ;
          end if ;
          ----baochh 20120911
         if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'CREATE' and l_apply_customer.sbr_jtcustomer ='G9999' then
         
            if l_apply_customer.sold_to_party is not null then 
          l_hm_cust_additional_data.sbr_jtcustomer:=l_apply_customer.sold_to_party;--baochh
               SELECT S.CUSTOMER_NAME 
               INTO TEMP_CUSTOMER_NAME
               FROM HM_CUSTOMERS S 
              WHERE S.CUSTOMER_NUMBER =l_apply_customer.sold_to_party;
            l_hm_cust_additional_data.Sbr_Jtcustomer_Name:=TEMP_CUSTOMER_NAME;  
           else
          l_hm_cust_additional_data.sbr_jtcustomer:=l_apply_customer.customer_number;
            end if;
          end if;
          
        /*  select substr(l_apply_customer.sbr_jtcustomer,0,1) aa
          into TEMP_CUSTOMER_NAME
            from dual d ;*/
            
          if   substr(l_apply_customer.sbr_jtcustomer,0,1)!='G' THEN 
             SELECT S.CUSTOMER_NAME1 
               INTO TEMP_CUSTOMER_NAME
               FROM HM_CUSTOMERS S 
              WHERE S.CUSTOMER_NUMBER =l_apply_customer.sbr_jtcustomer;
          
          
          l_hm_cust_additional_data.sbr_jtcustomer_NAME := TEMP_CUSTOMER_NAME;
          
          END IF;
          -->>>>>>>>>>>>>>>>END>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          
          --客户伞下付款方时，客户标记为'SF',对应的售达方为伞下售达方 Lvdecheng 20121024
          IF l_apply_customer.Business_Code = 'CST-CREATE-GM-PYSF-1169' THEN
              l_hm_cust_additional_data.sbr_sp_number := l_apply_customer.sold_to_party;
          END IF;
          
          --如果国美或者精品直连，无论是否为门店将客户方代码、集团客户维护至扩展视图
          --Lvdecheng 20121228
          IF l_apply_customer.Business_Code IN ('CST-CREATE-GM-SH-GM','CST-CREATE-GM-SH-JP') THEN 
             l_hm_cust_additional_data.Cust_Cnumber := l_apply_customer.Cust_Cnumber ;
             l_hm_cust_additional_data.sbr_jtcustomer:=l_apply_customer.sbr_jtcustomer;
             
          END IF;
    
          --l_hm_cust_additional_data.trade_descript := l_apply_customer.trade_descript; --工贸描述(原工贸名称);
          --l_hm_cust_additional_data.area_code := l_apply_customer.Area_Code; --所属地区;

        ELSIF l_apply_customer.operate_type IN ( 'UPDATE','CHANGE') THEN
          
          IF l_apply_customer.global_pc_code_x = 'X' THEN
            l_hm_cust_additional_data.global_pc_code := l_apply_customer.global_pc_code; --GLOBAL_PC_CODE-DCMS;
          END IF;
          IF l_apply_customer.parent_company_code_x = 'X' THEN
            l_hm_cust_additional_data.parent_company_code := l_apply_customer.parent_company_code; --上级公司代码-DCMS;
          END IF;
          IF l_apply_customer.org_group_code_x = 'X' THEN
            l_hm_cust_additional_data.org_group_code := l_apply_customer.org_group_code; --所属分组-DCMS;
          END IF;
          IF l_apply_customer.is_storefront_x = 'X' THEN
            l_hm_cust_additional_data.is_storefront := l_apply_customer.is_storefront; --是否为门店(1,0);
          END IF;
          IF l_apply_customer.old_customer_code_x = 'X' THEN
            l_hm_cust_additional_data.old_customer_code := l_apply_customer.old_customer_code; --旧客户编码;
          END IF;
          IF l_apply_customer.is_seller_x = 'X' THEN
            l_hm_cust_additional_data.is_seller := l_apply_customer.is_seller; --是否为直销员(1,0);
          END IF;
          IF l_apply_customer.sales_region_x = 'X' THEN
            l_hm_cust_additional_data.sales_region := l_apply_customer.sales_region; --行政区域(销售);
          END IF;
          IF l_apply_customer.cust_property_x = 'X' THEN
            l_hm_cust_additional_data.cust_property := l_apply_customer.cust_property; --客户性质;
          END IF;
          IF l_apply_customer.cust_property_desc_x = 'X' THEN
            l_hm_cust_additional_data.cust_property_desc := l_apply_customer.cust_property_desc; --客户性质名称;
          END IF;
          IF l_apply_customer.cust_type_x = 'X' THEN
            l_hm_cust_additional_data.cust_type := l_apply_customer.cust_type; --客户分类;
          END IF;
          IF l_apply_customer.csg_keyaccount_flag_x = 'X' THEN
            l_hm_cust_additional_data.csg_keyaccount_flag := l_apply_customer.csg_keyaccount_flag; --大客户标记;
          END IF;
          IF l_apply_customer.csg_keyaccount_category_x = 'X' THEN
            l_hm_cust_additional_data.csg_keyaccount_category := l_apply_customer.csg_keyaccount_category; --大客户大类;
          END IF;
          IF l_apply_customer.csg_keyaccount_class_x = 'X' THEN
            l_hm_cust_additional_data.csg_keyaccount_class := l_apply_customer.csg_keyaccount_class; --大客户小类;
          END IF;
          IF l_apply_customer.cust_functions_x = 'X' THEN
            l_hm_cust_additional_data.cust_functions := l_apply_customer.cust_functions; --客户功能(1、门店 2、送达方 3、既是门店又是送达方);
          END IF;

          IF l_apply_customer.BRAND1_x = 'X' THEN
            l_hm_cust_additional_data.BRAND1 := l_apply_customer.BRAND1;
          END IF;
          IF l_apply_customer.BRAND2_x = 'X' THEN
            l_hm_cust_additional_data.BRAND2 := l_apply_customer.BRAND2;
          END IF;
          IF l_apply_customer.BRAND3_x = 'X' THEN
            l_hm_cust_additional_data.BRAND3 := l_apply_customer.BRAND3;
          END IF;
          IF l_apply_customer.SALES_AMOUNT1_x = 'X' THEN
            l_hm_cust_additional_data.SALES_AMOUNT1 := l_apply_customer.SALES_AMOUNT1;
          END IF;
          IF l_apply_customer.SALES_AMOUNT2_x = 'X' THEN
            l_hm_cust_additional_data.SALES_AMOUNT2 := l_apply_customer.SALES_AMOUNT2;
          END IF;
          IF l_apply_customer.SALES_AMOUNT3_x = 'X' THEN
            l_hm_cust_additional_data.SALES_AMOUNT3 := l_apply_customer.SALES_AMOUNT3;
          END IF;
          IF l_apply_customer.SALES_VOLUME_x = 'X' THEN
            l_hm_cust_additional_data.SALES_VOLUME := l_apply_customer.SALES_VOLUME;
          END IF;
          IF l_apply_customer.OUTLET_AREA_x = 'X' THEN
            l_hm_cust_additional_data.OUTLET_AREA := l_apply_customer.OUTLET_AREA;
          END IF;
          IF l_apply_customer.REGISTERED_CAPITAL_x = 'X' THEN
            l_hm_cust_additional_data.REGISTERED_CAPITAL := l_apply_customer.REGISTERED_CAPITAL;
          END IF;
          IF l_apply_customer.MANAGE_LIMIT_YEAR_x = 'X' THEN
            l_hm_cust_additional_data.MANAGE_LIMIT_YEAR := l_apply_customer.MANAGE_LIMIT_YEAR;
          END IF;
          IF l_apply_customer.COOPERATION_SCOPE_x = 'X' THEN
            l_hm_cust_additional_data.COOPERATION_SCOPE := l_apply_customer.COOPERATION_SCOPE;
          END IF;
          IF l_apply_customer.COOPERATION_SALES_VOLUMN_x = 'X' THEN
            l_hm_cust_additional_data.COOPERATION_SALES_VOLUMN := l_apply_customer.COOPERATION_SALES_VOLUMN;
          END IF;

          IF l_apply_customer.manage_customer_x = 'X' THEN
            l_hm_cust_additional_data.manage_customer := l_apply_customer.manage_customer; --管理客户;
          END IF;
          
          
          ------------------------start add by baochh 20120911------------------------------------ 
          --当update业务的时候，门店视图要求是新增的，需要同步将门店编码放到apply表中，以及扩展表中
          if substr(l_apply_customer.cust_shop_number,0,1)='S' then 
             l_hm_cust_additional_data.cust_shop_number := l_apply_customer.cust_shop_number; 
              UPDATE hm_apply_customer
             SET cust_shop_number=l_apply_customer.cust_shop_number
            where  apply_id = l_apply_customer.apply_id;
          end if;
            IF l_apply_customer.cust_shop_contain_x = 'X' THEN
            l_hm_cust_additional_data.cust_shop_contain :=  TO_NUMBER( l_apply_customer.cust_shop_contain, '9G9999999D99') ;
          END IF;
            IF l_apply_customer.cust_shop_sale_rate_month_x = 'X' THEN
            l_hm_cust_additional_data.cust_shop_sale_rate_month := TO_NUMBER(l_apply_customer.Cust_Shop_Sale_Rate_Month, '9G9999999D99') ;
          END IF;
            IF l_apply_customer.cust_shop_retail_rate_x = 'X' THEN
            l_hm_cust_additional_data.cust_shop_retail_rate := TO_NUMBER(l_apply_customer.Cust_Shop_Retail_Rate, '9G9999999D99'); 
          END IF;
            IF l_apply_customer.sbr_name_x = 'X' THEN
            l_hm_cust_additional_data.sbr_name := l_apply_customer.sbr_name; 
          END IF;
            IF l_apply_customer.sbr_ownername_x = 'X' THEN
            l_hm_cust_additional_data.sbr_ownername := l_apply_customer.sbr_ownername; 
          END IF;
            IF l_apply_customer.sbr_addressex_x = 'X' THEN
            l_hm_cust_additional_data.sbr_addressex := l_apply_customer.sbr_addressex; 
          END IF;
            IF l_apply_customer.sbr_post_x= 'X' THEN
            l_hm_cust_additional_data.sbr_post := l_apply_customer.sbr_post; 
          END IF; 
           IF l_apply_customer.sbr_phone_x = 'X' THEN
            l_hm_cust_additional_data.sbr_phone := l_apply_customer.sbr_phone; 
          END IF; 
           IF l_apply_customer.sbr_housemj_x = 'X' THEN
            l_hm_cust_additional_data.sbr_housemj :=  TO_NUMBER(l_apply_customer.Sbr_Housemj, '9G9999999D99'); 
          END IF;
            IF l_apply_customer.sbr_yjbuilddate_x = 'X' THEN
            l_hm_cust_additional_data.sbr_yjbuilddate := TO_DATE(l_apply_customer.Sbr_Yjbuilddate,'yyyy-MM-dd') ;
          END IF;
            IF l_apply_customer.sbr_shoptype_x = 'X' THEN
            l_hm_cust_additional_data.sbr_shoptype := l_apply_customer.sbr_shoptype; 
          END IF;
            IF l_apply_customer.cust_cnumber_x = 'X' THEN
            l_hm_cust_additional_data.cust_cnumber := l_apply_customer.cust_cnumber; 
          END IF;
            IF l_apply_customer.sbr_jtcustomer_x = 'X' THEN
           /*    if l_apply_customer.sbr_jtcustomer = 'G9999' AND l_apply_customer.Partner_Flag_Sp='1' THEN 
                    l_hm_cust_additional_data.sbr_jtcustomer := l_apply_customer.Customer_Number;
                    END IF;
                if l_apply_customer.sbr_jtcustomer = 'G9999' AND l_apply_customer.Partner_Flag_Sp='0' THEN 
                    l_hm_cust_additional_data.sbr_jtcustomer := l_apply_customer.Sold_To_Party;
                    END IF;    
                if l_apply_customer.sbr_jtcustomer != 'G9999' THEN */
                l_hm_cust_additional_data.sbr_jtcustomer := l_apply_customer.sbr_jtcustomer; 
                 -- END IF;
                  
              
          END IF;
          
          
              
          if   substr(l_apply_customer.sbr_jtcustomer,0,1)!='G' THEN 
             SELECT S.CUSTOMER_NAME1 
               INTO TEMP_CUSTOMER_NAME
               FROM HM_CUSTOMERS S 
              WHERE S.CUSTOMER_NUMBER =l_apply_customer.sbr_jtcustomer;
           l_hm_cust_additional_data.sbr_jtcustomer_NAME := TEMP_CUSTOMER_NAME;
           
        
             UPDATE hm_apply_customer
             SET SBR_JTCUSTOMER_NAME=TEMP_CUSTOMER_NAME            
            where  SBR_JTCUSTOMER = l_apply_customer.sbr_jtcustomer;
           end if;
          ----------------------end------------------------------------ 
          
        END IF;
      
        --l_hm_cust_additional_data 数据填充完毕，往数据库回写处理
        IF customer_extend_exists_flag < 1 THEN
        
          --customer_id, sales_group, divison 已经在外部填充
                          
          if l_hm_cust_additional_data.create_apply_id is null AND
             l_apply_customer.operate_type = 'CREATE' then
            l_hm_cust_additional_data.create_apply_id := l_apply_customer.apply_id; --创建业务申请单ID
          end if;
                  
          if l_hm_cust_additional_data.row_id is null then
            l_hm_cust_additional_data.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
          end if;
          if l_hm_cust_additional_data.created_by is null then
            l_hm_cust_additional_data.created_by := in_user_name; --创建人_通用字段
            l_hm_cust_additional_data.created := sysdate; --创建时间_通用字段
          end if;
          l_hm_cust_additional_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_additional_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_additional_data.modification_num := nvl(l_hm_cust_additional_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_additional_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_additional_data.version is null then
            l_hm_cust_additional_data.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
          end if;
          if l_hm_cust_additional_data.active_flag is null then
            l_hm_cust_additional_data.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
          end if;
          if l_hm_cust_additional_data.lock_flag is null then
            l_hm_cust_additional_data.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
          end if;
          if l_hm_cust_additional_data.delete_flag is null then
            l_hm_cust_additional_data.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
          end if;
          if l_hm_cust_additional_data.operate_status is null then
            l_hm_cust_additional_data.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_additional_data.remark is null then
            l_hm_cust_additional_data.remark := l_apply_customer.remark; --备注(可选)_通用字段
          end if;
          if l_hm_cust_additional_data.action_batch_id is null then
            l_hm_cust_additional_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
          if l_hm_cust_additional_data.for_gvs is null then
            l_hm_cust_additional_data.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
          end if;
          if l_hm_cust_additional_data.audit_flag is null then
            l_hm_cust_additional_data.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
          end if;
                    
          insert into hm_cust_additional_data values l_hm_cust_additional_data;   -------------------------------
          
        elsif customer_extend_exists_flag = 1 then

          l_hm_cust_additional_data.last_upd_by := in_user_name; --最后更新人_通用字段
          l_hm_cust_additional_data.last_upd := sysdate; --最后更新时间_通用字段
          l_hm_cust_additional_data.modification_num := nvl(l_hm_cust_additional_data.modification_num,0) + 1; --修改次数_通用字段
          l_hm_cust_additional_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
          if l_hm_cust_additional_data.operate_status <> 'CREATE' then
            l_hm_cust_additional_data.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
          end if;
          if l_hm_cust_additional_data.action_batch_id is null then
            l_hm_cust_additional_data.action_batch_id := l_apply_customer.action_batch_id; --动作批次ID
          end if;
        
          prc_customer_extend_type2db(l_hm_cust_additional_data,retcode,retmsg); ------------------------
          if retcode = 'E' then rollback; return; end if;
        ELSE 
          retcode := 'E';
          retmsg  := 'prc_extend_trans: 扩展信息存在，且多于一条!';
          ROLLBACK;
          RETURN;
        end if;  

				comm_util.copy_table_line('HM_CUST_ADDITIONAL_DATA', '', '_HIS', l_hm_cust_additional_data.row_id, retcode, retmsg);
  
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_extend_trans:operate failure !' || SQLERRM;  
  END prc_extend_trans;  

  procedure prc_tmpcode2mastercode(in_tmpcode_type IN VARCHAR2, --CUSTOMER_NUMBER,MANAGER_CUSTOMER
                                   IN_tempcode  in  varchar2, --ROWID
                                   out_mastercode out varchar2,
                                   retcode   out varchar2, --返回码
                                   retmsg    out varchar2 --返回消息                                  
                                   ) is  
    lv_businesstype varchar2(20) := '';
  begin
  
    retcode := 'S';
    retmsg  := 'prc_tmpcode2mastercode:获取正式编码成功!';

    out_mastercode := IN_tempcode;
    
    IF instr(IN_tempcode,'TEMP') > 0 THEN
      IF in_tmpcode_type = 'CUSTOMER_NUMBER' THEN
        FOR cur_rows IN ( select account_group, operate_status, customer_number
                          from hm_customers
                          where customer_number = IN_tempcode)
        LOOP
          generate_code.generate_master_code('CUSTOMER',
                                             cur_rows.account_group,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND 
             NOT instr(out_mastercode,'TEMP') > 0 AND 
             out_mastercode IS NOT NULL THEN 
            retcode := 'S';
          ELSE 
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
          
          --更新申请单
          UPDATE hm_apply_customer
             SET customer_number = out_mastercode
           WHERE customer_number = IN_tempcode;

          UPDATE hm_apply_customer
             SET sold_to_party = out_mastercode
           WHERE sold_to_party = IN_tempcode;

          --更新申请转化日志
          UPDATE hm_applys_transactions
             SET master_row_code = out_mastercode
           WHERE master_row_code = IN_tempcode;
          
          --更新客户主数据
          UPDATE hm_customers
             SET customer_number    = out_mastercode,
                 generate_code_flag = '1'
           WHERE customer_number = IN_tempcode;
                 
          --更新客户合作伙伴
          UPDATE hm_customer_partners
             SET cust_partner_subject_id = out_mastercode
           WHERE cust_partner_subject_id = IN_tempcode;
           
           
          ---更新门店视图中的集团级客户编码 20120713 baochh
           UPDATE Hm_Cust_Additional_Data 
              SET SBR_JTCUSTOMER = out_mastercode
           WHERE SBR_JTCUSTOMER = IN_tempcode;
           
              UPDATE Hm_Cust_Additional_Data 
              SET SBR_JTCUSTOMER_NAME =(
               select  s.customer_name from hm_apply_customer s 
               where s.customer_number=out_mastercode and s.delete_flag='0' )
           WHERE SBR_JTCUSTOMER = out_mastercode;
           
            UPDATE hm_apply_customer
             SET SBR_JTCUSTOMER = out_mastercode
           WHERE SBR_JTCUSTOMER = 'G9999';
           
            UPDATE hm_apply_customer
            SET SBR_JTCUSTOMER_NAME=(
               select  s.customer_name from hm_apply_customer s 
               where s.customer_number=out_mastercode  and s.delete_flag='0')
            where  SBR_JTCUSTOMER = out_mastercode;

        END LOOP;
        

      ELSIF in_tmpcode_type = 'MANAGER_CUSTOMER' THEN
        FOR cur_rows IN ( select branch_code, branch_company_code
                          from hm_cust_sub_company
                          where branch_company_code = IN_tempcode)
        LOOP
          
          if cur_rows.branch_code = '12' then
            lv_businesstype := 'JC';
          else
            lv_businesstype := 'GM';
          end if;  
        
          generate_code.generate_master_code('SUBCOMPANY',
                                             lv_businesstype,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND 
             NOT instr(out_mastercode,'TEMP') > 0 AND 
             out_mastercode IS NOT NULL THEN 
            retcode := 'S';
          ELSE 
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
          
          --更新申请单
          UPDATE hm_apply_customer
             SET branch_company_code = out_mastercode
           WHERE branch_company_code = IN_tempcode;

          UPDATE hm_apply_customer
             SET manage_customer = out_mastercode
           WHERE manage_customer = IN_tempcode;

          --更新申请转化日志
          UPDATE hm_applys_transactions
             SET master_row_code = out_mastercode
           WHERE master_row_code = IN_tempcode;
          
          --更新管理户主数据
          UPDATE hm_cust_sub_company
             SET branch_company_code = out_mastercode
           WHERE branch_company_code = IN_tempcode;

          --更新客户扩展视图数据
          UPDATE hm_cust_additional_data
             SET manage_customer = out_mastercode
           WHERE manage_customer = IN_tempcode;

        END LOOP;
        
      ELSE
        out_mastercode := IN_tempcode;
      END IF;
      
    END IF;
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := 'prc_tmpcode2mastercode:获取正式编码失败!'|| sqlerrm;
  end prc_tmpcode2mastercode;

  PROCEDURE prc_file_apply2data(
    in_apply_table_code IN VARCHAR2,
		in_apply_row_id  IN VARCHAR2,
    in_data_table_code IN VARCHAR2,
    in_data_row_id IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
    l_hm_affix_inf hm_affix_inf%ROWTYPE;
    
  BEGIN
		retcode := 'S';
		retmsg  := '文件附件复制成功!';
        
    FOR cur_rows IN ( SELECT * FROM hm_affix_inf t WHERE t.table_code = in_apply_table_code 
                      AND t.record_id = in_apply_row_id )
    LOOP
      l_hm_affix_inf := cur_rows;
		  
      FOR cur_rows2 IN ( SELECT COUNT(*) row_count FROM hm_affix_inf t WHERE t.table_code = in_data_table_code 
                         AND t.record_id = in_data_row_id AND t.remark = cur_rows.remark )
      LOOP
        IF cur_rows2.row_count < 1 THEN
          l_hm_affix_inf.row_id := comm_util.FUNC_NEW_ROWID;
          l_hm_affix_inf.table_code := in_data_table_code;
          l_hm_affix_inf.record_id := in_data_row_id;
          l_hm_affix_inf.created_by := in_user_name;
          l_hm_affix_inf.created_date := SYSDATE;
          l_hm_affix_inf.attribute1 := in_apply_table_code;
          l_hm_affix_inf.attribute2 := in_apply_row_id;
          INSERT INTO hm_affix_inf VALUES l_hm_affix_inf;
        END IF;
      END LOOP;
    
    END LOOP;
    
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := 'prc_file_apply2data:文件附件复制失败!'|| sqlerrm;
  end prc_file_apply2data;

/*  --要求所有客户都加入日日顺公司，所以去掉此方法---deleted by zhangbiao 20101118 for fanzg
  --删除多余 日日顺公司视图
  PROCEDURE prc_rrs_companydel( in_customer_number IN VARCHAR2, retcode OUT VARCHAR2, retmsg OUT VARCHAR2)
  IS 
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_rrs_companydel:操作成功!';  
    
    FOR cur_rows IN ( SELECT T.customer_number, 
                             TT.ROW_ID SALES_VIEW_ID,
                             TT.SALES_GROUP, 
                             T.INDUSTRY_CLASS, 
                             V.PARENT_VALUE_LOW
                        FROM VIEW_HM_CUSTOMERS        T,
                             HM_CUSTOMER_SALES_DATA   TT,
                             HM_FND_CUST_RRS2SALESORG TTT,
                             HM_FND_VALUES            V
                       WHERE TTT.SALES_ORGANIZATION = TT.SALES_GROUP
                         AND TT.OPERATE_STATUS = 'CREATE'
                         AND TT.CUSTOMER_ID = T.ROW_ID
                         AND V.VALUE = T.INDUSTRY_CLASS
                         AND V.VALUE_SET_ID = 'IndustryClass2'
                         AND V.parent_value_low NOT IN ('1005', '1004', '1021', '1011') --1005  社区店--1011  工程--1020	专卖店--1021	电子商务
                         AND T.CUSTOMER_NUMBER = in_customer_number )--'C000007647' 
    LOOP
      --删除对应合作伙伴
      DELETE FROM HM_CUSTOMER_PARTNERS T WHERE T.SALES_AREA_VIEW_ID = CUR_ROWS.SALES_VIEW_ID;
      
      --归档销售区域视图
      COMM_UTIL.COPY_TABLE_LINE('HM_CUSTOMER_SALES_DATA','','_HIS',CUR_ROWS.SALES_VIEW_ID,RETCODE,RETMSG);
      IF RETCODE = 'E' THEN ROLLBACK; RETMSG := 'prc_rrs_companydel:日日顺客户数据视图删除失败! 销售区域历史归档失败'; RETURN; END IF;
      
      --删除对应销售区域
      DELETE FROM HM_CUSTOMER_SALES_DATA t where t.row_id = CUR_ROWS.SALES_VIEW_ID;
      
    END LOOP;

    FOR cur_rows IN ( SELECT T.customer_number, 
                             TT.ROW_ID COMPANY_VIEW_ID,
                             TT.COMPANY_CODE, 
                             T.INDUSTRY_CLASS, 
                             V.PARENT_VALUE_LOW
                        FROM VIEW_HM_CUSTOMERS        T,
                             HM_CUST_COMPANY_DATA   TT,
                             HM_FND_CUST_RRS2SALESORG TTT,
                             HM_FND_VALUES            V
                       WHERE TTT.SALES_ORGANIZATION = TT.COMPANY_CODE
                         AND TT.OPERATE_STATUS = 'CREATE'
                         AND TT.CUSTOMER_ID = T.ROW_ID
                         AND V.VALUE = T.INDUSTRY_CLASS
                         AND V.VALUE_SET_ID = 'IndustryClass2'
                         AND V.parent_value_low NOT IN ('1005', '1004', '1021', '1011')
                         AND T.CUSTOMER_NUMBER = in_customer_number )--'C000007647' 
    LOOP
      
      --归档销售区域视图
      COMM_UTIL.COPY_TABLE_LINE('HM_CUST_COMPANY_DATA','','_HIS',CUR_ROWS.COMPANY_VIEW_ID,RETCODE,RETMSG);
      IF RETCODE = 'E' THEN ROLLBACK; RETMSG := 'prc_rrs_companydel:日日顺客户数据视图删除失败! 公司历史归档失败'; RETURN; END IF;
      
      --删除对应销售区域
      DELETE FROM HM_CUST_COMPANY_DATA t where t.row_id = CUR_ROWS.COMPANY_VIEW_ID;
      
    END LOOP;
        
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := 'prc_rrs_companydel:日日顺客户数据视图删除失败!'|| sqlerrm;
  END prc_rrs_companydel;
*/      
  
  
	/****************************************************************
  功能描述：根据业务申请ID将业务申请信息触发成为相应的客户主数据维护动作
  作者：    zhangbiao
  时间：    2009-04-01    
         
  输入参数说明： IN_APPLY_ID           业务申请单ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。根据业务类型分为三部分：创建、更新、扩展
       2。创建时将申请表中的数据分发到客户表中即可
       3。更新时根据申请表中_X的内容更新客户表
       4。扩展时根据扩展试图将数据分发到客户表
       5,内部调用 prc_input_allcheck
  ****************************************************************/
  
	PROCEDURE prc_apply_customer_trans
	(
		in_apply_id  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		str_sql   VARCHAR2(250); --查询SQL
		--str_rowid VARCHAR2(50); --ROWID
		TYPE cur_type IS REF CURSOR;
		cur_view_table           cur_type;
		l_apply_customer         hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_applys                 hm_applys%ROWTYPE; --HM_APPLYS表 行类型  
		l_hm_customers           hm_customers%ROWTYPE; --HM_CUSTOMERS表 行类型
		l_hm_customer_sales_data hm_customer_sales_data%ROWTYPE; --HM_CUSTOMER_SALES_DATA表 行类型
		l_hm_cust_company_data   hm_cust_company_data%ROWTYPE; --HM_CUST_COMPANY_DATA表 行类型
		l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
		l_hm_customer_partners   hm_customer_partners%ROWTYPE;
		l_hm_cust_bank_accounts  hm_cust_bank_accounts%ROWTYPE;
    l_hm_cust_sub_company    hm_cust_sub_company%ROWTYPE;
    l_hm_cust_additional_data hm_cust_additional_data%ROWTYPE;
    
    l_hm_del_customer         hm_del_customer%ROWTYPE; --客户冻结表类型 Lvdecheng 20130723
    customer_del_flag         INTEGER := 0; --冻结表记录 Lvdecheng 20130723
    
    l_hm_thaw_customer         hm_del_customer_thaw%ROWTYPE; --客户冻结表类型 Lvdecheng 20130723
    
		rows_customers           INTEGER := 0;
	
		--ls_customerid       VARCHAR2(20);
		--ls_partnerid        VARCHAR2(20);
		--ls_retmsg           VARCHAR2(250);
		--ls_code             VARCHAR2(2);
		--ls_completedelivery VARCHAR2(2);
	
		customer_exists_flag INTEGER := 0;
		customer_company_exists_flag INTEGER := 0;
    customer_sales_exists_flag INTEGER := 0;
		customer_subcomp_exists_flag INTEGER := 0;
    customer_extend_exists_flag integer := 0;
    
    li_count             INTEGER := 0;
		--lv_companyid         VARCHAR2(20);
		--lv_salesorgid        VARCHAR2(20);
		--ls_accountgrp        VARCHAR2(4);
		ls_action_batch_id   VARCHAR2(20);
		--ls_codetemp          VARCHAR2(20);
		--ls_customernumber    VARCHAR2(20);
    l_trade_companys VARCHAR2(1000);
    
    --Lvdecheng 客户申请更改不同渠道变量  2012-04-26
    --start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ls_smbAreaCode   VARCHAR2(2000); --客户申请经营体颗粒度串
    lcl_table        str_split_table; --字符串分割函数变量数组
    lcl_table_l1     str_split_table;
    s_count          INTEGER := 0;
    ----end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    
    ls_code varchar2(20) ; --门店编码
    customer_rrs_con INTEGER := 0; --日日顺标记统计 Lvdecheng 20130510
    customer_rrs_sale INTEGER := 0; --销售统计标记 Lvdecheng 20130510
    rrs_customer_number VARCHAR2(20); --日日顺客户编码 Lvdecheng 20130510
    
    l_hm_customers_sf           hm_customers%ROWTYPE; --HM_CUSTOMERS表 行类型
		l_hm_customer_sales_data_sf hm_customer_sales_data%ROWTYPE; --HM_CUSTOMER_SALES_DATA表 行类型 ; Lvdecheng 20121024
	    	
	BEGIN
	
		retcode := 'S';
		retmsg  := 'operate completely!';
	
		--0,申请明细信息有效性校验
		FOR cur_rows IN (SELECT *
											 FROM hm_applys
											WHERE apply_id = in_apply_id) LOOP
			l_applys := cur_rows;
		END LOOP;
	
		IF l_applys.apply_id IS NULL THEN
			retcode := 'E';
			retmsg  := 'The Application NO :' || in_apply_id || ' has not been created!';
			RETURN;
		END IF;
	
		IF l_applys.audit_flag = '0' THEN
			retcode := 'E';
			retmsg  := 'The Application NO :' || in_apply_id || ' doesn''t audit!';
			RETURN;
		END IF;
		IF l_applys.transaction_flag > 1 THEN
			retcode := 'E';
			retmsg  := 'The Application NO : ' || in_apply_id || ' has been transfered!';
			RETURN;
		END IF;
	
		--0.1申请明细列表准备
		str_sql := 'SELECT * FROM hm_apply_customer WHERE apply_id = ''' || in_apply_id ||
							 ''' and delete_flag = ''0'' ORDER BY ITEM_NO,ROW_ID ';
	
		----
		ls_action_batch_id := comm_util.func_new_rowid();
		--归档同申请ID的转化日志
		UPDATE hm_applys_transactions
			 SET delete_flag = '1'
		 WHERE apply_id = in_apply_id;
		----
	
		OPEN cur_view_table FOR str_sql;
		LOOP
			<<loops>>
			FETCH cur_view_table
				INTO l_apply_customer;
			rows_customers := cur_view_table%ROWCOUNT;
			EXIT WHEN cur_view_table%NOTFOUND;
		
			--0.2必要校验
			IF l_apply_customer.business_code IS NULL OR l_apply_customer.business_code <> l_applys.business_code THEN
				ROLLBACK;
				retcode := 'E';
				retmsg  := l_apply_customer.item_no ||
									 ' ROW, The bussiness code in Application item is different from the head!';
				RETURN;
			END IF;

      
			----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
      prc_input_allcheck(in_row_id => '',
                         v_hm_apply_customer => l_apply_customer,
                         in_tablename_suffix => '',
                         retcode => retcode, 
                         retmsg => retmsg);
		  IF retcode = 'E' THEN 
				ROLLBACK;
				retmsg  := l_apply_customer.item_no || ' ROW, Error:'||retmsg;
				RETURN;
			END IF;
      
      --获取系统原有客户信息
      customer_exists_flag := 0;
      l_hm_customers := null;
      FOR cur_rows2 IN (SELECT * FROM hm_customers t WHERE t.customer_number = trim(l_apply_customer.customer_number))
      LOOP
        l_hm_customers := cur_rows2;
        customer_exists_flag := customer_exists_flag + 1;
      END LOOP;
      
      l_hm_customers_sf := null;
      --伞下付款方，获取对应理货商售达方客户信息 Lvdecheng 20121024
      IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169' THEN 
         FOR cur_rows2 IN (SELECT * FROM hm_customers t WHERE t.customer_number = trim(l_apply_customer.sbr_sp_number))
         LOOP
                 l_hm_customers_sf := cur_rows2;
         END LOOP;
      
      END IF;

      IF customer_exists_flag < 1 THEN
        IF l_apply_customer.operate_type = 'CREATE' THEN
          --如果客户号信息尚未存在，客户名不应存在
          SELECT COUNT(*)
            INTO li_count
            FROM hm_customers
           WHERE customer_name1 = l_apply_customer.customer_name
           --add 0421 账户组
           and ACCOUNT_GROUP = l_apply_customer.account_group           
             AND delete_flag = '0';
            
          IF li_count > 0 THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := l_apply_customer.item_no || ',customer name is already exist!';
            RETURN;
          END IF;
                    
        ELSIF l_apply_customer.operate_type IN ('UPDATE','EXTEND','CHANGE') THEN
          --客户主数据不存在，不能进行'UPDATE','EXTEND','CHANGE'业务
          ROLLBACK;
          retcode := 'E';
          retmsg  := l_apply_customer.item_no || ',customer number is not exist!'; 
          RETURN;
        END IF;
      ELSIF customer_exists_flag = 1 THEN
        IF l_hm_customers.customer_number IS NULL OR 
          l_hm_customers.row_id IS NULL THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := l_apply_customer.item_no || ',customer info is not exist!';
          RETURN;
        END IF;
       
        --在创建业务中，主数据的原始申请应该是本条申请
        IF l_apply_customer.operate_type = 'CREATE' THEN
          IF l_hm_customers.create_apply_id IS NULL OR
             l_hm_customers.create_apply_id <> in_apply_id THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := l_apply_customer.item_no || ',customer info is already created and not this apply!';
            RETURN;
          END IF;
        END IF;
      ELSE --customer_exists_flag > 1
        ROLLBACK;
        retcode := 'E';
        retmsg  := l_apply_customer.item_no || ',customer info is exist more than one!';
        RETURN;        
      END IF;
      
      
      --ADD JUN.ZHAO 20100423 
      IF l_apply_customer.operate_type = 'CHANGE' AND l_apply_customer.Is_Samejyt = 'JYTCROSS' THEN
      
         /*
         IF l_apply_customer.jyt_code_next in ('1005','1011','1004','1021') then
            l_apply_customer.market_area :='X';
            l_apply_customer.market_area_x :='X';
          else
            l_apply_customer.market_area :='';
            l_apply_customer.market_area_x :='X';          
         end if;
        */
          --l_apply_customer.View_Base_x := 'X';
         l_apply_customer.view_company_x := 'X';
         l_apply_customer.view_sales_x := 'X';
         
         /******************************************************
         ***客户申请类型Change并且为不同渠道更改(JYTCROSS)时，
         ** 在最后审核后更改对应管理客户的经营体以及颗粒度信息
         ** 2012-04-26 Lvdecheng 
         ***start>>>>>>>>>********************************************/
         ls_smbAreaCode := l_apply_customer.smb_customer_jyt ; 
         lcl_table := comm_util.func_split(ls_smbAreaCode,':');
         --一个管理客户
         if lcl_table.count = 1 then
            lcl_table_l1 := comm_util.func_split(lcl_table(1),'@');
            --检验管理客户经营体以及颗粒度是否更改
            if lcl_table_l1(5) is null then
                      select count(*) into s_count from hm_cust_sub_company t 
                          where t.delete_flag = '0' and t.branch_company_code =  lcl_table_l1(1) and 
                          t.jyt = lcl_table_l1(3) and t.area_code is null ;
            elsif lcl_table_l1(5) is not null then
                       select count(*) into s_count from hm_cust_sub_company t 
                          where t.delete_flag = '0' and t.branch_company_code =  lcl_table_l1(1) and 
                          t.jyt = lcl_table_l1(3) and t.area_code = lcl_table_l1(5) ;
            end if;
            --如果改动
            if s_count = 0 then
            
               --如果改动经营体或颗粒度，则更改对应管理客户的经营体以及颗粒度
               --记录hm_cust_sub_company_his历史数据
               insert into hm_cust_sub_company_his select * from hm_cust_sub_company t 
                      where t.branch_company_code = lcl_table_l1(1) ;
               
               --同时更改管理客户hm_cust_sub_company数据
               update hm_cust_sub_company t set t.jyt =  lcl_table_l1(3), t.area_code = lcl_table_l1(5),
                      t.last_upd_by = in_user_name, t.last_upd = sysdate 
                      where t.branch_company_code = lcl_table_l1(1) ;
                      
            end if;
            
         elsif lcl_table.count > 1 then -- 多个管理客户
         
               for i in 1.. lcl_table.count loop 
                   lcl_table_l1 := comm_util.func_split(lcl_table(i),'@');
                   
                   if i = lcl_table.count then
                     exit;
                   end if;
                   
                   if lcl_table_l1(5) is null then
                      select count(*) into s_count from hm_cust_sub_company t 
                          where t.delete_flag = '0' and t.branch_company_code =  lcl_table_l1(1) and 
                          t.jyt = lcl_table_l1(3) and t.area_code is null ;
                   elsif lcl_table_l1(5) is not null then
                       select count(*) into s_count from hm_cust_sub_company t 
                          where t.delete_flag = '0' and t.branch_company_code =  lcl_table_l1(1) and 
                          t.jyt = lcl_table_l1(3) and t.area_code = lcl_table_l1(5) ;
                   end if;
                  
                   
                   --如果改动
                   if s_count = 0 then
                   
                      --如果改动经营体或颗粒度，则更改对应管理客户的经营体以及颗粒度
                      --记录hm_cust_sub_company_his历史数据
                      insert into hm_cust_sub_company_his select * from hm_cust_sub_company t 
                             where t.branch_company_code = lcl_table_l1(1) ;
                      
                      --同时更改管理客户hm_cust_sub_company数据
                      update hm_cust_sub_company t set t.jyt =  lcl_table_l1(3), t.area_code = lcl_table_l1(5),
                             t.last_upd_by = in_user_name, t.last_upd = sysdate 
                             where t.branch_company_code = lcl_table_l1(1) ;
                      
                      
                  end if;
                  
               end loop;
         elsif lcl_table.count = 0 then --空
               null;
         end if;
         /****end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>****/
         
      END IF;
      --ADD END.
            
      ----用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_customers
      ----注意：如果为UPDATE， 或者CREATE打回二次审批业务，那么l_hm_customers中已经有值
      IF l_apply_customer.View_Base_x = 'X'  THEN --添加扩展操作AND l_apply_customer.operate_type <> 'EXTEND' Lvdecheng 
        prc_base_trans( customer_exists_flag,in_user_name,
                        l_apply_customer,l_hm_customers,
                        retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
      
        --银行账户处理
        IF l_apply_customer.operate_type IN ( 'CREATE', 'UPDATE','CHANGE' ) AND        
           l_apply_customer.bank_country IS NOT NULL AND 
           l_apply_customer.bank_key IS NOT NULL AND
           l_apply_customer.account_holder IS NOT NULL THEN

          prc_bank_create(l_apply_customer, l_hm_customers.row_id, in_user_name, retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
        END IF; --维护客户银行帐户信息
      END IF;
      
      ----用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_cust_company
      ----注意：如果为UPDATE，EXTEND，CHANGE, 或者CREATE打回二次审批业务，那么l_hm_cust_company中已经有值
      IF l_apply_customer.view_company_x = 'X' THEN
        FOR cur_rows IN cur_business2company(l_applys.business_type,l_applys.dept_code,l_applys.stock_flag,'CompanyCode',l_applys.partner_function)
        LOOP

          l_hm_cust_company_data := NULL;
          customer_company_exists_flag := 0;          
          FOR cur_rows2 IN (SELECT * FROM hm_cust_company_data WHERE customer_id = l_hm_customers.row_id
                                                               AND company_code = cur_rows.company_code )
          LOOP
            l_hm_cust_company_data := cur_rows2;
            customer_company_exists_flag := customer_company_exists_flag + 1;
          END LOOP; 
          
          --补充主键信息
          l_hm_cust_company_data.customer_id  := l_hm_customers.row_id;
          l_hm_cust_company_data.company_code := cur_rows.company_code; 
          
          --用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_cust_company
          prc_company_trans( customer_company_exists_flag,in_user_name,
                             l_apply_customer,l_hm_cust_company_data,
                             retcode,retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
        
        END LOOP;
        
        --如果1169创建具有送达方功能的客户时，需要同时扩充2000总公司公司代码
        --山东日日顺客户 Lvdecheng 20130627
        
        IF l_apply_customer.Business_Code = 'CST-CREATE-GM-SP-1169' 
          OR l_apply_customer.Business_Code = 'CST-CREATE-GM-SH-1169' 
          OR (l_apply_customer.Business_Code = 'CST-CHANGE-GM-SP-JYTCROSS'
          AND l_apply_customer.jyt_code_next in ('1004','1005','1021'))
          THEN 
          customer_company_exists_flag := 0;
          l_hm_cust_company_data := null;
          FOR CUR_RRS IN(
            SELECT * FROM HM_CUST_RRS T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
          ) LOOP 
            customer_rrs_con := customer_rrs_con + 1;
          END LOOP;
          
          IF customer_rrs_con > 0 THEN 
            --customer_company_exists_flag := customer_company_exists_flag + 1;
            --校验2000下公司代码是否存在
            for cur_row3 in (
                SELECT * FROM hm_cust_company_data WHERE customer_id = l_hm_customers.row_id
                                                               AND company_code = '2000'
              ) loop
              l_hm_cust_company_data := cur_row3 ;
              customer_company_exists_flag := customer_company_exists_flag + 1;
            end loop;
            l_hm_cust_company_data.customer_id  := l_hm_customers.row_id;
            l_hm_cust_company_data.company_code := '2000'; 
            --dbms_output.put_line('customer_id:'||l_hm_customers.row_id);
            prc_company_trans( customer_company_exists_flag,in_user_name,
                             l_apply_customer,l_hm_cust_company_data,
                             retcode,retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
          END IF;
          
        END IF;
        
        
        --售后客户重新扩充5000总公司下分公司 Lvdecheng 20130902
        IF (l_apply_customer.Business_Code = 'CST-EXTEND-GM-SP' 
          OR l_apply_customer.Business_Code = 'CST-EXTEND-GM-SP-1169' )
          and l_apply_customer.account_group in ('0260','0360')
          
        THEN 
          customer_company_exists_flag := 0;
          l_hm_cust_company_data := null;
          FOR CUR_RRS IN(
            SELECT * FROM hm_fnd_cust_hp2salesorg T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
          ) LOOP 
            customer_rrs_con := customer_rrs_con + 1;
          
          
            --customer_company_exists_flag := customer_company_exists_flag + 1;
            l_hm_cust_company_data.customer_id  := l_hm_customers.row_id;
            l_hm_cust_company_data.company_code := CUR_RRS.SALES_ORGANIZATION;
            --dbms_output.put_line('customer_id:'||l_hm_customers.row_id);
            prc_company_trans( customer_company_exists_flag,in_user_name,
                             l_apply_customer,l_hm_cust_company_data,
                             retcode,retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
           END LOOP;
          
        END IF;
        
        
      END IF;

      ----用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_customer_sales_data
      ----注意：如果为UPDATE，EXTEND，CHANGE, 或者CREATE打回二次审批业务，那么l_hm_customer_sales_data中已经有值
      l_trade_companys := '';
      IF l_apply_customer.view_sales_x = 'X' THEN
        FOR cur_rows IN cur_business2company(l_applys.business_type,l_applys.dept_code,l_applys.stock_flag,'SalesOrganization',l_applys.partner_function)
        LOOP
          l_trade_companys := l_trade_companys||cur_rows.company_code||',';
        
          l_hm_customer_sales_data := NULL;
          customer_sales_exists_flag := 0;
          FOR cur_rows2 IN (SELECT * FROM hm_customer_sales_data WHERE customer_id = l_hm_customers.row_id
                                                               AND sales_group = cur_rows.company_code
                                                               AND distribution_channel = '00'
                                                               AND division = '00' )
          LOOP
            l_hm_customer_sales_data := cur_rows2;
            customer_sales_exists_flag := customer_sales_exists_flag + 1;
          END LOOP; 
          
          --伞下付款方，查询理货商对应的销售组织 Lvdecheng 20121024
          IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169' THEN 
             FOR cur_rows2_sf IN (SELECT * FROM hm_customer_sales_data WHERE customer_id = l_hm_customers_sf.row_id
                                                               AND sales_group = cur_rows.company_code
                                                               AND distribution_channel = '00'
                                                               AND division = '00' )
             LOOP
                         l_hm_customer_sales_data_sf := cur_rows2_sf;
                         
             END LOOP; 
          END IF;
          
          --补充主键信息
          l_hm_customer_sales_data.customer_id  := l_hm_customers.row_id;
          l_hm_customer_sales_data.sales_group := cur_rows.company_code; 
          l_hm_customer_sales_data.distribution_channel := '00'; 
          l_hm_customer_sales_data.division := '00'; 
          
          --用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_cust_company
          prc_sales_trans( customer_sales_exists_flag,in_user_name,
                             l_apply_customer,l_hm_customer_sales_data,
                             retcode,retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
          
          
        --ADD JUN.ZHAO 20100429 
        IF l_apply_customer.operate_type IN ( 'EXTEND','CHANGE' )THEN
           
           select max(t.partner_flag_sp),
           max(t.partner_flag_sh),
           max(t.partner_flag_bp),
           max(t.partner_flag_py)
           into l_apply_customer.partner_flag_sp,
           l_apply_customer.partner_flag_sh,
           l_apply_customer.partner_flag_bp,
           l_apply_customer.partner_flag_py
            from hm_customers t
           where t.customer_number = l_apply_customer.customer_number
           and t.delete_flag = '0';
           IF l_apply_customer.operate_type = 'CHANGE' then
           l_apply_customer.partner_flag_sp_x := 'X'; 
           l_apply_customer.partner_flag_sh_x := 'X'; 
           l_apply_customer.partner_flag_bp_x := 'X'; 
           l_apply_customer.partner_flag_py_x := 'X';
           end if;
        END IF;
        --ADD END.  
                

          IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND 
               ( l_apply_customer.partner_flag_sp_x = 'X' OR 
                 l_apply_customer.partner_flag_sh_x = 'X' OR 
                 l_apply_customer.partner_flag_bp_x = 'X' OR 
                 l_apply_customer.partner_flag_py_x = 'X'
               )
               
             )  OR (l_apply_customer.operate_type = 'CHANGE' AND l_apply_customer.Is_Samejyt = 'JYTCROSS' )THEN
            --以下创建合作伙伴
            prc_partner_create(l_apply_customer, l_hm_customers.customer_number, l_hm_customer_sales_data.row_id, in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            
          END IF;
          
          --以下更新Sold_to_party
          IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND l_apply_customer.sold_to_party_x = 'X' ) THEN
            prc_soldto_update(l_apply_customer, cur_rows.company_code, in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            
          END IF;
          
          --伞下付款方流程，将伞下售达方挂在理货商售达方下，创建SH合作伙伴关系 Lvdecheng 20121024
          IF l_apply_customer.business_code = 'CST-CREATE-GM-PYSF-1169' AND 
             l_apply_customer.operate_type = 'CREATE' 
          THEN 
             prc_partner_create_SF(l_apply_customer, l_hm_customers.customer_number, l_hm_customer_sales_data_sf.row_id, in_user_name, retcode, retmsg);                               
             IF retcode = 'E' THEN RETURN; END IF;
          END IF;
          
/*        --启用日日顺，新处理方式
          --以下更新market_area (日日顺标示相关合作伙伴处理)
          IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND l_apply_customer.market_area_x = 'X' ) THEN
            prc_rrsflag_update(l_apply_customer, cur_rows.company_code, in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
          END IF;
*/      
        END LOOP;
        
        --以下更新Sold_to_party后，对以前合作伙伴关系的清理
/*        IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
           ( l_apply_customer.operate_type = 'UPDATE' AND l_apply_customer.sold_to_party_x = 'X' ) THEN
          --prc_soldto_old_update(l_apply_customer, l_trade_companys, in_user_name, retcode, retmsg);
          IF retcode = 'E' THEN RETURN; END IF;
        END IF;*/
        
        --如果1169创建具有送达方功能的客户时，需要同时扩充2000销售组织
        --山东日日顺客户 Lvdecheng 20130627
        
        IF l_apply_customer.Business_Code = 'CST-CREATE-GM-SP-1169' 
          OR l_apply_customer.Business_Code = 'CST-CREATE-GM-SH-1169' 
          OR l_apply_customer.Business_Code = 'CST-CHANGE-GM-SH-SPMC-1169' 
          OR (l_apply_customer.Business_Code = 'CST-CHANGE-GM-SP-JYTCROSS'  
          AND l_apply_customer.jyt_code_next in ('1004','1005','1021'))
          THEN 
          customer_sales_exists_flag := 0;
          l_hm_customer_sales_data := null;
          
          FOR CUR_RRS IN(
            SELECT * FROM HM_CUST_RRS T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
          ) LOOP 
            customer_rrs_sale := customer_rrs_sale + 1;
            
          END LOOP;
          
          IF customer_rrs_sale > 0 THEN  
            
            FOR cur_rows3 IN (SELECT * FROM hm_customer_sales_data WHERE customer_id = l_hm_customers.row_id
                                                               AND sales_group = '2000'
                                                               AND distribution_channel = '00'
                                                               AND division = '00' )
            LOOP
                         l_hm_customer_sales_data := cur_rows3;
                         customer_sales_exists_flag := customer_sales_exists_flag + 1;
            END LOOP; 
            
            l_hm_customer_sales_data.customer_id  := l_hm_customers.row_id;
            l_hm_customer_sales_data.sales_group := '2000'; 
            l_hm_customer_sales_data.distribution_channel := '00'; 
            l_hm_customer_sales_data.division := '00'; 
            prc_sales_trans( customer_sales_exists_flag,in_user_name,
                             l_apply_customer,l_hm_customer_sales_data,
                             retcode,retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            
            
            IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND 
               ( l_apply_customer.partner_flag_sp_x = 'X' OR 
                 l_apply_customer.partner_flag_sh_x = 'X' OR 
                 l_apply_customer.partner_flag_bp_x = 'X' OR 
                 l_apply_customer.partner_flag_py_x = 'X'
               )
               
             )  OR (l_apply_customer.operate_type = 'CHANGE' AND l_apply_customer.Is_Samejyt = 'JYTCROSS' )THEN
            --以下创建售达方合作伙伴
            prc_partner_create(l_apply_customer, l_hm_customers.customer_number, l_hm_customer_sales_data.row_id, in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            --送达方创建此送达方与售达方2000下合作伙伴关系
            
            IF l_apply_customer.Business_Code = 'CST-CREATE-GM-SH-1169' THEN 
              FOR sp_sale_row IN (
                  select *
                    from hm_customer_sales_data t
                   where t.customer_id in
                         (select s.row_id
                            from hm_customers s
                           where s.customer_number =
                                 l_apply_customer.sold_to_party)
                   and t.sales_group = '2000'        
                ) LOOP 
                   prc_partner_create_rrs(l_apply_customer, l_hm_customers.customer_number, sp_sale_row.row_id, in_user_name, retcode, retmsg);
                   IF retcode = 'E' THEN RETURN; END IF;
              END LOOP;
            END IF;
            
          END IF;
          
          --去掉原先合作伙伴关系 Lvdecheng 20140326
          IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND l_apply_customer.sold_to_party_x = 'X' ) THEN
            prc_soldto_update(l_apply_customer, '2000', in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            
          END IF;
          
          END IF;
          
        END IF;
        
        --售后客户扩充5000销售组织 Lvdecheng 20130902
        IF (l_apply_customer.Business_Code = 'CST-EXTEND-GM-SP' 
          OR l_apply_customer.Business_Code = 'CST-EXTEND-GM-SP-1169' ) 
          and l_apply_customer.account_group in ('0260','0380')
        THEN 
          customer_sales_exists_flag := 0;
          l_hm_customer_sales_data := null;
          
          FOR CUR_RRS IN(
            SELECT * FROM hm_fnd_cust_hp2salesorg T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
          ) LOOP 
            customer_rrs_sale := customer_rrs_sale + 1;
            
          
          
          
            l_hm_customer_sales_data.customer_id  := l_hm_customers.row_id;
            l_hm_customer_sales_data.sales_group := CUR_RRS.SALES_ORGANIZATION; 
            l_hm_customer_sales_data.distribution_channel := '00'; 
            l_hm_customer_sales_data.division := '00'; 
            prc_sales_trans( customer_sales_exists_flag,in_user_name,
                             l_apply_customer,l_hm_customer_sales_data,
                             retcode,retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
            
            IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
             ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND 
               ( l_apply_customer.partner_flag_sp_x = 'X' OR 
                 l_apply_customer.partner_flag_sh_x = 'X' OR 
                 l_apply_customer.partner_flag_bp_x = 'X' OR 
                 l_apply_customer.partner_flag_py_x = 'X'
               )
               
             )  OR (l_apply_customer.operate_type = 'CHANGE' AND l_apply_customer.Is_Samejyt = 'JYTCROSS' )THEN
            --以下创建售达方合作伙伴
            
            prc_partner_create(l_apply_customer, l_hm_customers.customer_number, l_hm_customer_sales_data.row_id, in_user_name, retcode, retmsg);
            IF retcode = 'E' THEN RETURN; END IF;
          
          END IF;
          
          END LOOP; 
          
        END IF;
        
        --若创建1169伞下付款方，创建SX售达方与日日顺送达方合作伙伴关系
        --Lvdecheng 20130627
        IF l_apply_customer.Business_Code = 'CST-CREATE-GM-PYSF-1169' THEN 
           customer_rrs_con := 0;
           --扩充2000销售组织合作SP与SX合作伙伴关系
           FOR sf_rrs_row IN (
               SELECT * FROM HM_CUST_RRS T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
             ) LOOP 
             customer_rrs_con := customer_rrs_con + 1;
           END LOOP;
           IF customer_rrs_con>0 THEN 
              FOR sx_sale_row IN (
               select tt.* 
                      from hm_customer_sales_data tt
                      where tt.customer_id in
                            (select ttt.row_id
                                    from hm_customers ttt
                                    where ttt.customer_number = l_apply_customer.sbr_sp_number)
                      and tt.sales_group = '2000'
             ) LOOP 
                      prc_partner_create_SF(l_apply_customer, l_hm_customers.customer_number, sx_sale_row.row_id, in_user_name, retcode, retmsg);                               
                      IF retcode = 'E' THEN RETURN; END IF;
             END LOOP;
             
           END IF;
        END IF;
        
        IF l_apply_customer.operate_type IN ('CREATE','EXTEND') OR
           ( l_apply_customer.operate_type IN ( 'UPDATE','CHANGE' ) AND l_apply_customer.Tax_Classification_x = 'X' ) THEN
           
           prc_tax_create(l_apply_customer,l_hm_customers.row_id,in_user_name,retcode,retmsg);
          IF retcode = 'E' THEN RETURN; END IF;           
        END IF;   
        
      END IF;
            		
      ----用申请单信息 l_apply_customer 构建补充主数据管理户条目结构 l_hm_cust_sub_company
      ----注意：如果为UPDATE，CHANGE, 或者CREATE打回二次审批业务，那么 l_hm_cust_sub_company 中已经有值
      IF l_apply_customer.view_subcompany_x = 'X' THEN
        
        l_hm_cust_sub_company := NULL;
        customer_subcomp_exists_flag := 0;
        FOR cur_rows2 IN (SELECT * FROM hm_cust_sub_company T where t.branch_company_code = l_apply_customer.branch_company_code)
        LOOP
          l_hm_cust_sub_company := cur_rows2;
          customer_subcomp_exists_flag := customer_subcomp_exists_flag + 1;
        END LOOP; 
          
        --补充主键信息
        if l_apply_customer.business_type = 'JC' THEN
          l_hm_cust_sub_company.branch_code := '12'; 
        ELSIF l_apply_customer.business_type = 'GM' THEN
          l_hm_cust_sub_company.branch_code := l_apply_customer.Dept_Code; 
        END IF;
                
        --用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_cust_company
        prc_subcomp_trans( customer_subcomp_exists_flag,in_user_name,
                           l_apply_customer,l_hm_cust_sub_company,
                           retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
        
      END IF;
            		
      ----用申请单信息 l_apply_customer 构建补充主数据扩展信息条目结构 l_hm_cust_additional_data
      ----注意：如果为UPDATE，CHANGE, 或者CREATE打回二次审批业务，那么 l_hm_cust_additional_data 中已经有值
      IF l_apply_customer.view_extend_x = 'X' THEN
        
        l_hm_cust_additional_data := NULL;
        customer_extend_exists_flag := 0;
        FOR cur_rows2 IN (SELECT * FROM hm_cust_additional_data T where t.customer_id = l_hm_customers.row_id)
        LOOP
          l_hm_cust_additional_data := cur_rows2;
          customer_extend_exists_flag := customer_extend_exists_flag + 1;
        END LOOP; 
        
        --补充主键信息
        l_hm_cust_additional_data.customer_id := l_hm_customers.row_id;
        
        --如果客户申请为门店申请，自动发门店编码 Lvdecheng 20120911 
        -------------->>>>>>>>>>>>>>>>>>>>>>>>>>start>>>>>>>>>>>>>>>>>>>>>>>>>----------------------
        if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'CREATE' then
           
           --自动发门店编码S码
           generate_code.generate_master_code('SHOP',
                                          'MD',
                                          ls_code,
                                          retcode,
                                          retmsg); 
           l_apply_customer.cust_shop_number := ls_code ;   
           
        end if;  
        
        --如果客户申请为门店申请，自动发门店编码 baochh 20120726
        if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'UPDATE'
         AND l_apply_customer.Cust_Shop_Number IS NULL  then
           
           --自动发门店编码S码
           generate_code.generate_master_code('SHOP',
                                          'MD',
                                          ls_code,
                                          retcode,
                                          retmsg); 
           l_apply_customer.cust_shop_number := ls_code ;   
           
        end if; 
        ------------------>>>>>>>>>>>>>>end>>>>>>>>>>>>>>>>>>>>>>>>-----------------------------
          
        
                
        --用申请单信息 l_apply_customer 构建补充主数据条目结构 l_hm_cust_company
        prc_extend_trans( customer_extend_exists_flag,in_user_name,
                           l_apply_customer,l_hm_cust_additional_data,
                           retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
        
      END IF;
      
      
      --如果客户冻结流程转化 Lvdecheng 20130723
      IF l_apply_customer.business_code = 'CST-FREEZE-GM' 
         OR l_apply_customer.business_code = 'CST-FREEZE-GM-1169'  
      THEN 
        
        customer_del_flag := 0;
        FOR cur_rows2 IN (SELECT * FROM hm_del_customer T where t.customer_number = l_apply_customer.customer_number)
        LOOP
          l_hm_del_customer := cur_rows2;
          customer_del_flag := customer_del_flag + 1;
        END LOOP;  
        
         
        prc_del_customer_trans( customer_del_flag,in_user_name,
                        l_apply_customer,l_hm_del_customer,
                        retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
        
      END IF;
      
      
      --客户解冻流程转化 Lvdecheng 20130723
      IF l_apply_customer.business_code = 'CST-UNFREEZE-GM' 
         OR l_apply_customer.business_code = 'CST-UNFREEZE-GM-1169'  
      THEN 
        
        customer_del_flag := 0;
        FOR cur_rows2 IN (SELECT * FROM HM_DEL_CUSTOMER_THAW T where t.customer_number = l_apply_customer.customer_number)
        LOOP
          l_hm_thaw_customer := cur_rows2;
          customer_del_flag := customer_del_flag + 1;
        END LOOP;  
        
         
        prc_customer_thaw_trans( customer_del_flag,in_user_name,
                        l_apply_customer,l_hm_thaw_customer,
                        retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
        
      END IF;
      
      
            		
-----------------------------------------
			-------4记录申请单与客户主数据转化关系
		
			l_hm_applys_transactions.action_batch_id := ls_action_batch_id;
			l_hm_applys_transactions.apply_id        := in_apply_id;
			l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
			l_hm_applys_transactions.master_row_code := l_apply_customer.customer_number;
			l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
			l_hm_applys_transactions.created_by      := in_user_name;
			l_hm_applys_transactions.created         := SYSDATE;
			l_hm_applys_transactions.last_upd_by     := in_user_name;
			l_hm_applys_transactions.last_upd        := SYSDATE;
			l_hm_applys_transactions.active_flag     := '1';
			l_hm_applys_transactions.delete_flag     := '0';
		
			INSERT INTO hm_applys_transactions
			VALUES l_hm_applys_transactions;

      --临时码替换  -----for beta
      if instr(l_apply_customer.customer_number,'TEMP') > 0 THEN
        prc_tmpcode2mastercode('CUSTOMER_NUMBER',
                               l_apply_customer.customer_number,
                               l_apply_customer.customer_number,
                               retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
      END IF;
      
      --当客户编码发码成功后，更新申请单门店编码 Lvdecheng 20120911 
      -----------------start---------------------
      if l_apply_customer.cust_flag_md = '1' and l_apply_customer.operate_type = 'CREATE' then 
          update hm_apply_customer t set t.cust_shop_number = l_apply_customer.cust_shop_number where t.apply_id = l_apply_customer.apply_id ;                      
      end if;
      -----------------end------------------------
      
      if instr(l_apply_customer.branch_company_code,'TEMP') > 0 THEN
        prc_tmpcode2mastercode('MANAGER_CUSTOMER',
                               l_apply_customer.branch_company_code,
                               l_apply_customer.branch_company_code,
                               retcode,retmsg);
        IF retcode = 'E' THEN RETURN; END IF;
      END IF;
      
      --申请文件复制
      prc_file_apply2data( 'HM_APPLY_CUSTOMER',l_apply_customer.row_id,
                           'HM_CUSTOMERS',l_hm_customers.row_id,
                           in_user_name,retcode,retmsg  );
      IF retcode = 'E' THEN RETURN; END IF;
      
/*      --要求所有客户都加入日日顺公司，所以去掉此方法---deleted by zhangbiao 20101118 for fanzg
      --删除多余 日日顺公司视图
      prc_rrs_companydel( l_apply_customer.customer_number, retcode, retmsg );
      IF retcode = 'E' THEN RETURN; END IF;
*/      
		END LOOP;
		CLOSE cur_view_table;

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'operate failure !' || SQLERRM;
	END prc_apply_customer_trans;

	PROCEDURE prc_apply2apply_trans
	( l_apply_customer_temp IN hm_apply_customer%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_apply2apply_trans:operate success !';  
    
    --l_apply_customer.row_id := l_apply_customer_temp.row_id;
    --l_apply_customer.created_by := l_apply_customer_temp.created_by;
    --l_apply_customer.created := l_apply_customer_temp.created;
    --l_apply_customer.last_upd_by := l_apply_customer_temp.last_upd_by;
    --l_apply_customer.last_upd := l_apply_customer_temp.last_upd;
    --l_apply_customer.modification_num := l_apply_customer_temp.modification_num;
    --l_apply_customer.delete_flag := l_apply_customer_temp.delete_flag;
    --l_apply_customer.active_flag := l_apply_customer_temp.active_flag;
    --l_apply_customer.remark := l_apply_customer_temp.remark;
    --l_apply_customer.action_batch_id := l_apply_customer_temp.action_batch_id;
    --l_apply_customer.business_code := l_apply_customer_temp.business_code;
    --l_apply_customer.master_type := l_apply_customer_temp.master_type;
    --l_apply_customer.operate_type := l_apply_customer_temp.operate_type;
    --l_apply_customer.business_type := l_apply_customer_temp.business_type;
    --l_apply_customer.partner_function := l_apply_customer_temp.partner_function;
    --l_apply_customer.is_samejyt := l_apply_customer_temp.is_samejyt;
    --l_apply_customer.dept_code := l_apply_customer_temp.dept_code;
    --l_apply_customer.stock_flag := l_apply_customer_temp.stock_flag;
    --l_apply_customer.apply_id := l_apply_customer_temp.apply_id;
    --l_apply_customer.item_no := l_apply_customer_temp.item_no;
    --l_apply_customer.view_base_x := l_apply_customer_temp.view_base_x;
    --l_apply_customer.view_company_x := l_apply_customer_temp.view_company_x;
    --l_apply_customer.view_sales_x := l_apply_customer_temp.view_sales_x;
    --l_apply_customer.view_extend_x := l_apply_customer_temp.view_extend_x;
    --l_apply_customer.view_subcompany_x := l_apply_customer_temp.view_subcompany_x;
    --l_apply_customer.partner_flag_sp := l_apply_customer_temp.partner_flag_sp;
    --l_apply_customer.partner_flag_sp_x := l_apply_customer_temp.partner_flag_sp_x;
    --l_apply_customer.partner_flag_sh := l_apply_customer_temp.partner_flag_sh;
    --l_apply_customer.partner_flag_sh_x := l_apply_customer_temp.partner_flag_sh_x;
    --l_apply_customer.partner_flag_bp := l_apply_customer_temp.partner_flag_bp;
    --l_apply_customer.partner_flag_bp_x := l_apply_customer_temp.partner_flag_bp_x;
    --l_apply_customer.partner_flag_py := l_apply_customer_temp.partner_flag_py;
    --l_apply_customer.partner_flag_py_x := l_apply_customer_temp.partner_flag_py_x;
    l_apply_customer.customer_title := l_apply_customer_temp.customer_title;
    l_apply_customer.customer_title_x := l_apply_customer_temp.customer_title_x;
    --l_apply_customer.account_group := l_apply_customer_temp.account_group;
    --l_apply_customer.account_group_x := l_apply_customer_temp.account_group_x;
    --l_apply_customer.customer_number := l_apply_customer_temp.customer_number;
    --l_apply_customer.customer_number_x := l_apply_customer_temp.customer_number_x;
    --l_apply_customer.customer_name := l_apply_customer_temp.customer_name;
    --l_apply_customer.customer_name_x := l_apply_customer_temp.customer_name_x;
    --l_apply_customer.name2 := l_apply_customer_temp.name2;
    --l_apply_customer.name2_x := l_apply_customer_temp.name2_x;
    --l_apply_customer.name3 := l_apply_customer_temp.name3;
    --l_apply_customer.name3_x := l_apply_customer_temp.name3_x;
    l_apply_customer.search_terms := l_apply_customer_temp.search_terms;
    l_apply_customer.search_terms_x := l_apply_customer_temp.search_terms_x;
    l_apply_customer.customer_country := l_apply_customer_temp.customer_country;
    l_apply_customer.customer_country_x := l_apply_customer_temp.customer_country_x;
    l_apply_customer.LANGUAGE := l_apply_customer_temp.language;
    l_apply_customer.language_x := l_apply_customer_temp.language_x;
    --l_apply_customer.region := l_apply_customer_temp.region;
    --l_apply_customer.region_x := l_apply_customer_temp.region_x;
    --l_apply_customer.city := l_apply_customer_temp.city;
    --l_apply_customer.city_x := l_apply_customer_temp.city_x;
    --l_apply_customer.street := l_apply_customer_temp.street;
    --l_apply_customer.street_x := l_apply_customer_temp.street_x;
    --l_apply_customer.postal_code := l_apply_customer_temp.postal_code;
    --l_apply_customer.postal_code_x := l_apply_customer_temp.postal_code_x;
    --l_apply_customer.telephone := l_apply_customer_temp.telephone;
    --l_apply_customer.telephone_x := l_apply_customer_temp.telephone_x;
    --l_apply_customer.fax := l_apply_customer_temp.fax;
    --l_apply_customer.fax_x := l_apply_customer_temp.fax_x;
    --l_apply_customer.contact_person_department := l_apply_customer_temp.contact_person_department;
    --l_apply_customer.contact_person_department_x := l_apply_customer_temp.contact_person_department_x;
    --l_apply_customer.contact_person := l_apply_customer_temp.contact_person;
    --l_apply_customer.contact_person_x := l_apply_customer_temp.contact_person_x;
    --l_apply_customer.phone_number1 := l_apply_customer_temp.phone_number1;
    --l_apply_customer.phone_number1_x := l_apply_customer_temp.phone_number1_x;
    --l_apply_customer.legal_person := l_apply_customer_temp.legal_person;
    --l_apply_customer.legal_person_x := l_apply_customer_temp.legal_person_x;
    l_apply_customer.company_type := l_apply_customer_temp.company_type;
    l_apply_customer.company_type_x := l_apply_customer_temp.company_type_x;
    l_apply_customer.vat_reg_no := l_apply_customer_temp.vat_reg_no;
    l_apply_customer.vat_reg_no_x := l_apply_customer_temp.vat_reg_no_x;
    --l_apply_customer.train_station := l_apply_customer_temp.train_station;
    --l_apply_customer.train_station_x := l_apply_customer_temp.train_station_x;
    l_apply_customer.customer_class := l_apply_customer_temp.customer_class;
    l_apply_customer.customer_class_x := l_apply_customer_temp.customer_class_x;
    l_apply_customer.industry_class := l_apply_customer_temp.industry_class;
    l_apply_customer.industry_class_x := l_apply_customer_temp.industry_class_x;
    l_apply_customer.industry_class_old := l_apply_customer_temp.industry_class_old;
    l_apply_customer.industry_class_old_x := l_apply_customer_temp.industry_class_old_x;
    l_apply_customer.market_area := l_apply_customer_temp.market_area;
    l_apply_customer.market_area_x := l_apply_customer_temp.market_area_x;
    l_apply_customer.industry := l_apply_customer_temp.industry;
    l_apply_customer.industry_x := l_apply_customer_temp.industry_x;
    l_apply_customer.niles_mark := l_apply_customer_temp.niles_mark;
    l_apply_customer.niles_mark_x := l_apply_customer_temp.niles_mark_x;
    l_apply_customer.estimate_status := l_apply_customer_temp.estimate_status;
    l_apply_customer.estimate_status_x := l_apply_customer_temp.estimate_status_x;
    l_apply_customer.taxdoc_type := l_apply_customer_temp.taxdoc_type;
    l_apply_customer.taxdoc_type_x := l_apply_customer_temp.taxdoc_type_x;
    l_apply_customer.customer_stat_category := l_apply_customer_temp.customer_stat_category;
    l_apply_customer.customer_stat_category_x := l_apply_customer_temp.customer_stat_category_x;
    --l_apply_customer.vendor := l_apply_customer_temp.vendor;
    --l_apply_customer.vendor_x := l_apply_customer_temp.vendor_x;
    --l_apply_customer.bank_country := l_apply_customer_temp.bank_country;
    --l_apply_customer.bank_country_x := l_apply_customer_temp.bank_country_x;
    --l_apply_customer.bank_key := l_apply_customer_temp.bank_key;
    --l_apply_customer.bank_key_x := l_apply_customer_temp.bank_key_x;
    --l_apply_customer.bank_account := l_apply_customer_temp.bank_account;
    --l_apply_customer.bank_account_x := l_apply_customer_temp.bank_account_x;
    --l_apply_customer.account_holder := l_apply_customer_temp.account_holder;
    --l_apply_customer.account_holder_x := l_apply_customer_temp.account_holder_x;
    --l_apply_customer.bank_name := l_apply_customer_temp.bank_name;
    --l_apply_customer.bank_name_x := l_apply_customer_temp.bank_name_x;
    l_apply_customer.recon_account := l_apply_customer_temp.recon_account;
    l_apply_customer.recon_account_x := l_apply_customer_temp.recon_account_x;
    l_apply_customer.sort_key := l_apply_customer_temp.sort_key;
    l_apply_customer.sort_key_x := l_apply_customer_temp.sort_key_x;
    l_apply_customer.terms_of_payment := l_apply_customer_temp.terms_of_payment;
    l_apply_customer.terms_of_payment_x := l_apply_customer_temp.terms_of_payment_x;
    l_apply_customer.payment_methods := l_apply_customer_temp.payment_methods;
    l_apply_customer.payment_methods_x := l_apply_customer_temp.payment_methods_x;
    l_apply_customer.prev_acct_no := l_apply_customer_temp.prev_acct_no;
    l_apply_customer.prev_acct_no_x := l_apply_customer_temp.prev_acct_no_x;
    l_apply_customer.hq := l_apply_customer_temp.hq;
    l_apply_customer.hq_x := l_apply_customer_temp.hq_x;
    l_apply_customer.preference_flag := l_apply_customer_temp.preference_flag;
    l_apply_customer.preference_flag_x := l_apply_customer_temp.preference_flag_x;
    l_apply_customer.discount_print_flag := l_apply_customer_temp.discount_print_flag;
    l_apply_customer.discount_print_flag_x := l_apply_customer_temp.discount_print_flag_x;
    l_apply_customer.account_remark := l_apply_customer_temp.account_remark;
    l_apply_customer.account_remark_x := l_apply_customer_temp.account_remark_x;
    l_apply_customer.sales_district := l_apply_customer_temp.sales_district;
    l_apply_customer.sales_district_x := l_apply_customer_temp.sales_district_x;
    l_apply_customer.sales_group := l_apply_customer_temp.sales_group;
    l_apply_customer.sales_group_x := l_apply_customer_temp.sales_group_x;
    l_apply_customer.currency := l_apply_customer_temp.currency;
    l_apply_customer.currency_x := l_apply_customer_temp.currency_x;
    l_apply_customer.price_group := l_apply_customer_temp.price_group;
    l_apply_customer.price_group_x := l_apply_customer_temp.price_group_x;
    l_apply_customer.customer_summary_group := l_apply_customer_temp.customer_summary_group;
    l_apply_customer.customer_summary_group_x := l_apply_customer_temp.customer_summary_group_x;
    l_apply_customer.customer_price_procedure := l_apply_customer_temp.customer_price_procedure;
    l_apply_customer.customer_price_procedure_x := l_apply_customer_temp.customer_price_procedure_x;
    l_apply_customer.delivering_plant := l_apply_customer_temp.delivering_plant;
    l_apply_customer.delivering_plant_x := l_apply_customer_temp.delivering_plant_x;
    l_apply_customer.acct_assgmt_group := l_apply_customer_temp.acct_assgmt_group;
    l_apply_customer.acct_assgmt_group_x := l_apply_customer_temp.acct_assgmt_group_x;
    l_apply_customer.tax_classification := l_apply_customer_temp.tax_classification;
    l_apply_customer.tax_classification_x := l_apply_customer_temp.tax_classification_x;
    l_apply_customer.ship_condition := l_apply_customer_temp.ship_condition;
    l_apply_customer.ship_condition_x := l_apply_customer_temp.ship_condition_x;
    l_apply_customer.pod_relation := l_apply_customer_temp.pod_relation;
    l_apply_customer.pod_relation_x := l_apply_customer_temp.pod_relation_x;
    --l_apply_customer.sold_to_party := l_apply_customer_temp.sold_to_party;
    --l_apply_customer.sold_to_party_x := l_apply_customer_temp.sold_to_party_x;
    l_apply_customer.global_pc_code := l_apply_customer_temp.global_pc_code;
    l_apply_customer.global_pc_code_x := l_apply_customer_temp.global_pc_code_x;
    l_apply_customer.parent_company_code := l_apply_customer_temp.parent_company_code;
    l_apply_customer.parent_company_code_x := l_apply_customer_temp.parent_company_code_x;
    l_apply_customer.org_group_code := l_apply_customer_temp.org_group_code;
    l_apply_customer.org_group_code_x := l_apply_customer_temp.org_group_code_x;
    l_apply_customer.is_storefront := l_apply_customer_temp.is_storefront;
    l_apply_customer.is_storefront_x := l_apply_customer_temp.is_storefront_x;
    l_apply_customer.old_customer_code := l_apply_customer_temp.old_customer_code;
    l_apply_customer.old_customer_code_x := l_apply_customer_temp.old_customer_code_x;
    l_apply_customer.is_seller := l_apply_customer_temp.is_seller;
    l_apply_customer.is_seller_x := l_apply_customer_temp.is_seller_x;
    l_apply_customer.sales_region := l_apply_customer_temp.sales_region;
    l_apply_customer.sales_region_x := l_apply_customer_temp.sales_region_x;
    l_apply_customer.cust_property := l_apply_customer_temp.cust_property;
    l_apply_customer.cust_property_x := l_apply_customer_temp.cust_property_x;
    l_apply_customer.cust_property_desc := l_apply_customer_temp.cust_property_desc;
    l_apply_customer.cust_property_desc_x := l_apply_customer_temp.cust_property_desc_x;
    l_apply_customer.cust_type := l_apply_customer_temp.cust_type;
    l_apply_customer.cust_type_x := l_apply_customer_temp.cust_type_x;
    l_apply_customer.csg_keyaccount_flag := l_apply_customer_temp.csg_keyaccount_flag;
    l_apply_customer.csg_keyaccount_flag_x := l_apply_customer_temp.csg_keyaccount_flag_x;
    l_apply_customer.csg_keyaccount_category := l_apply_customer_temp.csg_keyaccount_category;
    l_apply_customer.csg_keyaccount_category_x := l_apply_customer_temp.csg_keyaccount_category_x;
    l_apply_customer.csg_keyaccount_class := l_apply_customer_temp.csg_keyaccount_class;
    l_apply_customer.csg_keyaccount_class_x := l_apply_customer_temp.csg_keyaccount_class_x;
    l_apply_customer.cust_functions := l_apply_customer_temp.cust_functions;    
    l_apply_customer.cust_functions_x := l_apply_customer_temp.cust_functions_x;

    l_apply_customer.BRAND1 := l_apply_customer_temp.BRAND1;
    l_apply_customer.BRAND1_X := l_apply_customer_temp.BRAND1_X;
    l_apply_customer.BRAND2 := l_apply_customer_temp.BRAND2;
    l_apply_customer.BRAND2_X := l_apply_customer_temp.BRAND2_X;
    l_apply_customer.BRAND3 := l_apply_customer_temp.BRAND3;
    l_apply_customer.BRAND3_X := l_apply_customer_temp.BRAND3_X;
    l_apply_customer.SALES_AMOUNT1 := l_apply_customer_temp.SALES_AMOUNT1;
    l_apply_customer.SALES_AMOUNT1_X := l_apply_customer_temp.SALES_AMOUNT1_X;
    l_apply_customer.SALES_AMOUNT2 := l_apply_customer_temp.SALES_AMOUNT2;
    l_apply_customer.SALES_AMOUNT2_X := l_apply_customer_temp.SALES_AMOUNT2_X;
    l_apply_customer.SALES_AMOUNT3 := l_apply_customer_temp.SALES_AMOUNT3;
    l_apply_customer.SALES_AMOUNT3_X := l_apply_customer_temp.SALES_AMOUNT3_X;
    l_apply_customer.SALES_VOLUME := l_apply_customer_temp.SALES_VOLUME;
    l_apply_customer.SALES_VOLUME_X := l_apply_customer_temp.SALES_VOLUME_X;
    l_apply_customer.OUTLET_AREA := l_apply_customer_temp.OUTLET_AREA;
    l_apply_customer.OUTLET_AREA_X := l_apply_customer_temp.OUTLET_AREA_X;
    l_apply_customer.REGISTERED_CAPITAL := l_apply_customer_temp.REGISTERED_CAPITAL;
    l_apply_customer.REGISTERED_CAPITAL_X := l_apply_customer_temp.REGISTERED_CAPITAL_X;
    l_apply_customer.MANAGE_LIMIT_YEAR := l_apply_customer_temp.MANAGE_LIMIT_YEAR;
    l_apply_customer.MANAGE_LIMIT_YEAR_X := l_apply_customer_temp.MANAGE_LIMIT_YEAR_X;
    l_apply_customer.COOPERATION_SCOPE := l_apply_customer_temp.COOPERATION_SCOPE;
    l_apply_customer.COOPERATION_SCOPE_X := l_apply_customer_temp.COOPERATION_SCOPE_X;
    l_apply_customer.COOPERATION_SALES_VOLUMN := l_apply_customer_temp.COOPERATION_SALES_VOLUMN;
    l_apply_customer.COOPERATION_SALES_VOLUMN_X := l_apply_customer_temp.COOPERATION_SALES_VOLUMN_X;
    --是否金融户
    l_apply_customer.cust_flag_banking := l_apply_customer_temp.cust_flag_banking;
    l_apply_customer.cust_flag_banking_x := l_apply_customer_temp.cust_flag_banking_x;
    --l_apply_customer.manage_customer := l_apply_customer_temp.manage_customer;
    --l_apply_customer.manage_customer_x := l_apply_customer_temp.manage_customer_x;
    --l_apply_customer.branch_code := l_apply_customer_temp.branch_code;
    --l_apply_customer.branch_code_x := l_apply_customer_temp.branch_code_x;
    --l_apply_customer.branch_company_code := l_apply_customer_temp.branch_company_code;
    --l_apply_customer.branch_company_code_x := l_apply_customer_temp.branch_company_code_x;
    --l_apply_customer.branch_company_name := l_apply_customer_temp.branch_company_name;
    --l_apply_customer.branch_company_name_x := l_apply_customer_temp.branch_company_name_x;
    --l_apply_customer.customer_manager := l_apply_customer_temp.customer_manager;
    --l_apply_customer.customer_manager_x := l_apply_customer_temp.customer_manager_x;
    --l_apply_customer.area_code := l_apply_customer_temp.area_code;
    --l_apply_customer.area_code_x := l_apply_customer_temp.area_code_x;
    --l_apply_customer.jyt_code := l_apply_customer_temp.jyt_code;
    --l_apply_customer.jyt_code_next := l_apply_customer_temp.jyt_code_next;
    --l_apply_customer.customer_number_temp := l_apply_customer_temp.customer_number_temp;
    --l_apply_customer.branch_company_code_temp := l_apply_customer_temp.branch_company_code_temp    
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_apply2apply_trans:operate failure !' || SQLERRM;  
  END prc_apply2apply_trans;  
  
	PROCEDURE prc_base2apply_trans
	( l_hm_customers IN hm_customers%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';  
    
    --l_apply_customer.view_base_x := 'X';

    l_apply_customer.customer_name := l_hm_customers.customer_name1; --
    l_apply_customer.name2 := l_hm_customers.customer_name2; --
    l_apply_customer.name3 := l_hm_customers.customer_name3; --
    l_apply_customer.search_terms := l_hm_customers.search_term; --
    l_apply_customer.postal_code := l_hm_customers.postal_code; --
    l_apply_customer.city := l_hm_customers.city_street_room; --
    l_apply_customer.street := l_hm_customers.street_room; --
    l_apply_customer.customer_country := l_hm_customers.country; --
    l_apply_customer.region := l_hm_customers.region; --
    l_apply_customer.telephone := l_hm_customers.phone_number; --
    l_apply_customer.language := l_hm_customers.language; --
    l_apply_customer.fax := l_hm_customers.fax_number; --
    l_apply_customer.contact_person := l_hm_customers.name1; --
    l_apply_customer.phone_number1 := l_hm_customers.phone_number1; --
    l_apply_customer.vat_reg_no := l_hm_customers.tax_code; --
    l_apply_customer.customer_class := l_hm_customers.customer_category; --
    l_apply_customer.niles_mark := l_hm_customers.niles_mark; --
    l_apply_customer.estimate_status := l_hm_customers.estimate_status; --
    l_apply_customer.industry := l_hm_customers.industry_category; --
    l_apply_customer.industry_class := l_hm_customers.industry_class; --
    l_apply_customer.industry_class_old := l_hm_customers.industry_class; --added by zhangbiao20100310
    l_apply_customer.customer_stat_category := l_hm_customers.customer_stat_category; --
    l_apply_customer.taxdoc_type := l_hm_customers.taxdoc_type; --
    l_apply_customer.legal_person := l_hm_customers.legal_person; --
    l_apply_customer.company_type := l_hm_customers.company_type; --
    l_apply_customer.vendor := l_hm_customers.vendor_code; --
    --l_apply_customer.dept_code := l_hm_customers.trade_code; --需论证
    l_apply_customer.market_area := l_hm_customers.market_area; --
    l_apply_customer.customer_title := l_hm_customers.customer_title; --
    
    l_apply_customer.customer_flag := l_hm_customers.customer_flag; --
    l_apply_customer.customer_flag_old := l_hm_customers.customer_flag; --
    l_apply_customer.tax_code_desc := l_hm_customers.tax_code_desc ; -- 
    
    l_apply_customer.cust_ds_flag := '0' ;
    
    l_apply_customer.cust_hub_flag := '0' ; --是否HUB库 Lvdecheng 20131127
    
    l_apply_customer.cust_cnumber_base := l_hm_customers.cust_cnumber_base ; --客户方标志 Lvdecheng 20140630
    l_apply_customer.cust_flag_banking := l_hm_customers.cust_flag_banking;---是否金融户 lzl 
    
    IF l_apply_customer.operate_type IN ('UPDATE','CHANGE','EXTEND','FREEZE','UNFREEZE') THEN 
      l_apply_customer.customer_number := l_hm_customers.customer_number; --客户编号(客户编号.RF02D-KUNNR)
      l_apply_customer.account_group := l_hm_customers.account_group;--科目组(账户组.KNA1-KTOKD)[CustomerAccountGroup]

      IF l_apply_customer.operate_type IN ('UPDATE','CHANGE') THEN
        l_apply_customer.partner_flag_sp := l_hm_customers.partner_flag_sp; --
        l_apply_customer.partner_flag_sh := l_hm_customers.partner_flag_sh; --
        l_apply_customer.partner_flag_bp := l_hm_customers.partner_flag_bp; --
        l_apply_customer.partner_flag_py := l_hm_customers.partner_flag_py; --    
      END IF;
      
      --------门店信息添加 Lvdecheng 20120911--------------------------
      if l_apply_customer.business_code IN ('CST-UPDATE-GM') then 
         l_apply_customer.cust_flag_md := l_hm_customers.cust_flag_md ;
      end if;
      -----------------------------------------------------------------
      
      l_apply_customer.cust_con_flag := l_hm_customers.cust_con_flag ; --国家政策标识 Lvdecheng 20120926
      --集采客户区域编码为当前客户工贸编码 Lvdecheng 20121130
      IF l_apply_customer.Business_Type = 'JC' THEN 
         l_apply_customer.dept_code := l_hm_customers.Trade_Code;
      END IF;
      IF l_apply_customer.Business_Type = 'PL' THEN 
         l_apply_customer.dept_code := '';
      END IF;
      
      IF l_apply_customer.Business_Type = 'PL' AND l_apply_customer.operate_type = 'UPDATE'  THEN
         l_apply_customer.train_station := l_hm_customers.trade_code ;
      END IF;
      
      l_apply_customer.cust_ds_flag := l_hm_customers.cust_ds_flag ; 
      
      l_apply_customer.cust_hub_flag := l_hm_customers.cust_hub_flag;--是否HUB库 Lvdecheng 20131127
      
    END IF;     
    
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_base2apply_trans:operate failure !' || SQLERRM;  
  END prc_base2apply_trans;  

	PROCEDURE prc_company2apply_trans
	( l_hm_cust_company_data IN hm_cust_company_data%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_company2apply_trans:operate success !';  
    
    --l_apply_customer.view_company_x := 'X';

    l_apply_customer.hq := l_hm_cust_company_data.hq; --总部;
    l_apply_customer.recon_account := l_hm_cust_company_data.reconcile_account; --统驭科目(统驭科目.KNB1-AKONT)[ReconcileAccount];
    l_apply_customer.prev_acct_no := l_hm_cust_company_data.previous_acct_number; --先前的帐号(先前的帐号.KNB1-ALTKN);
    l_apply_customer.sort_key := l_hm_cust_company_data.sequence_no; --排序码(排序码.KNB1-ZUAWA)[OrderCode];
        l_apply_customer.terms_of_payment := '0000';
   -- l_apply_customer.terms_of_payment := l_hm_cust_company_data.payment_term; --付款条款(付款条件.KNB1-ZTERM)[PayTerm];
    l_apply_customer.payment_methods := l_hm_cust_company_data.payment_method; --付款方式(付款方式.KNB1-ZWELS)[PayMethod];
    l_apply_customer.preference_flag := l_hm_cust_company_data.preference_flag; --优先标识(01,手机户 02, 空调户);
    l_apply_customer.discount_print_flag := l_hm_cust_company_data.discount_print_flag; --折扣打印标识(职员的传真);
    l_apply_customer.account_remark := l_hm_cust_company_data.account_remark; --用友编号(账号的备注);
    l_apply_customer.customer_ledger_flag := l_hm_cust_company_data.customer_ledger_flag ; --客户总账标记 Lvdecheng 20130205
        
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_company2apply_trans:operate failure !' || SQLERRM;  
  END prc_company2apply_trans;  
  
  procedure prc_sales2apply_trans
  ( l_hm_customer_sales_data IN hm_customer_sales_data%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_sales2apply_trans:operate success !';  
    
    --l_apply_customer.view_sales_x := 'X';

    l_apply_customer.sales_region := l_hm_customer_sales_data.sales_region; --销售地区;
    l_apply_customer.currency := l_hm_customer_sales_data.currency_code; --货币代码;
    l_apply_customer.customer_price_procedure := l_hm_customer_sales_data.customer_pricing_proccess; --客户定价过程;
    l_apply_customer.customer_summary_group := l_hm_customer_sales_data.customer_summary_group; --客户统计组;
    l_apply_customer.ship_condition := l_hm_customer_sales_data.ship_condition; --装运条件;
    l_apply_customer.delivering_plant := l_hm_customer_sales_data.ship_plant; --交货工厂;
    l_apply_customer.acct_assgmt_group := l_hm_customer_sales_data.account_distribute_group; --客户组的帐户分配;
    l_apply_customer.tax_classification := l_hm_customer_sales_data.cust_tax_category; --客户的税分类;
    l_apply_customer.terms_of_payment := '0000'; --付款条件-未包含在最近模板;
   -- l_apply_customer.terms_of_payment := l_hm_customer_sales_data.payment_terms_1; --付款条件-未包含在最近模板;
    l_apply_customer.price_group := l_hm_customer_sales_data.price_group; --价格组-未包含在最近模板;
    l_apply_customer.sales_group := l_hm_customer_sales_data.sales_grp; --销售组;
    l_apply_customer.pod_relation := l_hm_customer_sales_data.pod_relation; --与 POD 处理相关;
        
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_sales2apply_trans:operate failure !' || SQLERRM;  
  END prc_sales2apply_trans;  

  procedure prc_extend2apply_trans
  ( l_hm_cust_additional_data IN OUT hm_cust_additional_data%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_extend2apply_trans:operate success !';  

    --l_apply_customer.view_extend_x := 'X';

    l_apply_customer.global_pc_code := l_hm_cust_additional_data.global_pc_code; --GLOBAL_PC_CODE-DCMS;
    l_apply_customer.parent_company_code := l_hm_cust_additional_data.parent_company_code; --上级公司代码-DCMS;
    l_apply_customer.org_group_code := l_hm_cust_additional_data.org_group_code; --所属分组-DCMS;
    l_apply_customer.is_storefront := l_hm_cust_additional_data.is_storefront; --是否为门店(1,0);
    l_apply_customer.old_customer_code := l_hm_cust_additional_data.old_customer_code; --旧客户编码;
    l_apply_customer.is_seller := l_hm_cust_additional_data.is_seller; --是否为直销员(1,0);
    l_apply_customer.sales_region := l_hm_cust_additional_data.sales_region; --行政区域(销售);
    l_apply_customer.cust_property := l_hm_cust_additional_data.cust_property; --客户性质;
    l_apply_customer.cust_property_desc := l_hm_cust_additional_data.cust_property_desc; --客户性质名称;
    l_apply_customer.cust_type := l_hm_cust_additional_data.cust_type; --客户分类;
    l_apply_customer.csg_keyaccount_flag := l_hm_cust_additional_data.csg_keyaccount_flag; --大客户标记;
    l_apply_customer.csg_keyaccount_category := l_hm_cust_additional_data.csg_keyaccount_category; --大客户大类;
    l_apply_customer.csg_keyaccount_class := l_hm_cust_additional_data.csg_keyaccount_class; --大客户小类;
    l_apply_customer.cust_functions := l_hm_cust_additional_data.cust_functions; --客户功能(1、门店 2、送达方 3、既是门店又是送达方);

    l_apply_customer.BRAND1 := l_hm_cust_additional_data.BRAND1;
    l_apply_customer.BRAND2 := l_hm_cust_additional_data.BRAND2;
    l_apply_customer.BRAND3 := l_hm_cust_additional_data.BRAND3;
    l_apply_customer.SALES_AMOUNT1 := l_hm_cust_additional_data.SALES_AMOUNT1;
    l_apply_customer.SALES_AMOUNT2 := l_hm_cust_additional_data.SALES_AMOUNT2;
    l_apply_customer.SALES_AMOUNT3 := l_hm_cust_additional_data.SALES_AMOUNT3;
    l_apply_customer.SALES_VOLUME := l_hm_cust_additional_data.SALES_VOLUME;
    l_apply_customer.OUTLET_AREA := l_hm_cust_additional_data.OUTLET_AREA;
    l_apply_customer.REGISTERED_CAPITAL := l_hm_cust_additional_data.REGISTERED_CAPITAL;
    l_apply_customer.MANAGE_LIMIT_YEAR := l_hm_cust_additional_data.MANAGE_LIMIT_YEAR;
    l_apply_customer.COOPERATION_SCOPE := l_hm_cust_additional_data.COOPERATION_SCOPE;
    l_apply_customer.COOPERATION_SALES_VOLUMN := l_hm_cust_additional_data.COOPERATION_SALES_VOLUMN;

    l_apply_customer.manage_customer := l_hm_cust_additional_data.manage_customer; --管理客户;
    
    --------------------Lvdecheng 20120911 start--------------------------------------------------
    if  (l_apply_customer.partner_flag_sp='1' AND l_apply_customer.operate_type IN ('CREATE')) OR
         l_apply_customer.operate_type IN ('UPDATE')   then 
    --维护门店信息 Lvdecheng 2012-07-04 change baochh 20120719 要求不用带出所对应的售达方的信息
    l_apply_customer.cust_shop_number := l_hm_cust_additional_data.cust_shop_number;
    l_apply_customer.cust_shop_contain := l_hm_cust_additional_data.cust_shop_contain;
    l_apply_customer.cust_shop_sale_rate_month := l_hm_cust_additional_data.cust_shop_sale_rate_month;
    l_apply_customer.cust_shop_retail_rate := l_hm_cust_additional_data.cust_shop_retail_rate;
    l_apply_customer.sbr_name := l_hm_cust_additional_data.sbr_name;
    l_apply_customer.sbr_ownername := l_hm_cust_additional_data.sbr_ownername;
    l_apply_customer.sbr_addressex := l_hm_cust_additional_data.sbr_addressex;
    l_apply_customer.sbr_post := l_hm_cust_additional_data.sbr_post;
    l_apply_customer.sbr_phone := l_hm_cust_additional_data.sbr_phone;
    l_apply_customer.sbr_housemj := l_hm_cust_additional_data.sbr_housemj;
    l_apply_customer.sbr_yjbuilddate := to_char(l_hm_cust_additional_data.sbr_yjbuilddate,'yyyy-MM-dd');
    l_apply_customer.sbr_shoptype := l_hm_cust_additional_data.sbr_shoptype;
    l_apply_customer.sbr_jtcustomer := l_hm_cust_additional_data.sbr_jtcustomer;
    l_apply_customer.sbr_jtcustomer_name := l_hm_cust_additional_data.sbr_jtcustomer_name;
    l_apply_customer.cust_cnumber := l_hm_cust_additional_data.cust_cnumber;
    end if;
    --如果创建送达方，则前台不需显示售达方对应的行政区域 Lvdecheng 2012-07-30
    if l_apply_customer.partner_flag_sh = '1' and (l_apply_customer.partner_function = 'SH' or l_apply_customer.partner_function = 'JCSH' ) 
       and l_apply_customer.operate_type IN ('CREATE') then 
       l_apply_customer.sales_region := null;
    end if;  
    ------------------------------------------end-----------------------------------------------
    
  EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_extend2apply_trans:operate failure !' || SQLERRM;  
  END prc_extend2apply_trans;  

  procedure prc_sub2apply_trans
  ( l_hm_cust_sub_company IN OUT hm_cust_sub_company%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_sub2apply_trans:operate success !';  

    --l_apply_customer.view_subcompany_x := 'X';
    
    l_apply_customer.branch_code := l_hm_cust_sub_company.branch_code; --工贸编码;
    l_apply_customer.branch_company_code := l_hm_cust_sub_company.branch_company_code; --分公司编码;
    l_apply_customer.branch_company_name := l_hm_cust_sub_company.branch_company_name; --分公司名称;
    l_apply_customer.customer_manager := l_hm_cust_sub_company.customer_manager; --客户经理;
    l_apply_customer.area_code := l_hm_cust_sub_company.area_code; --区域编码;
    --l_apply_customer.customer_flag := l_hm_cust_sub_company.customer_flag; --;

    --l_hm_cust_sub_company.customer_category := l_apply_customer.customer_category; --大渠道;
    --l_apply_customer.industry_class := l_hm_cust_sub_company.industry_class; --小渠道客户性质小类(行业部门);
  EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_sub2apply_trans:operate failure !' || SQLERRM;  
  END prc_sub2apply_trans; 
  
  procedure prc_bank2apply_trans
  ( l_hm_cust_bank_accounts IN OUT hm_cust_bank_accounts%ROWTYPE,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_bank2apply_trans:operate success !';  
    
    l_apply_customer.bank_country     := l_hm_cust_bank_accounts.bank_country;
    l_apply_customer.bank_key         := l_hm_cust_bank_accounts.bank_branch_code;
    l_apply_customer.account_holder   := l_hm_cust_bank_accounts.account_holder_name;
    l_apply_customer.bank_account     := l_hm_cust_bank_accounts.bank_account_num;
    l_apply_customer.bank_name        := l_hm_cust_bank_accounts.bank_name;
    
  EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_bank2apply_trans:operate failure !' || SQLERRM;  
  END prc_bank2apply_trans; 

  procedure prc_apply_from_customer ( in_customer_code in varchar2,
                                      in_business_code in varchar2,
                                      in_dept_code in varchar2,
                                      in_stock_flag in varchar2,
                                      out_temprow_id out varchar2,
                                      retcode out varchar2,
                                      retmsg out varchar2
                                    )
  is
    l_hm_apply_customer hm_apply_customer%rowtype;    
    l_hm_apply_customer_temp hm_apply_customer%rowtype;
    l_hm_business hm_business%rowtype;
    l_hm_customers hm_customers%rowtype;
    l_hm_cust_company_data hm_cust_company_data%rowtype;
    l_hm_customer_sales_data hm_customer_sales_data%rowtype;
    l_hm_cust_additional_data hm_cust_additional_data%rowtype;
    l_hm_cust_sub_company hm_cust_sub_company%rowtype;
    l_hm_cust_bank_accounts hm_cust_bank_accounts%rowtype;
    
    base_extraction_flag VARCHAR2(1) := '';
    company_extraction_flag VARCHAR2(1) := '';
    sales_extraction_flag VARCHAR2(1) := '';
    extend_extraction_flag VARCHAR2(1) := '';
    subcomp_extraction_flag VARCHAR2(1) := '';
    
    l_customer_id varchar2(20);
    l_customer_manager_code varchar2(20);
    l_trade_companys VARCHAR2(1000);
  begin
		retcode := 'S';
		retmsg  := 'prc_apply_from_customer: operate succeed !';
   
    --1，业务信息准备
    for cur_rows in (select * from hm_business t where t.business_code = in_business_code)
    loop
      l_hm_business := cur_rows;
    end loop;
    
    if l_hm_business.business_code IS NULL THEN
      retcode := 'E';
      retmsg  := in_business_code||', 无此业务编码, 客户数据抽取失败!';     
      ROLLBACK;
      RETURN;
    END IF;

    --2，根据业务编码提取 定制模板 信息，作为 申请单信息 准备
    FOR cur_rows IN (SELECT * FROM HM_APPLY_CUSTOMER_TPT T WHERE T.BUSINESS_CODE = in_business_code )
    LOOP
      l_hm_apply_customer := cur_rows;
      l_hm_apply_customer.Row_Id := NULL;
    END LOOP;
    
    --2.1，如无模板数据，申请头信息使用业务码信息，
         --此处尚缺 组织机构编码，股别，审批经营体，下节审批经营体
    IF l_hm_apply_customer.Business_Code IS NULL THEN
      l_hm_apply_customer.business_code := l_hm_business.Business_Code;
      l_hm_apply_customer.master_type := l_hm_business.master_type;
      l_hm_apply_customer.operate_type := l_hm_business.operate_type;
      l_hm_apply_customer.business_type := l_hm_business.business_type;
      l_hm_apply_customer.partner_function := l_hm_business.partner_function;
      l_hm_apply_customer.is_samejyt := l_hm_business.is_samejyt;      
    END IF;
 
    l_hm_apply_customer.dept_code := in_dept_code;
    l_hm_apply_customer.stock_flag := in_stock_flag;
    
    l_trade_companys := '';
    for cur_rows in cur_business2company( l_hm_business.business_type, in_dept_code,in_stock_flag,'SalesOrganization',l_hm_business.partner_function)
    LOOP    
      l_trade_companys := l_trade_companys||cur_rows.company_code||',';
    END LOOP;
    
    --3，客户数据基本信息准备
    --3.1, 特别处理 如果客户编码为临时码 则审请数据从审请数据复制
    if instr(in_customer_code,'TEMP') > 0 THEN
      IF l_hm_business.Operate_Type = 'CREATE' AND
       l_hm_business.partner_function IN ('PY','SH','JCSH') THEN
        FOR cur_rows IN (SELECT * FROM HM_APPLY_CUSTOMER T WHERE T.CUSTOMER_NUMBER_TEMP = in_customer_code AND T.OPERATE_TYPE = 'CREATE' AND T.DELETE_FLAG = '0' )
        LOOP
          l_hm_apply_customer_temp := cur_rows;
        END LOOP;
        
        prc_apply2apply_trans(l_hm_apply_customer_temp,l_hm_apply_customer,retcode,retmsg);
        if retcode = 'E' then return; end if;     
        
      ELSE
        retcode := 'E';
        retmsg := '审请信息抽取错误，不合法的临时码信息';
        ROLLBACK;
        RETURN;
      END IF;
      
    ELSE ---正式的客户编码信息
    --3.3, 正式的客户编码信息抽取
      for cur_rows in (select * from hm_customers t where t.customer_number = in_customer_code)
      loop
        l_hm_customers := cur_rows;
        l_customer_id := l_hm_customers.row_id;--获取关键字
      end loop;
      
      IF l_customer_id IS NOT null THEN
      
        --抽取程序开始 ( 数据->申请 )
        --4.1，基本视图抽取
        prc_base2apply_trans(l_hm_customers,l_hm_apply_customer,retcode,retmsg);
        if retcode = 'E' then return; end if;
        base_extraction_flag := 'X';
        
        --4.2，公司代码视图抽取
        for cur_rows in cur_business2company( l_hm_business.business_type, in_dept_code,in_stock_flag,'CompanyCode',l_hm_business.partner_function)
        loop
          --对申请明细构建公司视图部分(依据传入的公司代码)
          for cur_rows2 in (select * from hm_cust_company_data tt 
                            where tt.company_code = cur_rows.company_code
                            AND tt.customer_id = l_customer_id
                            AND rownum = 1
                           )  
          loop
            l_hm_cust_company_data := cur_rows2;
          end loop;
          
          if l_hm_cust_company_data.company_code is not null then
            prc_company2apply_trans(l_hm_cust_company_data,l_hm_apply_customer,retcode,retmsg);
            if retcode = 'E' then return; end if;
            company_extraction_flag := 'X';
            exit;
          end if;
        end loop;
        
        --如果不是 UPDATE 业务，则必要备选处理
        IF l_hm_business.operate_type NOT IN ( 'UPDATE','CHANGE' ) AND
           company_extraction_flag IS NULL THEN
          --对申请明细构建公司视图部分( 不 依据传入的公司代码)
          for cur_rows2 in (select * from hm_cust_company_data tt 
                            WHERE 1 = 1
                            AND tt.customer_id = l_customer_id
                            AND rownum = 1
                           )  
          loop
            l_hm_cust_company_data := cur_rows2;
          end loop;
          
          if l_hm_cust_company_data.company_code is not null then
            prc_company2apply_trans(l_hm_cust_company_data,l_hm_apply_customer,retcode,retmsg);
            if retcode = 'E' then return; end if;
            company_extraction_flag := 'X';
          end if;    
        END IF;
        
        --4.3，销售视图数据抽取
        for cur_rows in cur_business2company( l_hm_business.business_type, in_dept_code,in_stock_flag,'SalesOrganization',l_hm_business.partner_function)
        LOOP
          --对申请明细构建销售视图部分(依据传入的公司代码)
          for cur_rows2 in (select * from hm_customer_sales_data tt 
                            where tt.sales_group = cur_rows.company_code
                            and tt.distribution_channel = '00' and tt.division = '00'
                            AND tt.customer_id = l_customer_id
                            and rownum = 1
                           )  
          loop
            l_hm_customer_sales_data := cur_rows2;
          end loop;
          
          if l_hm_customer_sales_data.sales_group is not null then
            prc_sales2apply_trans(l_hm_customer_sales_data,l_hm_apply_customer,retcode,retmsg);
            if retcode = 'E' then return; end if;
            sales_extraction_flag := 'X';
            exit;
          end if;
        end loop;

        --如果不是 UPDATE 业务，则必要备选处理
        IF l_hm_business.operate_type NOT IN ( 'UPDATE','CHANGE' ) AND
           sales_extraction_flag IS NULL THEN
          --对申请明细构建销售视图部分( 不 依据传入的公司代码)
          for cur_rows2 in (select * from hm_customer_sales_data tt 
                            where 1 = 1
                            AND tt.customer_id = l_customer_id
                            and rownum = 1
                           )  
          loop
            l_hm_customer_sales_data := cur_rows2;
          end loop;
          
          --if l_hm_customer_sales_data.sales_group is not null then
            prc_sales2apply_trans(l_hm_customer_sales_data,l_hm_apply_customer,retcode,retmsg);
            if retcode = 'E' then return; end if;
            sales_extraction_flag := 'X';
          --end if;
        END IF;
            
        --4.4，扩展视图数据抽取
        for cur_rows in (select * from hm_cust_additional_data a where a.customer_id = l_customer_id)
        loop
          --对申请明细构建扩展视图部分
          l_hm_cust_additional_data := cur_rows;
     
          prc_extend2apply_trans(l_hm_cust_additional_data,l_hm_apply_customer,retcode,retmsg);
          if retcode = 'E' then return; end if;
          extend_extraction_flag := 'X';
          
          l_customer_manager_code := l_hm_cust_additional_data.manage_customer;
         
        end loop;
        
        --4.5，管理户视图数据抽取
        if l_customer_manager_code is not null then
          for cur_rows in (select * from hm_cust_sub_company a where a.branch_company_code = l_customer_manager_code)
          loop
            --对申请明细构建subcompany视图部分
            l_hm_cust_sub_company := cur_rows;
            --对1169与690创建送达方限制管理客户信息自动带出 Lvdecheng 20120911 
            -----------------------start---------------------------------
            if in_business_code <> 'CST-CREATE-GM-SH' and in_business_code <> 'CST-CREATE-GM-SH-1169' and   
               in_business_code <> 'CST-CREATE-GM-JCSH' and in_business_code <> 'CST-CREATE-GM-JCSH-1169'
            then
               prc_sub2apply_trans(l_hm_cust_sub_company,l_hm_apply_customer,retcode,retmsg);
               if retcode = 'E' then return; end if;
            end if;
            -----------------------end----------------------------------
            subcomp_extraction_flag := 'X';

          end loop;
        end if;
        
        --4.6，银行数据抽取
        for cur_rows in (select * from hm_cust_bank_accounts a where a.customer_id = l_customer_id and a.delete_flag = '0' )
        loop
          --对申请明细构建银行视图部分
          l_hm_cust_bank_accounts := cur_rows;
          prc_bank2apply_trans(l_hm_cust_bank_accounts,l_hm_apply_customer,retcode,retmsg);
          if retcode = 'E' then return; end if;
        end loop;
        
        --4.7，合作伙伴处理
        if l_hm_business.operate_type IN ( 'UPDATE','CHANGE' ) THEN
          for cur_rows in (select a.cust_partner_type from hm_customer_partners a where a.cust_partner_subject_id = in_customer_code)
          loop
            if cur_rows.cust_partner_type = 'SP' then
              l_hm_apply_customer.partner_flag_sp := '1';
            end if;
            if cur_rows.cust_partner_type = 'SH' then
              l_hm_apply_customer.partner_flag_sh := '1';
            end if;
            if cur_rows.cust_partner_type = 'BP' then
              l_hm_apply_customer.partner_flag_bp := '1';
            end if;
            if cur_rows.cust_partner_type = 'PY' then
              l_hm_apply_customer.partner_flag_py := '1';
            end if; 
          end loop;
        END IF;
        
        --4.8，税信息处理
        for cur_rows in (select a.taxkd from hm_customer_taxs a where a.customer_id = l_customer_id)
        loop
          --对申请明细构建税视图部分
          l_hm_apply_customer.tax_classification := cur_rows.taxkd;
          
        end loop;

      END IF; ---  L_CUSTOMER_ID IS NOT NULL
      
    END IF;
        
    -------------------
    --5，申请单信息 合理性优化, 业务相关性处理
    if l_hm_business.operate_type = 'CREATE' THEN
      --工贸编码赋值
      if l_hm_apply_customer.business_type = 'GM' then
        l_hm_apply_customer.train_station := l_hm_apply_customer.dept_code; --工贸代码(列车站.KNA1-BAHNS)
      elsif l_hm_apply_customer.business_type = 'JC' then --changed by zhangbiao 20100916
        --l_hm_apply_customer.train_station := '12'; --工贸代码(列车站.KNA1-BAHNS)
        l_hm_apply_customer.train_station := l_hm_apply_customer.train_station; --工贸代码(列车站.KNA1-BAHNS)
      else --pl
        l_hm_apply_customer.train_station := '';
      end if; 
    
      --客户编码，管理户清空
      --l_hm_apply_customer.account_group := '0280';
      l_hm_apply_customer.customer_number := NULL;
      --l_hm_apply_customer.Customer_Name := NULL;   
      l_hm_apply_customer.manage_customer := null;
      
      --创建sold_to_party的关系，及名称地址清空
      IF l_hm_business.Partner_Function IN ('PY','SH','JCSH') THEN
        l_hm_apply_customer.sold_to_party := in_customer_code;
        
        l_hm_apply_customer.Customer_Name := NULL;
        IF instr(l_hm_business.Partner_Function,'SH') > 0 THEN
          l_hm_apply_customer.street := NULL;
          l_hm_apply_customer.region := NULL;
          l_hm_apply_customer.city := NULL;
          l_hm_apply_customer.postal_code := NULL;
        END IF;
      END IF;
      
    ELSIF l_hm_business.operate_type IN ( 'UPDATE','CHANGE' ) THEN --IN ( 'UPDATE','CHANGE' )
 
      --l_hm_apply_customer.view_base_x := base_extraction_flag;
      l_hm_apply_customer.view_base_x := 'X';
      IF l_hm_apply_customer.is_samejyt IS NULL THEN --非性质变更时,置其它视图
        IF l_hm_business.operate_type = 'UPDATE' THEN
          l_hm_apply_customer.view_company_x := company_extraction_flag;
        END IF;
        l_hm_apply_customer.view_sales_x := sales_extraction_flag;
        l_hm_apply_customer.view_extend_x := extend_extraction_flag;   
        
        l_hm_apply_customer.sold_to_party_old := get_old_soldtoparty(l_hm_apply_customer.customer_number,l_hm_apply_customer.partner_function,l_trade_companys,'');
      END IF;
    END IF;
    
    --事业部业务中，如果事业部编码没有对应的销售组织，那么去掉 销售视图 标示
    if l_hm_business.operate_type IN ( 'CREATE','EXTEND' ) THEN
      if l_hm_apply_customer.business_type = 'PL' THEN
        if l_hm_business.operate_type = 'EXTEND' then
          l_hm_apply_customer.view_sales_x := sales_extraction_flag ;
        else 
          IF l_hm_apply_customer.view_sales_x = 'X' THEN
             SELECT decode(COUNT(*),'0','','X') INTO l_hm_apply_customer.view_sales_x
             FROM hm_fnd_values t 
             WHERE t.value_set_id LIKE 'SalesOrganization' 
             AND t.value = l_hm_apply_customer.dept_code;
          END IF;
        end if;
      END IF;
    END IF;    
    
    --6，申请信息暂存于 临时表 供前台使用
    l_hm_apply_customer.row_id := comm_util.FUNC_NEW_ROWID;
    insert into hm_apply_customer_tmp values l_hm_apply_customer return row_id into out_temprow_id;    

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_apply_from_customer: operate failure !' || SQLERRM;
	END prc_apply_from_customer;
  
  
    /********************************
  **创建伞下付款方对应的伞下售达方与理货商售达方
  **的合作伙伴关系，对应关系 SH
  **Lvdecheng 20121018
  *********************************/
  PROCEDURE prc_partner_create_SF
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_customer_number IN VARCHAR2,
		in_sales_id  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer       hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners hm_customer_partners%ROWTYPE;  
	
		li_count  INTEGER := 0;
		lv_partnerid VARCHAR2(20);
    
    l_hm_applys_transactions hm_applys_transactions%ROWTYPE;

	BEGIN
    retcode := 'S';
    retmsg  := 'prc_partner_create_SF:The partner create success ! ';

		l_apply_customer := in_datavalue;
    
    
     
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'SH';
        l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.sold_to_party;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               for_gvs = '1',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = in_sales_id;
         
         UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               for_gvs = '1',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = l_apply_customer.sbr_sp_number;
         
         l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
         l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
         l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
         l_hm_applys_transactions.master_row_code := l_apply_customer.sbr_sp_number;
      
         l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
         l_hm_applys_transactions.created_by      := in_user_name;
         l_hm_applys_transactions.created         := SYSDATE;
         l_hm_applys_transactions.last_upd_by     := in_user_name;
         l_hm_applys_transactions.last_upd        := SYSDATE;
         l_hm_applys_transactions.active_flag     := '1';
         l_hm_applys_transactions.delete_flag     := '0';
    
           
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The partner create error:' || SQLERRM;
	END prc_partner_create_SF;
  
    /********************************************************
  *
  *山东日日顺客户创建送达方合作伙伴关系
  *扩充2000以及2000分公司
  *Lvdecheng 20130509
  ***********************************************************/
  PROCEDURE prc_partner_create_rrs
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_customer_number IN VARCHAR2,
		in_sales_id  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer       hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners hm_customer_partners%ROWTYPE;  
	
		li_count  INTEGER := 0;
		lv_partnerid VARCHAR2(20);
    
    customer_number_rrs VARCHAR2(20);
    l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
    
	BEGIN
    retcode := 'S';
    retmsg  := 'prc_partner_create_rrs:The partner create success ! ';

		l_apply_customer := in_datavalue;
    
    FOR RRS_CUST IN (
      SELECT T.CUSTOMER_NUMBER 
                                FROM HM_CUST_RRS T
                               WHERE T.TRADE_CODE =
                                     l_apply_customer.Train_Station
      )LOOP 
       customer_number_rrs :=  RRS_CUST.CUSTOMER_NUMBER;                            
      END LOOP;
    
    SELECT COUNT(*),
           MAX(t.row_id)
      INTO li_count,
           lv_partnerid
      FROM hm_customer_partners t
     WHERE t.cust_partner_type = 'SH'
       AND t.cust_partner_subject_id = l_apply_customer.customer_number 
       AND t.sales_area_view_id = in_sales_id;
  	
     
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'SH';
        l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.customer_number;
       
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               for_gvs           = '1',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = in_sales_id; 
         
         UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               for_gvs           = '1',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = customer_number_rrs;
         
         l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
         l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
         l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
         l_hm_applys_transactions.master_row_code := l_apply_customer.customer_number;
      
         l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
         l_hm_applys_transactions.created_by      := in_user_name;
         l_hm_applys_transactions.created         := SYSDATE;
         l_hm_applys_transactions.last_upd_by     := in_user_name;
         l_hm_applys_transactions.last_upd        := SYSDATE;
         l_hm_applys_transactions.active_flag     := '1';
         l_hm_applys_transactions.delete_flag     := '0';
    		
         INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
      
           
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The partner create error:' || SQLERRM;
	END prc_partner_create_RRS; 
  
  
  /********************************************************
 **
 **客户冻结准换逻辑
 **Lvdecheng 20130723
 **********************************************************/ 
 PROCEDURE prc_del_customer_trans
	( customer_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_del_customer IN OUT hm_del_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
    li_trade_code varchar2(20);
    con_company INTEGER := 1;
    con_sales INTEGER := 1;
    l_hm_del_customer_sale  hm_del_customer%ROWTYPE;
    l_hm_del_customer_company  hm_del_customer%ROWTYPE;
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';  
    
    IF l_apply_customer.Cust_Del_Type = '01' THEN 
        --l_hm_del_customer 数据填充完毕，往数据库回写处理
        l_hm_del_customer.row_id := comm_util.FUNC_NEW_ROWID();
        l_hm_del_customer.customer_number := l_apply_customer.customer_number;
        l_hm_del_customer.company_all_flag := l_apply_customer.company_all_flag;
        l_hm_del_customer.sales_all_reason_or := l_apply_customer.sales_all_reason_or;
        l_hm_del_customer.company_spec_flag := l_apply_customer.company_spec_flag;
        l_hm_del_customer.sales_spec_flag := l_apply_customer.sales_spec_flag;
        l_hm_del_customer.sales_spec_reason_or := l_apply_customer.sales_spec_reason_or;
        l_hm_del_customer.sales_all_flag := l_apply_customer.customer_ledger_flag;
        l_hm_del_customer.last_upd := sysdate;
        l_hm_del_customer.created := sysdate;
        l_hm_del_customer.created_by := in_user_name;
        l_hm_del_customer.last_upd_by := in_user_name ;
        l_hm_del_customer.last_version_flag := '2';
        l_hm_del_customer.for_gvs := '1';
        l_hm_del_customer.operate_status := 'CREATE';
        l_hm_del_customer.active_flag := '1';
        l_hm_del_customer.delete_flag := '0';
        l_hm_del_customer.audit_flag := '0';
        l_hm_del_customer.lock_flag := '0';
        l_hm_del_customer.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
        INSERT INTO HM_DEL_CUSTOMER VALUES l_hm_del_customer ;
    --客户为公司冻结时，根据次客户所在工贸，直接冻结此工贸下的公司和销售组织
    ELSIF l_apply_customer.Cust_Del_Type = '02'  THEN 
          
          select count(hcc.company_code) into con_company
                from hm_customers hc, hm_cust_company_data hcc
               where hc.row_id = hcc.customer_id
                 and hc.customer_number = l_apply_customer.customer_number ;
          IF con_company = 0 THEN
            retcode := 'E';
            retmsg  := '此客户无任何公司代码 !'; 
            RETURN ;
          END IF;
          
          select COUNT(hcs.sales_group) INTO  con_sales 
                from hm_customers hc, hm_customer_sales_data hcs
               where hc.row_id = hcs.customer_id
                 and hc.customer_number = l_apply_customer.customer_number;
          IF con_sales = 0 THEN
            retcode := 'E';
            retmsg  := '此客户无任何销售组织!'; 
            RETURN ;
          END IF;
          
          --1.首先公司冻结
          FOR cur_row IN (
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
            UNION
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station 
          ) LOOP
            --根据此工贸公司与客户所在公司代码校验,如果存在则冻结
            FOR cur_row_cust IN (
              select hcc.company_code
                from hm_customers hc, hm_cust_company_data hcc
               where hc.row_id = hcc.customer_id
                 and hc.customer_number = l_apply_customer.customer_number
            ) LOOP 
              IF cur_row.sales_organization = cur_row_cust.company_code THEN 
                 l_hm_del_customer_company.row_id := comm_util.FUNC_NEW_ROWID();
                 l_hm_del_customer_company.customer_number := l_apply_customer.customer_number;
                 l_hm_del_customer_company.company_code := cur_row.sales_organization;
                 l_hm_del_customer_company.company_spec_flag := l_apply_customer.company_spec_flag;
                 l_hm_del_customer_company.last_upd := sysdate;
                 l_hm_del_customer_company.created := sysdate;
                 l_hm_del_customer_company.created_by := in_user_name;
                 l_hm_del_customer_company.last_upd_by := in_user_name ;
                 l_hm_del_customer_company.last_version_flag := '2';
                 l_hm_del_customer_company.for_gvs := '1';
                 l_hm_del_customer_company.operate_status := 'CREATE';
                 l_hm_del_customer_company.active_flag := '1';
                 l_hm_del_customer_company.delete_flag := '0';
                 l_hm_del_customer_company.audit_flag := '0';
                 l_hm_del_customer_company.lock_flag := '0';
                 l_hm_del_customer_company.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
                 INSERT INTO HM_DEL_CUSTOMER VALUES l_hm_del_customer_company ;
              END IF;
            END LOOP;
          END LOOP;
          
          --2. 销售组织冻结
          FOR cur_row1 IN (
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
            UNION
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station 
          ) LOOP
            
            --根据此工贸销售组织与客户所在销售组织校验,如果存在则冻结
            FOR cur_row_sales IN (
              select hcs.sales_group 
                from hm_customers hc, hm_customer_sales_data hcs
               where hc.row_id = hcs.customer_id
                 and hc.customer_number = l_apply_customer.customer_number
            ) LOOP   
            
              IF cur_row1.sales_organization = cur_row_sales.sales_group THEN 
                  l_hm_del_customer_sale.row_id := comm_util.FUNC_NEW_ROWID();
                  l_hm_del_customer_sale.customer_number := l_apply_customer.customer_number;
                  l_hm_del_customer_sale.sales_group := cur_row1.sales_organization;
                  l_hm_del_customer_sale.distribution_channel := '00';
                  l_hm_del_customer_sale.division := '00';
                  l_hm_del_customer_sale.sales_spec_flag := l_apply_customer.sales_spec_flag;
                  l_hm_del_customer_sale.sales_spec_reason_or := l_apply_customer.sales_spec_reason_or;
                  l_hm_del_customer_sale.last_upd := sysdate;
                  l_hm_del_customer_sale.created := sysdate;
                  l_hm_del_customer_sale.created_by := in_user_name;
                  l_hm_del_customer_sale.last_upd_by := in_user_name ;
                  l_hm_del_customer_sale.last_version_flag := '2';
                  l_hm_del_customer_sale.for_gvs := '1';
                  l_hm_del_customer_sale.operate_status := 'CREATE';
                  l_hm_del_customer_sale.active_flag := '1';
                  l_hm_del_customer_sale.delete_flag := '0';
                  l_hm_del_customer_sale.audit_flag := '0';
                  l_hm_del_customer_sale.lock_flag := '0';
                  l_hm_del_customer_sale.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
                  INSERT INTO HM_DEL_CUSTOMER VALUES l_hm_del_customer_sale ;
              END IF;
              
            END LOOP;
            
          END LOOP;
  
    END IF;
        
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_base_trans:operate failure !' || SQLERRM;  
  END prc_del_customer_trans; 
  
  /******************************************************
  ** 客户解冻申请单转化
  **Lvdecheng 20130723
  **
  *******************************************************/
  PROCEDURE prc_customer_thaw_trans
	( customer_exists_flag IN VARCHAR2,
    in_user_name IN VARCHAR2,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		l_hm_del_customer IN OUT hm_del_customer_thaw%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
    l_hm_del_customer_sale  hm_del_customer%ROWTYPE;
    l_hm_del_customer_company  hm_del_customer%ROWTYPE;
    l_hm_sp_sale               hm_customer_sales_data%ROWTYPE;
    sp_count INTEGER; 
    sp_sale_group_count INTEGER ;
    sale_count          INTEGER := 0; 
    l_sale_group        VARCHAR2(10) ;
    customer_rrs_con    INTEGER := 0; 
    
    
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';  
    sp_count:=0;
    sp_sale_group_count := 0;
    
    IF l_apply_customer.Cust_Thaw_Type = '01' THEN 
    
        --客户本身解冻 
        l_hm_del_customer.row_id := comm_util.FUNC_NEW_ROWID;
        l_hm_del_customer.customer_number := l_apply_customer.customer_number;
        l_hm_del_customer.customer_number_sp := l_apply_customer.customer_number_sp;
        l_hm_del_customer.customer_category := l_apply_customer.customer_category_thaw;
        l_hm_del_customer.industry_class := l_apply_customer.industry_class_thaw;
        l_hm_del_customer.branch_company_code := l_apply_customer.branch_company_code_thaw;
        l_hm_del_customer.area_code := l_apply_customer.area_code_thaw;
        l_hm_del_customer.jyt := l_apply_customer.jyt_thaw;
        l_hm_del_customer.customer_name1 := l_apply_customer.customer_name;
        
        l_hm_del_customer.last_upd := sysdate;
        l_hm_del_customer.created := sysdate;
        l_hm_del_customer.created_by := in_user_name;
        l_hm_del_customer.last_upd_by := in_user_name ;
        l_hm_del_customer.last_version_flag := '2';
        l_hm_del_customer.for_gvs := '1';
        l_hm_del_customer.operate_status := 'CREATE';
        l_hm_del_customer.active_flag := '1';
        l_hm_del_customer.delete_flag := '0';
        l_hm_del_customer.audit_flag := '0';
        l_hm_del_customer.lock_flag := '0';
        l_hm_del_customer.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
        INSERT INTO HM_DEL_CUSTOMER_THAW VALUES l_hm_del_customer ;
        
        --begin送达方创建合作伙伴 panzhaohui 20130617
        --校验客户是否为售达方
        for cur_sp in ( select distinct t.customer_number 
                        from VIEW_CUST_ACCOUNT_TYPE t 
                        where t.customer_number=l_apply_customer.customer_number
                        and t.cust_partner_type='SP' 
                        and t.account_group='0280'
                        /*and t.sp_delete_flag = '0'
                        and t.partners_delete_flag = '0'
                        and t.sales_delete_flag = '0'*/)
        loop
          sp_count:=sp_count+1;
        end loop;
        if sp_count > 0 then
             IF l_apply_customer.Business_Code = 'CST-UNFREEZE-GM-1169' THEN 
                  
                  FOR CUR_RRS IN(
                      SELECT * FROM HM_CUST_RRS T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
                  ) LOOP 
                    customer_rrs_con := customer_rrs_con + 1;
                  END LOOP;
          
                  IF customer_rrs_con > 0 THEN 
                     
                     --创建2000公司与销售    
                     prc_thaw_company_trans(in_user_name ,l_apply_customer,retcode,retmsg);
                     
                  END IF;
          
               END IF;
        else
          --cuts_flag_jcsh=0:地采；cuts_flag_jcsh=1:集采
          if l_apply_customer.cust_flag_jcsh = '0' then
            --校验此解冻送达方对应的售达方是否存在此送达方工贸下的销售组织
            FOR cur_sales IN(
                SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
                UNION
                SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
              )
              LOOP 
                   sale_count := sale_count + 1;
                   l_sale_group := cur_sales.sales_organization;
                   l_hm_sp_sale := null;
                   FOR cur_row_sales IN (
                     select hcs.*  
                           from hm_customers hc, hm_customer_sales_data hcs
                           where hc.row_id = hcs.customer_id
                           and hc.customer_number = l_apply_customer.customer_number_sp 
                           and hcs.delete_flag = '0' 
                           and hcs.sales_group = l_sale_group 
                    ) LOOP  
                       sp_sale_group_count := sp_sale_group_count + 1;
                       l_hm_sp_sale := cur_row_sales;
                    END LOOP;  
                    --如果售达方不存在此销售组织，则先扩充，如果存在则直接创建合作伙伴
                    IF sp_sale_group_count = 0 THEN
                      retcode := 'E';
                      retmsg  := '售达方'||l_apply_customer.customer_number_sp||'不存在'||l_sale_group||'销售组织，请维护！'; 
                      RETURN ;
                    ELSE
                      --创建合作伙伴  
                      prc_partner_create_thaw(l_apply_customer,l_sale_group,l_hm_sp_sale.row_id,in_user_name,retcode,retmsg);
                      
                    END IF;
                    
               END LOOP;
               
               --若此客户为山东日日顺下客户，则自动扩充2000公司与销售组织，创建于售达方2000下送达方合作伙伴关系 
               --Lvdecheng 20130715
               IF l_apply_customer.Business_Code = 'CST-UNFREEZE-GM-1169' THEN 
                  
                  FOR CUR_RRS IN(
                      SELECT * FROM HM_CUST_RRS T WHERE T.TRADE_CODE = l_apply_customer.Train_Station
                  ) LOOP 
                    customer_rrs_con := customer_rrs_con + 1;
                  END LOOP;
          
                  IF customer_rrs_con > 0 THEN 
                     
                     --创建2000公司与销售    
                     prc_thaw_company_trans(in_user_name ,l_apply_customer,retcode,retmsg);
                     
                  END IF;
          
               END IF;
               
               
          elsif l_apply_customer.cust_flag_jcsh = '1' then
             --校验此解冻送达方对应的售达方是否存在此送达方对应总公司的销售组织
             
             FOR cur_sales IN(
                SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = '12'
                UNION
                SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = '12'
              )
              LOOP 
                   sale_count := sale_count + 1;
                   l_sale_group := cur_sales.sales_organization;
                   l_hm_sp_sale := null;
                   FOR cur_row_sales IN (
                     select hcs.*  
                           from hm_customers hc, hm_customer_sales_data hcs
                           where hc.row_id = hcs.customer_id
                           and hc.customer_number = l_apply_customer.customer_number_sp 
                           and hcs.delete_flag = '0' 
                           and hcs.sales_group = l_sale_group 
                    ) LOOP  
                       sp_sale_group_count := sp_sale_group_count + 1;
                       l_hm_sp_sale := cur_row_sales;
                    END LOOP;  
                    --如果售达方不存在此销售组织，则先扩充，如果存在则直接创建合作伙伴
                    IF sp_sale_group_count = 0 THEN
                      retcode := 'E';
                      retmsg  := '售达方'||l_apply_customer.customer_number_sp||'不存在'||l_sale_group||'销售组织，请维护！'; 
                      RETURN ;
                    ELSE
                      --创建合作伙伴  
                      prc_partner_create_thaw(l_apply_customer,l_sale_group,l_hm_sp_sale.row_id,in_user_name,retcode,retmsg);
                      
                    END IF;
                    
               END LOOP;
          end if;
        end if;
        --end集采送达方创建合作伙伴
        
        
        --添加解冻维护管理客户主表颗粒度和经营体 panzhaohui 20130604
        UPDATE HM_CUST_SUB_COMPANY T
           SET T.AREA_CODE = l_apply_customer.area_code_thaw,
               T.JYT       = l_apply_customer.jyt_thaw
         WHERE T.BRANCH_COMPANY_CODE =
               l_apply_customer.branch_company_code_thaw;
               
    ELSIF l_apply_customer.Cust_Thaw_Type = '02' THEN
          --根据工贸将此工贸下的公司解冻
          FOR cur_row IN (
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
            UNION
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station 
          ) LOOP
            --根据此工贸公司与客户所在公司代码校验,如果存在则冻结
            FOR cur_row_cust IN (
              select hcc.company_code
                from hm_customers hc, hm_cust_company_data hcc
               where hc.row_id = hcc.customer_id
                 and hc.customer_number = l_apply_customer.customer_number
            ) LOOP 
              IF cur_row.sales_organization = cur_row_cust.company_code THEN 
                 l_hm_del_customer_company.row_id := comm_util.FUNC_NEW_ROWID();
                 l_hm_del_customer_company.customer_number := l_apply_customer.customer_number;
                 l_hm_del_customer_company.company_code := cur_row.sales_organization;
                 l_hm_del_customer_company.last_upd := sysdate;
                 l_hm_del_customer_company.created := sysdate;
                 l_hm_del_customer_company.created_by := in_user_name;
                 l_hm_del_customer_company.last_upd_by := in_user_name ;
                 l_hm_del_customer_company.last_version_flag := '2';
                 l_hm_del_customer_company.for_gvs := '1';
                 l_hm_del_customer_company.operate_status := 'CREATE';
                 l_hm_del_customer_company.active_flag := '1';
                 l_hm_del_customer_company.delete_flag := '0';
                 l_hm_del_customer_company.audit_flag := '0';
                 l_hm_del_customer_company.lock_flag := '0';
                 l_hm_del_customer_company.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
                 INSERT INTO HM_DEL_CUSTOMER VALUES l_hm_del_customer_company ;
              END IF;
            END LOOP;
          END LOOP;
          
          --销售组织解冻
          FOR cur_row1 IN (
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_TRADE2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station
            UNION
            SELECT T.SALES_ORGANIZATION 
                   FROM HM_FND_CUST_RRS2SALESORG T
                   WHERE T.TRADE_CODE = l_apply_customer.Train_Station 
          ) LOOP
            
            --根据此工贸销售组织与客户所在销售组织校验,如果存在则冻结
            FOR cur_row_sales IN (
              select hcs.sales_group 
                from hm_customers hc, hm_customer_sales_data hcs
               where hc.row_id = hcs.customer_id
                 and hc.customer_number = l_apply_customer.customer_number
            ) LOOP   
            
              IF cur_row1.sales_organization = cur_row_sales.sales_group THEN 
                  l_hm_del_customer_sale.row_id := comm_util.FUNC_NEW_ROWID();
                  l_hm_del_customer_sale.customer_number := l_apply_customer.customer_number;
                  l_hm_del_customer_sale.sales_group := cur_row1.sales_organization;
                  l_hm_del_customer_sale.distribution_channel := '00';
                  l_hm_del_customer_sale.division := '00';
                  l_hm_del_customer_sale.last_upd := sysdate;
                  l_hm_del_customer_sale.created := sysdate;
                  l_hm_del_customer_sale.created_by := in_user_name;
                  l_hm_del_customer_sale.last_upd_by := in_user_name ;
                  l_hm_del_customer_sale.last_version_flag := '2';
                  l_hm_del_customer_sale.for_gvs := '1';
                  l_hm_del_customer_sale.operate_status := 'CREATE';
                  l_hm_del_customer_sale.active_flag := '1';
                  l_hm_del_customer_sale.delete_flag := '0';
                  l_hm_del_customer_sale.audit_flag := '0';
                  l_hm_del_customer_sale.lock_flag := '0';
                  l_hm_del_customer_sale.action_batch_id := l_apply_customer.apply_id; --记录申请单号，按申请单号取出冻结表的rowid
        
                  INSERT INTO HM_DEL_CUSTOMER VALUES l_hm_del_customer_sale ;
              END IF;
              
            END LOOP;
            
          END LOOP;
          
    END IF;
        
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'prc_base_trans:operate failure !' || SQLERRM;  
  END prc_customer_thaw_trans; 
  
  
 /*********************************************************
 *创建解冻送达方与售达方合作伙伴关系
 *Lvdecheng 20130722
 ********************************************************/
 PROCEDURE prc_partner_create_thaw
	(
		in_datavalue IN hm_apply_customer%ROWTYPE,
    in_sale_org IN VARCHAR2,
		in_sales_id  IN VARCHAR2,
		in_user_name IN VARCHAR2,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
		l_apply_customer       hm_apply_customer%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
		l_hm_customer_partners hm_customer_partners%ROWTYPE;  
	
		li_count  INTEGER := 0;
    li_count_par INTEGER := 0;
		lv_partnerid VARCHAR2(20);
    
    customer_number_rrs VARCHAR2(20);
    l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
    
	BEGIN
    retcode := 'S';
    retmsg  := 'prc_partner_create_thaw:The partner create success ! ';

		l_apply_customer := in_datavalue;
  	--校验合作伙伴是否存在
    for cur_partner in (select * from hm_customer_partners t 
        where t.sales_area_view_id = in_sales_id 
        and t.cust_partner_subject_id = l_apply_customer.customer_number)  
      loop
        li_count_par := li_count_par + 1 ;
      end loop;
      if li_count_par > 0 then 
         null;
      else
                     
        --创建/扩展客户合作伙伴信息
        lv_partnerid := comm_util.func_new_rowid();
    		  
        l_hm_customer_partners.cust_partner_type := 'SH';
        l_hm_customer_partners.cust_partner_subject_id := l_apply_customer.customer_number;
        l_hm_customer_partners.sales_area_view_id := in_sales_id;
        l_hm_customer_partners.description        := in_sale_org;
    
        l_hm_customer_partners.row_id             := lv_partnerid;
        l_hm_customer_partners.created_by         := in_user_name;
        l_hm_customer_partners.created            := SYSDATE;
        l_hm_customer_partners.last_upd_by        := in_user_name;
        l_hm_customer_partners.last_upd           := SYSDATE;
        l_hm_customer_partners.modification_num   := 0;
        l_hm_customer_partners.active_flag        := '1';
        l_hm_customer_partners.version            := '1.0';
        l_hm_customer_partners.last_version_flag  := '2';
        l_hm_customer_partners.operate_status     := 'CREATE';
        l_hm_customer_partners.lock_flag          := '0';
        l_hm_customer_partners.for_gvs            := '1';
        l_hm_customer_partners.delete_flag        := '0';
    		
        INSERT INTO hm_customer_partners VALUES l_hm_customer_partners;
        comm_util.copy_table_line('HM_CUSTOMER_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        
        UPDATE hm_customer_sales_data
           SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
               last_version_flag = '2',
               for_gvs = '1',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE row_id = in_sales_id; 
         
         UPDATE hm_customers
           SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
               last_version_flag = '2',
               for_gvs = '1',
               lock_flag = '0',
               last_upd_by = in_user_name,
               last_upd = SYSDATE,
               modification_num = modification_num + 1
         WHERE customer_number = l_apply_customer.customer_number_sp;
         
         l_hm_applys_transactions.action_batch_id := l_apply_customer.action_batch_id;
         l_hm_applys_transactions.apply_id        := l_apply_customer.apply_id;
         l_hm_applys_transactions.apply_item_no   := l_apply_customer.row_id;
         l_hm_applys_transactions.master_row_code := l_apply_customer.customer_number;
      
         l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
         l_hm_applys_transactions.created_by      := in_user_name;
         l_hm_applys_transactions.created         := SYSDATE;
         l_hm_applys_transactions.last_upd_by     := in_user_name;
         l_hm_applys_transactions.last_upd        := SYSDATE;
         l_hm_applys_transactions.active_flag     := '1';
         l_hm_applys_transactions.delete_flag     := '0';
    		
         INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
      
         commit;
      end if;   
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			retcode := 'E';
			retmsg  := 'The partner create error:' || SQLERRM;
	END prc_partner_create_thaw; 
  
  /******************************************************
  **
  **冻结解冻自动扩充2000销售组织与公司代码
  **Lvdecheng 20130723
  **
  ********************************************************/
  PROCEDURE prc_thaw_company_trans
	( 
    in_user_name IN VARCHAR2,
		l_apply_customer IN OUT hm_apply_customer%ROWTYPE,
		retcode      OUT VARCHAR2,
		retmsg       OUT VARCHAR2
	) IS
  
    l_hm_sale_data                  hm_customer_sales_data%ROWTYPE;
    l_hm_company_data               hm_cust_company_data%ROWTYPE;
    
    v_customer_id                   VARCHAR2(20) ;
    v_sp_id                         VARCHAR2(20) ;
    v_sale_org                      INTEGER := 0;
    v_comapny_code                  INTEGER := 0; 
    v_sale_id                       VARCHAR2(20);
    
  BEGIN 
    
    retcode := 'S';
    retmsg  := 'SUCCESS';
    v_customer_id := CUSTOMER.GETCUSTOMERIDBYCODE(l_apply_customer.Customer_Number);
    v_sp_id       := CUSTOMER.GETCUSTOMERIDBYCODE(l_apply_customer.customer_number_sp);
    for cur_org in (
        select * from hm_cust_company_data tt where tt.customer_id = v_customer_id and tt.company_code = '2000'
      )
      loop 
        v_comapny_code := v_comapny_code + 1;
      end loop ;
      if v_comapny_code > 0 then
        /*retcode := 'E';
        retmsg := '应经存在2000公司代码，请查看';
        return ;*/
        null;
      else 
         INSERT INTO HM_CUST_COMPANY_DATA (
                     ROW_ID            ,
                     CUSTOMER_ID       ,  
                     COMPANY_CODE      ,
                     RECONCILE_ACCOUNT ,
                     CREATED_BY        ,
                     CREATED           ,
                     LAST_UPD_BY       ,
                     LAST_UPD          ,
                     ACTIVE_FLAG       ,
                     LOCK_FLAG         ,
                     VERSION           ,
                     LAST_VERSION_FLAG ,
                     DELETE_FLAG       ,
                     OPERATE_STATUS    ,
                     AUDIT_FLAG        ,
                     SEQUENCE_NO       ,
                     For_Gvs           ,
                     PAYMENT_TERM      

              )
              VALUES(
                     comm_util.func_new_rowid,
                     v_customer_id,
                     '2000',
                     '1122002000',
                     in_user_name,SYSDATE,in_user_name,SYSDATE,
                     '1','0','1.0','2',
                     '0','CREATE','1','001','1','0000'
              );
      end if;
      
      
      for cur_org in (
        select * from hm_customer_sales_data tt where tt.customer_id = v_customer_id and tt.sales_group = '2000'
      )
      loop 
        v_sale_org := v_sale_org + 1;
      end loop ;
      if v_sale_org > 0 then
        /*retcode := 'E';
        retmsg := '已经存在2000销售组织，请查看';
        return ;*/
        null;
      else
        INSERT INTO HM_CUSTOMER_SALES_DATA (
                          ROW_ID,
                          CUSTOMER_ID,
                          CURRENCY_CODE,
                          SALES_GROUP,
                          created_by,
                          created,
                          last_upd_by,
                          last_upd,
                          DISTRIBUTION_CHANNEL,
                          DIVISION,
                          CUSTOMER_PRICING_PROCCESS,
                          CUSTOMER_SUMMARY_GROUP,
                          SHIP_CONDITION,
                          ACCOUNT_DISTRIBUTE_GROUP,
                          CUST_TAX_CATEGORY,
                          PAYMENT_TERMS_1,
                          POD_RELATION,
                          last_version_flag,
                          OPERATE_STATUS
                        )
                        VALUES (
                               comm_util.func_new_rowid,
                               v_customer_id,
                               'CNY',
                               '2000',
                               in_user_name,sysdate,in_user_name,sysdate ,
                               '00',
                               '00',
                               '1',
                               '1',
                               '01',
                               '20',
                               '1',
                               '0000',
                               'X',
                               '2',
                               'CREATE'
                 );
      end if;
      
      --创建2000合作伙伴关系
      for sp_sale_id in (
          select * from hm_customer_sales_data t where t.customer_id = v_sp_id and t.sales_group = '2000' 
        )
        loop 
          v_sale_id := sp_sale_id.Row_Id;
        end loop;
        
        prc_partner_create_thaw(l_apply_customer,'2000',v_sale_id,in_user_name,retcode,retmsg);
        
      EXCEPTION
		  WHEN OTHERS THEN
			     ROLLBACK;
			     retcode := 'E';
			     retmsg  := 'The partner create error:' || SQLERRM;
  END prc_thaw_company_trans;
  
  
  
  
END;
