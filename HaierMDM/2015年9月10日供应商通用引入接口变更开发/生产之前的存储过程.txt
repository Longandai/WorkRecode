CREATE OR REPLACE PACKAGE BODY vendor_apply IS

  --TYPE tab_apply_vendor_bank IS TABLE OF hm_apply_vendor_bank%ROWTYPE;
  --TYPE tab_apply_vendor_company IS TABLE OF hm_apply_vendor_company%ROWTYPE;
  --TYPE tab_apply_vendor_purchase IS TABLE OF hm_apply_vendor_purchase%ROWTYPE;

  --供应商虚拟组织对应的公司代码
  CURSOR cur_org_company(p_dept_code IN VARCHAR2) IS
    SELECT * FROM hm_org_company t WHERE t.org_code = p_dept_code;

  --供应商虚拟组织对应的采购组织
  CURSOR cur_org_purchase(p_dept_code IN VARCHAR2, p_find IN VARCHAR2) IS
    SELECT T.ORG_CODE, T.PURCHASE_ORG
      FROM hm_org_purchase t
     WHERE p_find IS NOT NULL
       AND t.org_code = p_dept_code
    UNION
    SELECT '' ORG_CODE, t.value PURCHASE_ORG
      FROM hm_fnd_values t
     WHERE p_find IS NULL
       AND t.value_set_id = 'PurchaseOrganization';

  --根据送达方或售达方供应商号找对应售达方(除了指定售达方),在指定采购组织内
  /*    CURSOR CUR_PARTNER2SPCUST (P_VENDOR_PARTNER_SUBJECT_ID IN VARCHAR2,
                                 P_VENDOR_PARTNER_TYPE IN VARCHAR2 ,
                                 p_pur_orgs VARCHAR2, --aaaa,bbbb,cccc
                                 P_SP_VENDOR_EXT IN VARCHAR2 ---排除此供应商
                                 ) IS
        SELECT DISTINCT AAA.PARTNER_SUBJECT_ID,
                        A.vendor_code,
                        A.ACCOUNT_GRP_CODE,
                        A.VENDOR_NAME --chr(9),chr(13)||chr(10)
          FROM HM_vendor_PARTNERS   AAA,
               HM_VENDOR_PUR_DATA AA,
               hm_vendors           A
         WHERE ( P_SP_VENDOR_EXT IS NULL OR A.vendor_code <> P_SP_VENDOR_EXT ) 
           AND A.DELETE_FLAG = '0'
           AND A.ROW_ID = AA.VENDOR_ID
           AND instr(p_pur_orgs, aa.purchase_grp_code) > 0
           AND AA.DELETE_FLAG = '0'
           AND AA.ROW_ID = AAA.PUR_GRP_ID
           AND AAA.PARTNER_FUNCTION = P_VENDOR_PARTNER_TYPE --'SH','PY'
           AND AAA.DELETE_FLAG = '0'
           AND NOT EXISTS
         (SELECT *
                  FROM hm_vendors T, HM_VENDOR_PUR_DATA TT
                 WHERE T.ROW_ID = TT.Vendor_Id
                   AND TT.ROW_ID = AAA.PUR_GRP_ID
                   AND T.vendor_code = AAA.PARTNER_SUBJECT_ID)
           AND AAA.PARTNER_SUBJECT_ID = P_VENDOR_PARTNER_SUBJECT_ID; --'8000000006';
  */
  --根据送达方或售达方供应商号找对应售达方(除了指定售达方),在指定采购组织内
  /*    CURSOR CUR_PARTNER2SPCUST_item (P_VENDOR_PARTNER_SUBJECT_ID IN VARCHAR2,
                                 P_VENDOR_PARTNER_TYPE IN VARCHAR2 ,
                                 P_PUR_ORGS VARCHAR2, --aaaa,bbbb,cccc
                                 P_SP_VENDOR_EXT IN VARCHAR2 ---排除此供应商
                                 ) IS
        SELECT          AAA.ROW_ID,
                        AAA.PARTNER_SUBJECT_ID,
                        AAA.PARTNER_FUNCTION,
                        AAA.PUR_GRP_ID,
                        AA.PURCHASE_GRP_CODE,
                        AA.VENDOR_ID,
                        A.vendor_code,
                        A.ACCOUNT_GRP_CODE,
                        A.VENDOR_NAME --chr(9),chr(13)||chr(10)
          FROM HM_vendor_PARTNERS   AAA,
               Hm_Vendor_Pur_Data AA,
               hm_vendors           A
         WHERE A.vendor_code <> P_SP_VENDOR_EXT
           AND A.DELETE_FLAG = '0'
           AND A.ROW_ID = AA.VENDOR_ID
           AND INSTR(P_PUR_ORGS, AA.PURCHASE_GRP_CODE) > 0
           AND AA.DELETE_FLAG = '0'
           AND AA.ROW_ID = AAA.PUR_GRP_ID
           AND AAA.PARTNER_FUNCTION = P_VENDOR_PARTNER_TYPE --'SH','PY'
           AND AAA.DELETE_FLAG = '0'
           AND NOT EXISTS
         (SELECT *
                  FROM hm_vendors T, hm_vendor_pur_data TT
                 WHERE T.ROW_ID = TT.vendor_ID
                   AND TT.ROW_ID = AAA.PUR_GRP_ID
                   AND T.vendor_code = AAA.PARTNER_SUBJECT_ID)
           AND AAA.PARTNER_SUBJECT_ID = P_VENDOR_PARTNER_SUBJECT_ID; --'8000000006';
  */
  --得到原始对应售达方
  /*  FUNCTION get_old_soldtoparty ( in_VENDOR_PARTNER_SUBJECT_ID VARCHAR2,
                                   in_VENDOR_PARTNER_TYPE VARCHAR2,
                                   in_sales_orgs VARCHAR2,
                                   IN_SP_VENDOR_EXT VARCHAR2) RETURN VARCHAR2 IS
      ls_old_soldtoparty VARCHAR2(1000) := '';
      ls_VENDOR_PARTNER_TYPE VARCHAR2(10) := '';
      
    BEGIN
      IF instr(UPPER(TRIM(in_VENDOR_PARTNER_TYPE)),'SH') > 0 THEN
        ls_VENDOR_PARTNER_TYPE := 'SH';
      ELSE
        ls_VENDOR_PARTNER_TYPE := UPPER(TRIM(in_VENDOR_PARTNER_TYPE));
      END IF;
      
      IF ls_VENDOR_PARTNER_TYPE IN ('PY','SH','BP') THEN
      
        FOR cur_rows IN CUR_PARTNER2SPCUST (IN_VENDOR_PARTNER_SUBJECT_ID, IN_VENDOR_PARTNER_TYPE, in_sales_orgs, IN_SP_VENDOR_EXT )
        LOOP
          ls_old_soldtoparty := ls_old_soldtoparty||cur_rows.vendor_code||CHR(9)||cur_rows.account_grp_code||CHR(9)||cur_rows.vendor_name||CHR(13)||CHR(10);
        END LOOP;
        
      END IF;
      
      RETURN ls_old_soldtoparty;
      
    EXCEPTION
      WHEN OTHERS THEN
        RETURN ls_old_soldtoparty;
    END get_old_soldtoparty;
  */
  /****************************************************************
  功能描述：供应商申请信息生成主数据临时码
  作者：    zhangbiao 
  时间：    2010-05-20       
       
  输入参数说明： in_hm_apply_vendor 待更新结构 (使用字段)
  
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ***************************************************************/

  procedure prc_apply_tmpcode(in_tmpcode_type   IN VARCHAR2, --vendor_code,MANAGER_vendor,VENDOR_CODE
                              v_hm_apply_vendor IN out hm_apply_vendor%ROWTYPE,
                              retcode           out varchar2, --返回码
                              retmsg            out varchar2 --返回消息                                  
                              ) is
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_apply_tmpcode: 生成临时码成功！';
  
    IF in_tmpcode_type = 'VENDOR_CODE' THEN
      IF v_hm_apply_vendor.operate_type = 'CREATE' AND
         v_hm_apply_vendor.vendor_code IS NULL THEN
      
        FOR CUR_ROWS IN (SELECT *
                           FROM hm_master_code_sequence
                          WHERE master_type = 'VENDOR'
                            AND master_code_group =
                                v_hm_apply_vendor.account_grp_code
                            AND active_flag = '1') LOOP
          comm_util.prc_new_tmpid(v_hm_apply_vendor.vendor_code);
        
          IF v_hm_apply_vendor.vendor_code IS NOT NULL THEN
          
            v_hm_apply_vendor.VENDOR_CODE_TEMP := v_hm_apply_vendor.vendor_code;
          
            UPDATE hm_apply_vendor
               SET vendor_code      = v_hm_apply_vendor.vendor_code,
                   vendor_code_temp = v_hm_apply_vendor.vendor_code
             WHERE row_id = v_hm_apply_vendor.row_id;
          END IF;
        
        END LOOP;
      
      END IF;
    
    ELSE
    
      v_hm_apply_vendor := v_hm_apply_vendor;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_apply_tmpcode: 生成临时码失败！' || SQLERRM;
  END prc_apply_tmpcode;

  /****************************************************************
  功能描述：申请明显信息从结构更新到数据库,依据in_hm_apply_vendor.ROW_ID (应用位置: save,import,transaction)
  作者：    zhangbiao 
  时间：    2010-05-20       
       
  输入参数说明： in_tablename_suffix 取数表名的后缀,取导入表的数据:_IMP ,正式库表: 空,
                 in_hm_apply_vendor 待更新结构
                                     (*如果in_hm_apply_vendor.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_input_type2db(in_tablename_suffix IN VARCHAR2,
                              in_hm_apply_vendor  IN hm_apply_vendor%Rowtype,
                              retcode             OUT VARCHAR2,
                              retmsg              OUT VARCHAR2) IS
    l_hm_apply_vendor hm_apply_vendor%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_input_type2db: succeed!';
  
    if in_hm_apply_vendor.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_apply_vendor_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
  
    l_hm_apply_vendor := in_hm_apply_vendor;
  
    IF trim(in_tablename_suffix) IS NULL THEN
    
      UPDATE hm_apply_vendor
         SET --row_id = l_hm_apply_vendor.row_id,
                          created_by = l_hm_apply_vendor.created_by,
             created                  = l_hm_apply_vendor.created,
             last_upd_by              = l_hm_apply_vendor.last_upd_by,
             last_upd                 = l_hm_apply_vendor.last_upd,
             modification_num         = l_hm_apply_vendor.modification_num,
             delete_flag              = l_hm_apply_vendor.delete_flag,
             active_flag              = l_hm_apply_vendor.active_flag,
             remark                   = l_hm_apply_vendor.remark,
             action_batch_id          = l_hm_apply_vendor.action_batch_id,
             business_code            = l_hm_apply_vendor.business_code,
             master_type              = l_hm_apply_vendor.master_type,
             operate_type             = l_hm_apply_vendor.operate_type,
             business_type            = l_hm_apply_vendor.business_type,
             inner_outer_flag         = l_hm_apply_vendor.inner_outer_flag,
             view_type                = l_hm_apply_vendor.view_type,
             dept_code                = l_hm_apply_vendor.dept_code,
             apply_id                 = l_hm_apply_vendor.apply_id,
             item_no                  = l_hm_apply_vendor.item_no,
             view_base_x              = l_hm_apply_vendor.view_base_x,
             view_bank_x              = l_hm_apply_vendor.view_bank_x,
             view_company_x           = l_hm_apply_vendor.view_company_x,
             view_purchase_x          = l_hm_apply_vendor.view_purchase_x,
             vendor_title             = l_hm_apply_vendor.vendor_title,
             vendor_title_x           = l_hm_apply_vendor.vendor_title_x,
             vendor_code              = l_hm_apply_vendor.vendor_code,
             vendor_code_x            = l_hm_apply_vendor.vendor_code_x,
             vendor_name              = l_hm_apply_vendor.vendor_name,
             vendor_name_x            = l_hm_apply_vendor.vendor_name_x,
             bidder_no                = l_hm_apply_vendor.bidder_no,
             bidder_no_x              = l_hm_apply_vendor.bidder_no_x,
             search_term              = l_hm_apply_vendor.search_term,
             search_term_x            = l_hm_apply_vendor.search_term_x,
             street_room              = l_hm_apply_vendor.street_room,
             street_room_x            = l_hm_apply_vendor.street_room_x,
             postal_code_city         = l_hm_apply_vendor.postal_code_city,
             postal_code_city_x       = l_hm_apply_vendor.postal_code_city_x,
             country                  = l_hm_apply_vendor.country,
             country_x                = l_hm_apply_vendor.country_x,
             region                   = l_hm_apply_vendor.region,
             region_x                 = l_hm_apply_vendor.region_x,
             phone_number             = l_hm_apply_vendor.phone_number,
             phone_number_x           = l_hm_apply_vendor.phone_number_x,
             fax_number               = l_hm_apply_vendor.fax_number,
             fax_number_x             = l_hm_apply_vendor.fax_number_x,
             tax_code                 = l_hm_apply_vendor.tax_code,
             tax_code_x               = l_hm_apply_vendor.tax_code_x,
             account_grp_code         = l_hm_apply_vendor.account_grp_code,
             account_grp_code_x       = l_hm_apply_vendor.account_grp_code_x,
             external_manufacturer    = l_hm_apply_vendor.external_manufacturer,
             external_manufacturer_x  = l_hm_apply_vendor.external_manufacturer_x,
             intl_area_code           = l_hm_apply_vendor.intl_area_code,
             intl_area_code_x         = l_hm_apply_vendor.intl_area_code_x,
             trans_agent_grp          = l_hm_apply_vendor.trans_agent_grp,
             trans_agent_grp_x        = l_hm_apply_vendor.trans_agent_grp_x,
             service_agent_proc_grp   = l_hm_apply_vendor.service_agent_proc_grp,
             service_agent_proc_grp_x = l_hm_apply_vendor.service_agent_proc_grp_x,
             station                  = l_hm_apply_vendor.station,
             station_x                = l_hm_apply_vendor.station_x,
             customer_code            = l_hm_apply_vendor.customer_code,
             customer_code_x          = l_hm_apply_vendor.customer_code_x,
             vendor_hq                = l_hm_apply_vendor.vendor_hq,
             vendor_hq_x              = l_hm_apply_vendor.vendor_hq_x,
             city_street_room         = l_hm_apply_vendor.city_street_room,
             city_street_room_x       = l_hm_apply_vendor.city_street_room_x,
             LANGUAGE                 = l_hm_apply_vendor.language,
             language_x               = l_hm_apply_vendor.language_x,
             company_share            = l_hm_apply_vendor.company_share,
             company_share_x          = l_hm_apply_vendor.company_share_x,
             bu                       = l_hm_apply_vendor.bu,
             bu_x                     = l_hm_apply_vendor.bu_x,
             pl                       = l_hm_apply_vendor.pl,
             pl_x                     = l_hm_apply_vendor.pl_x,
             expiry_date              = l_hm_apply_vendor.expiry_date,
             expiry_date_x            = l_hm_apply_vendor.expiry_date_x,
             companycode_list         = l_hm_apply_vendor.companycode_list,
             companycode_list_x       = l_hm_apply_vendor.companycode_list_x,
             purchasecode_list        = l_hm_apply_vendor.purchasecode_list,
             purchasecode_list_x      = l_hm_apply_vendor.purchasecode_list_x,
             vendor_code_temp         = l_hm_apply_vendor.vendor_code_temp,
             FINANCE_BUSINESS_FLAG    = l_hm_apply_vendor.FINANCE_BUSINESS_FLAG
       WHERE row_id = l_hm_apply_vendor.row_id;
    
    ELSIF upper(trim(in_tablename_suffix)) = '_IMP' THEN
    
      UPDATE hm_apply_vendor_imp
         SET --row_id = l_hm_apply_vendor.row_id,
                          created_by = l_hm_apply_vendor.created_by,
             created                  = l_hm_apply_vendor.created,
             last_upd_by              = l_hm_apply_vendor.last_upd_by,
             last_upd                 = l_hm_apply_vendor.last_upd,
             modification_num         = l_hm_apply_vendor.modification_num,
             delete_flag              = l_hm_apply_vendor.delete_flag,
             active_flag              = l_hm_apply_vendor.active_flag,
             remark                   = l_hm_apply_vendor.remark,
             action_batch_id          = l_hm_apply_vendor.action_batch_id,
             business_code            = l_hm_apply_vendor.business_code,
             master_type              = l_hm_apply_vendor.master_type,
             operate_type             = l_hm_apply_vendor.operate_type,
             business_type            = l_hm_apply_vendor.business_type,
             inner_outer_flag         = l_hm_apply_vendor.inner_outer_flag,
             view_type                = l_hm_apply_vendor.view_type,
             dept_code                = l_hm_apply_vendor.dept_code,
             apply_id                 = l_hm_apply_vendor.apply_id,
             item_no                  = l_hm_apply_vendor.item_no,
             view_base_x              = l_hm_apply_vendor.view_base_x,
             view_bank_x              = l_hm_apply_vendor.view_bank_x,
             view_company_x           = l_hm_apply_vendor.view_company_x,
             view_purchase_x          = l_hm_apply_vendor.view_purchase_x,
             vendor_title             = l_hm_apply_vendor.vendor_title,
             vendor_title_x           = l_hm_apply_vendor.vendor_title_x,
             vendor_code              = l_hm_apply_vendor.vendor_code,
             vendor_code_x            = l_hm_apply_vendor.vendor_code_x,
             vendor_name              = l_hm_apply_vendor.vendor_name,
             vendor_name_x            = l_hm_apply_vendor.vendor_name_x,
             bidder_no                = l_hm_apply_vendor.bidder_no,
             bidder_no_x              = l_hm_apply_vendor.bidder_no_x,
             search_term              = l_hm_apply_vendor.search_term,
             search_term_x            = l_hm_apply_vendor.search_term_x,
             street_room              = l_hm_apply_vendor.street_room,
             street_room_x            = l_hm_apply_vendor.street_room_x,
             postal_code_city         = l_hm_apply_vendor.postal_code_city,
             postal_code_city_x       = l_hm_apply_vendor.postal_code_city_x,
             country                  = l_hm_apply_vendor.country,
             country_x                = l_hm_apply_vendor.country_x,
             region                   = l_hm_apply_vendor.region,
             region_x                 = l_hm_apply_vendor.region_x,
             phone_number             = l_hm_apply_vendor.phone_number,
             phone_number_x           = l_hm_apply_vendor.phone_number_x,
             fax_number               = l_hm_apply_vendor.fax_number,
             fax_number_x             = l_hm_apply_vendor.fax_number_x,
             tax_code                 = l_hm_apply_vendor.tax_code,
             tax_code_x               = l_hm_apply_vendor.tax_code_x,
             account_grp_code         = l_hm_apply_vendor.account_grp_code,
             account_grp_code_x       = l_hm_apply_vendor.account_grp_code_x,
             external_manufacturer    = l_hm_apply_vendor.external_manufacturer,
             external_manufacturer_x  = l_hm_apply_vendor.external_manufacturer_x,
             intl_area_code           = l_hm_apply_vendor.intl_area_code,
             intl_area_code_x         = l_hm_apply_vendor.intl_area_code_x,
             trans_agent_grp          = l_hm_apply_vendor.trans_agent_grp,
             trans_agent_grp_x        = l_hm_apply_vendor.trans_agent_grp_x,
             service_agent_proc_grp   = l_hm_apply_vendor.service_agent_proc_grp,
             service_agent_proc_grp_x = l_hm_apply_vendor.service_agent_proc_grp_x,
             station                  = l_hm_apply_vendor.station,
             station_x                = l_hm_apply_vendor.station_x,
             customer_code            = l_hm_apply_vendor.customer_code,
             customer_code_x          = l_hm_apply_vendor.customer_code_x,
             vendor_hq                = l_hm_apply_vendor.vendor_hq,
             vendor_hq_x              = l_hm_apply_vendor.vendor_hq_x,
             city_street_room         = l_hm_apply_vendor.city_street_room,
             city_street_room_x       = l_hm_apply_vendor.city_street_room_x,
             LANGUAGE                 = l_hm_apply_vendor.language,
             language_x               = l_hm_apply_vendor.language_x,
             company_share            = l_hm_apply_vendor.company_share,
             company_share_x          = l_hm_apply_vendor.company_share_x,
             bu                       = l_hm_apply_vendor.bu,
             bu_x                     = l_hm_apply_vendor.bu_x,
             pl                       = l_hm_apply_vendor.pl,
             pl_x                     = l_hm_apply_vendor.pl_x,
             expiry_date              = l_hm_apply_vendor.expiry_date,
             expiry_date_x            = l_hm_apply_vendor.expiry_date_x,
             companycode_list         = l_hm_apply_vendor.companycode_list,
             companycode_list_x       = l_hm_apply_vendor.companycode_list_x,
             purchasecode_list        = l_hm_apply_vendor.purchasecode_list,
             purchasecode_list_x      = l_hm_apply_vendor.purchasecode_list_x,
             vendor_code_temp         = l_hm_apply_vendor.vendor_code_temp,
             FINANCE_BUSINESS_FLAG    = l_hm_apply_vendor.FINANCE_BUSINESS_FLAG
       WHERE row_id = l_hm_apply_vendor.row_id;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_input_type2db:' || SQLERRM;
  END prc_input_type2db;

  /****************************************************************
  功能描述：根据业务类型校验输入字段 (应用位置: save,import,transaction)
  作者：    zhangbiao 
  时间：    2010-05-20       
       
  输入参数说明： in_row_id        申请单_信息ID,(*如果in_row_id不为空, 则从数据库取数填充 v_hm_apply_vendor 值   )        
                 in_tablename_suffix 取数表名的后缀,取导入表的数据:_IMP ,正式库表: 空,
                 v_hm_apply_vendor IN OUT hm_apply_vendor%ROWTYPE (输入输出方式)
                                     (*如果in_row_id不为空,v_hm_apply_vendor值即为待处理的数据条目)
                 in_checkname     校验名称，一般是需要校验的字段名称 
                 (可以为空。为空，则全部校验)
          例：
      VENDOR_NAME,NAME2,STREET,STREET2,STREET3,
      STREET4,DISTRICT,CITY,SEARCH_TERMS,EMAIL,
      POSTAL_CODE,REGIONAL_GM_MANAGER,CUSTOMER_MANAGER,ASSISTANT_VENDOR_MGR,SALES_AGENT,
      SALES_REP,KEY_ACCOUNT_MANAGER,CREDIT_MANAGER_CODE,SOE_CODE,CENTRAL_ACCOUNT
                 
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,保存，导入，转换统一验证方法
       2,前提：录入数据已入数据库表(导入表或正式表中，有ROW_ID)
       3,根据校验名称对相关字段或业务数据进行校验
       4,内部调用 prc_input_change
  ****************************************************************/
  PROCEDURE prc_input_allcheck(in_row_id                  IN VARCHAR2,
                               in_tablename_suffix        IN VARCHAR2,
                               v_hm_apply_vendor          IN OUT hm_apply_vendor%ROWTYPE,
                               v_hm_apply_vendor_bank     IN OUT tab_apply_vendor_bank,
                               v_hm_apply_vendor_company  IN OUT tab_apply_vendor_company,
                               v_hm_apply_vendor_purchase IN OUT tab_apply_vendor_purchase,
                               retcode                    OUT VARCHAR2,
                               retmsg                     OUT VARCHAR2) IS
  
    li_count                 INTEGER := 0;
    ls_businesscode          hm_applys.business_code%TYPE;
    ls_businesstype          hm_applys.business_type%TYPE;
    ls_deptcode              hm_applys.dept_code%TYPE;
    ls_operatetype           hm_applys.operate_type%TYPE;
    ls_business_auditversion hm_business_audit.current_audit_version%type;
    ls_jytcode_next          hm_applys.jyt_code_next%TYPE;
    ls_jytcode               hm_applys.jyt_code%TYPE;
  
    ls_inner_outer_flag      hm_applys.inner_outer_flag%TYPE;
    ls_finance_business_flag hm_applys.finance_business_flag%TYPE;
    ls_account_group         hm_applys.account_group%TYPE;
  
    ls_belong_yjt VARCHAR2(20);
  
    --ls_businesscode_create hm_applys.business_code%TYPE;
  
    l_hm_business        hm_business%rowtype;
    l_hm_business_audit  hm_business_audit%rowtype;
    l_hm_applys          hm_applys%rowtype;
    l_hm_apply_vendor    hm_apply_vendor%rowtype;
    l_hm_vendors         hm_vendors%rowtype;
    l_hm_business_fields hm_business_fields%ROWTYPE;
  
    ls_fieldvalue VARCHAR2(2000);
    --li_fieldvalue      NUMBER(22,7);
    ls_field_label_en VARCHAR2(2000);
  
    l_retcode_temp   VARCHAR2(10);
    str_sql          VARCHAR2(1000); --查询SQL
    quy_sql          VARCHAR2(250); --查询SQL
    ls_value         VARCHAR2(4000);
    ls_value_x       VARCHAR2(200);
    vendorName       varchar2(500);
    vendorname_count integer := 0;
    TYPE cur_type IS REF CURSOR;
    cur_type_rows cur_type;
  
    CURSOR cur_field_label(p_business_code IN VARCHAR2,
                           p_field_name    IN VARCHAR2) IS
      select field_label_en
        from hm_business_fields
       where business_code = p_business_code
         AND field_name = p_field_name
         AND active_flag = '1'
         AND delete_flag = '0';
  
    in_checkname varchar2(50) := '';
    lcl_count    integer := 0;
    lcl_country  varchar2(500) := '';
  BEGIN
    retcode := 'S';
  
    --录入数据准备(有ROW_ID以数据库取值为优先，否则以录入数据结构为优先)
    IF in_row_id IS NOT NULL THEN
      str_sql := 'select * from hm_apply_vendor' || in_tablename_suffix ||
                 ' where row_id = :in_row_id';
      OPEN cur_type_rows FOR str_sql
        USING in_row_id;
      LOOP
        FETCH cur_type_rows
          INTO l_hm_apply_vendor;
        EXIT WHEN cur_type_rows%NOTFOUND;
      END LOOP;
      CLOSE cur_type_rows;
    ELSE
      l_hm_apply_vendor := v_hm_apply_vendor;
    END IF;
  
    if l_hm_apply_vendor.row_id is null then
      retcode := 'E';
      retmsg  := 'prc_input_allcheck: Vendor apply info not exist!';
      RETURN;
    end if;
  
    str_sql := 'select count(*) from hm_apply_vendor' ||
               in_tablename_suffix || ' where row_id = :in_row_id';
    EXECUTE IMMEDIATE str_sql
      into li_count
      USING l_hm_apply_vendor.row_id;
  
    IF li_count < 1 THEN
      retcode := 'E';
      retmsg  := 'prc_input_allcheck: apply item info not exist!';
      RETURN;
    END IF;
  
    --获取当前申请头信息
    for cur_rows in (select *
                       from hm_applys
                      where apply_id = l_hm_apply_vendor.apply_id) loop
      l_hm_applys     := cur_rows;
      ls_businesscode := l_hm_applys.business_code;
      ls_businesstype := l_hm_applys.business_type;
      ls_deptcode     := l_hm_applys.dept_code;
      ls_operatetype  := l_hm_applys.operate_type;
    
      ls_inner_outer_flag      := l_hm_applys.inner_outer_flag;
      ls_finance_business_flag := l_hm_applys.finance_business_flag;
      ls_account_group         := l_hm_applys.account_group;
    
    end loop;
    if l_hm_applys.apply_id IS NULL THEN
      ls_businesscode := l_hm_apply_vendor.business_code;
      ls_businesstype := l_hm_apply_vendor.business_type;
      ls_deptcode     := l_hm_apply_vendor.dept_code;
      ls_operatetype  := l_hm_apply_vendor.operate_type;
    
      ls_inner_outer_flag      := l_hm_apply_vendor.inner_outer_flag;
      ls_finance_business_flag := l_hm_apply_vendor.finance_business_flag;
      ls_account_group         := l_hm_apply_vendor.account_grp_code;
    
    ELSE
      IF l_hm_apply_vendor.business_code <> l_hm_applys.business_code THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.item_no ||
                   ' ROW, The bussiness code in Application item is different from the head!';
        RETURN;
      END IF;
    END IF;
  
    IF ls_businesscode IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Code can''t be empty!';
      RETURN;
    ELSE
    
      FOR cur_rows IN (SELECT *
                         FROM hm_business
                        WHERE business_code = ls_businesscode) LOOP
        l_hm_business := cur_rows;
      END LOOP;
    
      IF l_hm_business.business_code IS NULL THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.item_no || ' ROW, The bussiness code ' ||
                   ls_businesscode || ' is not valid!';
        RETURN;
      END IF;
    
      FOR cur_rows IN (SELECT *
                         FROM hm_business_audit
                        WHERE business_code = ls_businesscode
                          and active_flag = '1') LOOP
        l_hm_business_audit := cur_rows;
      END LOOP;
    
      IF l_hm_business_audit.current_audit_version IS NULL THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.item_no || ' ROW, The bussiness code ' ||
                   ls_businesscode || ' have not a valid audit version !';
        RETURN;
      else
        ls_business_auditversion := l_hm_business_audit.current_audit_version;
      END IF;
    
      --ls_businesscode_create := REPLACE(REPLACE(ls_businesscode, 'UPDATE', 'CREATE'), 'EXTEND', 'CREATE');
    END IF;
    IF ls_businesstype IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Type can''t be empty!';
      RETURN;
    END IF;
    IF ls_deptcode IS NULL THEN
      retcode := 'E';
      retmsg  := 'Department Code can''t be empty!';
      RETURN;
    END IF;
    IF ls_operatetype IS NULL THEN
      retcode := 'E';
      retmsg  := 'Operate Type can''t be empty!';
      RETURN;
    END IF;
  
    --根据供应商编码，获取当然申请对应主数据条目
    FOR cur_rows IN (SELECT *
                       FROM hm_vendors
                      WHERE vendor_code = l_hm_apply_vendor.vendor_code) LOOP
      l_hm_vendors := cur_rows;
    END LOOP;
  
    --000 账户组，供应商名，供应商编码 提前校验
  
    ----ACCOUNT_GRP_CODE------------------------------start
    --确认待校验的值，有业务相关性
    l_hm_apply_vendor.ACCOUNT_GRP_CODE := upper(trim(l_hm_apply_vendor.ACCOUNT_GRP_CODE));
    ls_fieldvalue                      := l_hm_apply_vendor.ACCOUNT_GRP_CODE;
  
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '';
      FOR cur_rows IN cur_field_label(ls_businesscode, 'ACCOUNT_GRP_CODE') LOOP
        ls_field_label_en := cur_rows.field_label_en;
      END LOOP;
    
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'VendorAccountGroup',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF; -- ls_fieldvalue IS NOT NULL
  
    ----vendor_code
    --确认待校验的值，有业务相关性
    l_hm_apply_vendor.vendor_code := upper(trim(l_hm_apply_vendor.vendor_code));
  
    ls_fieldvalue := l_hm_apply_vendor.vendor_code;
  
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      --长度
      IF length(TRIM(ls_fieldvalue)) > 10 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || ',供应商编码长度超过10!';
        RETURN;
      END IF;
    
      --有效性校验
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(ACCOUNT_GRP_CODE) account_grp_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE vendor_code = l_hm_apply_vendor.vendor_code
                          and delete_flag = '0') LOOP
        IF ls_operatetype IN ('UPDATE', 'CHANGE') THEN
          ----2.0更新必要性校验
          IF NOT cur_rows.account_grp_code IS NULL AND
             cur_rows.account_grp_code <>
             l_hm_apply_vendor.account_grp_code THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := '供应商:[' || l_hm_apply_vendor.vendor_code ||
                       '] 主数据中账户组 [' || cur_rows.account_grp_code ||
                       '] 不同与申请单中的账户组 [' ||
                       l_hm_apply_vendor.account_grp_code || ']!';
            RETURN;
          END IF;
          IF cur_rows.rowscount < 1 THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := '更新业务时，供应商编码 ' || l_hm_apply_vendor.vendor_code ||
                       ' 不存在!';
            RETURN;
          END IF;
        ELSIF ls_operatetype = 'CREATE' THEN
          IF cur_rows.rowscount > 0 THEN
            IF cur_rows.create_apply_id IS NULL OR
               cur_rows.create_apply_id <> l_hm_apply_vendor.apply_id THEN
              ROLLBACK;
              retcode := 'E';
              retmsg  := '创建业务时，供应商编码 ' || l_hm_apply_vendor.vendor_code ||
                         ' 已存在!';
              RETURN;
            END IF;
          END IF;
        END IF;
      END LOOP;
      -----------------------------------------------
    END IF; -- ls_fieldvalue IS NOT NULL
    ----ACCOUNT_GROUP------------------------------end
  
    ----VENDOR_NAME------------------------------start
    --确认待校验的值，有业务相关性
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
  
    IF (ls_operatetype = 'CREATE') OR
       (ls_operatetype IN ('UPDATE', 'CHANGE') AND
       upper(l_hm_apply_vendor.VENDOR_NAME_x) = 'X') THEN
      ls_fieldvalue := l_hm_apply_vendor.VENDOR_NAME;
    ELSE
      ls_fieldvalue := '';
    END IF;
  
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      --名称长度
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        -- zhanglp 20120315 要求长度改为280
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
      ----2015年4月23日10:17:20
      ----刘志龙
      ---【增加 临时税号的校验  如果不在临时税号表中存在  便抛异常】
      --确认待校验的值，有业务相关性
      l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    
      IF (ls_operatetype = 'CREATE') OR
         (ls_operatetype IN ('UPDATE', 'CHANGE') AND
         upper(l_hm_apply_vendor.tax_code_x) = 'X') THEN
        ls_fieldvalue := l_hm_apply_vendor.tax_code;
      ELSE
        ls_fieldvalue := '';
      END IF;
      if ls_fieldvalue is not null and
         regexp_like(ls_fieldvalue, '^LS[0-9]{8}$') then
        select count(*)
          into li_count
          from HM_APPLY_VENDOR_TEMP_TAX_CODE a
         where a.ls_tax_code = ls_fieldvalue;
        if li_count = 0 then
          retcode := 'E';
          retmsg  := ls_fieldvalue || '，供应商临时税号不存在!';
          RETURN;
        end if;
      end if;
      --名称内容闸口
    
      --唯一性校验
      IF ls_operatetype = 'CREATE' THEN
        --供应商名称增加校验排除特殊符号其中包括：（）、()、&、-、―、_、/、<>、空格、*、#、@、！、？、|、%、：、；、\
        --cuiyj140812增加
        select translate(l_hm_apply_vendor.VENDOR_NAME,
                         '（）()-―_/<>*#@！？|%：；\ ',
                         '$')
          into vendorName
          from dual;
        select replace(vendorName, '$', '') into vendorName from dual;
        select replace(vendorName, '&', '') into vendorName from dual;
        --end
        if l_hm_apply_vendor.account_grp_code <> '1600' then
          FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                  MAX(vendor_code) vendor_code,
                                  MAX(create_apply_id) create_apply_id
                             FROM hm_vendors
                            WHERE replace(replace(translate(VENDOR_NAME,
                                                            '（）()-―_/<>*#@！？|%：；\ ',
                                                            '$'),
                                                  '$',
                                                  ''),
                                          '&',
                                          '') = vendorName
                              and ACCOUNT_GRP_CODE != '1600' --cuiyj审批流中1300只在1300中判断
                           /*and delete_flag = '0'*/
                           ) LOOP
            IF cur_rows.rowscount > 0 THEN
              --name 已存在
              IF cur_rows.create_apply_id IS NULL or
                 cur_rows.create_apply_id <> l_hm_apply_vendor.apply_id THEN
                retcode := 'E';
                retmsg  := '创建业务时，供应商名称 [' || vendorName || '] 已经存在于主数据 [' ||
                           cur_rows.vendor_code || ']!';
                RETURN;
              END IF;
            END IF;
          END LOOP;
        end if;
      
        IF l_hm_apply_vendor.account_grp_code <> '1600' then
          FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                  MIN(a.apply_id) apply_id,
                                  MIN(b.item_no) item_no,
                                  MIN(a.audit_flag) audit_flag
                             FROM hm_applys a, hm_apply_vendor b
                            WHERE a.apply_id = b.apply_id
                              AND replace(replace(translate(b.vendor_name,
                                                            '（）()-―_/<>*#@！？|%：；\ ',
                                                            '$'),
                                                  '$',
                                                  ''),
                                          '&',
                                          '') = vendorName
                              AND a.active_flag = '1'
                              AND a.delete_flag = '0'
                              and b.delete_flag = '0'
                              AND a.audit_flag < '3'
                              AND a.business_code LIKE 'VDR-CREATE%'
                                 /*                                AND (b.apply_id <>
                                 l_hm_apply_vendor.apply_id OR
                                 l_hm_apply_vendor.apply_id is null)*/
                              AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
            IF cur_rows.rowscount > 0 THEN
              --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
              FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                                  FROM hm_vendors
                                 WHERE replace(replace(translate(vendor_name,
                                                                 '（）()-―_/<>*#@！？|%：；\ ',
                                                                 '$'),
                                                       '$',
                                                       ''),
                                               '&',
                                               '') = vendorName
                                   and delete_flag = '0') LOOP
                IF not
                    (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
                  retcode := 'E';
                  retmsg  := '创建业务时，供应商名称 [' || vendorName || '] 已经存在于申请 [' ||
                             cur_rows.apply_id || '] 的明细行 [' ||
                             cur_rows.item_no || '] 中!';
                  RETURN;
                END IF;
              END LOOP;
              --end
            END IF;
          END LOOP;
        END IF;
        --如果是1400新增，必须判断供应商名称已经存在配置的公司代码 cuiyj140909
        if l_hm_apply_vendor.account_grp_code = '1400' then
          select count(1)
            into vendorname_count
            from hm_fnd_values s
           where s.value_set_id = 'CompanyCode'
             and s.delete_flag = '0'
             and s.value_meaning = l_hm_apply_vendor.vendor_name;
          if vendorname_count = 0 then
            retcode := 'E';
            retmsg  := '创建业务时，账户组是1400的供应商名称 [' || vendorName ||
                       '] 必须是海尔内部公司名称!';
            RETURN;
          end if;
        end if;
        --end
      
      END IF;
    
      --------------add 
      IF ls_operatetype = 'UPDATE' THEN
        --供应商名称增加校验排除特殊符号其中包括：（）、()、&、-、―、_、/、<>、空格、*、#、@、！、？、|、%、：、；、\
        --cuiyj140812增加
        select translate(l_hm_apply_vendor.VENDOR_NAME,
                         '（）()-―_/<>*#@！？|%：；\ ',
                         '$')
          into vendorName
          from dual;
        select replace(vendorName, '$', '') into vendorName from dual;
        select replace(vendorName, '&', '') into vendorName from dual;
        --end
        if l_hm_apply_vendor.account_grp_code <> '1600' then
          FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                  MAX(vendor_code) vendor_code,
                                  MAX(create_apply_id) create_apply_id
                             FROM hm_vendors
                            WHERE replace(replace(translate(vendor_name,
                                                            '（）()-―_/<>*#@！？|%：；\ ',
                                                            '$'),
                                                  '$',
                                                  ''),
                                          '&',
                                          '') = vendorName
                              and delete_flag = '0') LOOP
            IF cur_rows.rowscount > 0 THEN
              --name 已存在
              IF cur_rows.vendor_code <> l_hm_apply_vendor.vendor_code THEN
                retcode := 'E';
                retmsg  := '创建业务时，供应商名称 [' || vendorName || '] 已经存在于主数据 [' ||
                           cur_rows.vendor_code || ']!';
                RETURN;
              END IF;
            END IF;
          END LOOP;
        end if;
      
        IF l_hm_apply_vendor.account_grp_code <> '1600' then
          FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                  MIN(a.apply_id) apply_id,
                                  MIN(b.item_no) item_no
                             FROM hm_applys a, hm_apply_vendor b
                            WHERE a.apply_id = b.apply_id
                              AND replace(replace(translate(b.vendor_name,
                                                            '（）()-―_/<>*#@！？|%：；\ ',
                                                            '$'),
                                                  '$',
                                                  ''),
                                          '&',
                                          '') = vendorName
                              AND a.active_flag = '1'
                              AND a.delete_flag = '0'
                              and b.delete_flag = '0'
                              AND a.audit_flag < '3'
                              AND a.business_code LIKE 'VDR-UPDATE%'
                                 /*                                AND (b.apply_id <>
                                 l_hm_apply_vendor.apply_id OR
                                 l_hm_apply_vendor.apply_id is null)*/
                              AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
            IF cur_rows.rowscount > 0 THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商名称 [' || vendorName || '] 已经存在于申请 [' ||
                         cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
        END IF;
      end if;
    
      --END IF;
      -----------------------------------------------
    END IF; -- ls_fieldvalue IS NOT NULL
    ----VENDOR_NAME------------------------------end
  
    ----TAX_CODE------------------------------start
    --确认待校验的值，有业务相关性
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
  
    IF (ls_operatetype = 'CREATE') OR
       (ls_operatetype IN ('UPDATE') AND
       upper(l_hm_apply_vendor.tax_code_x) = 'X') THEN
      ls_fieldvalue := l_hm_apply_vendor.tax_code;
    ELSE
      ls_fieldvalue := '';
    END IF;
  
    --校验处理逻辑
    IF ls_fieldvalue IS NOT NULL THEN
      --增加税号长度限制
      IF ls_operatetype = 'CREATE' THEN
        if l_hm_apply_vendor.country = 'CN' then
          if length(ls_fieldvalue) not in
             ('10', '14', '15', '17', '18', '20') then
            retcode := 'E';
            retmsg  := '创建业务时，国家为CN时,供应商税号 [' || l_hm_apply_vendor.tax_code ||
                       '] 的长度必须是10、14、15、17、18或者20!';
            RETURN;
          end if;
        end if;
      elsif ls_operatetype = 'UPDATE' THEN
        select count(1), min(s.country)
          into lcl_count, lcl_country
          from hm_vendors s
         where s.vendor_code = l_hm_apply_vendor.vendor_code;
        if lcl_count > 0 then
          if lcl_country = 'CN' then
            if length(ls_fieldvalue) not in
               ('10', '14', '15', '17', '18', '20') then
              retcode := 'E';
              retmsg  := '更新业务时，国家为CN时,供应商税号 [' ||
                         l_hm_apply_vendor.tax_code ||
                         '] 的长度必须是10、14、15、17、18或者20!';
              RETURN;
            end if;
          end if;
        end if;
      end if;
      --end
      --唯一性校验   or ls_operatetype = 'UPDATE'
      IF ls_operatetype = 'CREATE' THEN
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MAX(vendor_code) vendor_code,
                                MAX(create_apply_id) create_apply_id
                           FROM hm_vendors
                          WHERE tax_code = l_hm_apply_vendor.tax_code
                         /*and delete_flag = '0'*/
                         ) LOOP
          IF cur_rows.rowscount > 0 THEN
            --name 已存在
            IF cur_rows.create_apply_id IS NULL or
               cur_rows.create_apply_id <> l_hm_apply_vendor.apply_id THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于主数据 [' || cur_rows.vendor_code || ']!';
              RETURN;
            END IF;
          END IF;
        END LOOP;
      
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MIN(a.apply_id) apply_id,
                                MIN(b.item_no) item_no,
                                MIN(a.audit_flag) audit_flag
                           FROM hm_applys a, hm_apply_vendor b
                          WHERE a.apply_id = b.apply_id
                            AND b.tax_code = l_hm_apply_vendor.tax_code
                            AND a.active_flag = '1'
                            AND a.delete_flag = '0'
                            and b.delete_flag = '0'
                            AND a.audit_flag < '3'
                            AND a.business_code LIKE 'VDR-CREATE%'
                               /*                                AND (b.apply_id <>
                               l_hm_apply_vendor.apply_id OR
                               l_hm_apply_vendor.apply_id is null)*/
                            AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
          IF cur_rows.rowscount > 0 THEN
            --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
            FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                                FROM hm_vendors
                               WHERE tax_code = l_hm_apply_vendor.tax_code
                                 and delete_flag = '0') LOOP
              IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
                retcode := 'E';
                retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                           '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                           cur_rows.item_no || '] 中!';
                RETURN;
              END IF;
            END LOOP;
            --end
          
          END IF;
        END LOOP;
        --END IF;
      
        ----add    
      
      END IF;
      -----------------------------------------------
    
      IF ls_operatetype = 'UPDATE' THEN
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MAX(vendor_code) vendor_code,
                                MAX(create_apply_id) create_apply_id
                           FROM hm_vendors
                          WHERE tax_code = l_hm_apply_vendor.tax_code
                            and delete_flag = '0') LOOP
          IF cur_rows.rowscount > 0 THEN
            --name 已存在
            IF cur_rows.vendor_code <> l_hm_apply_vendor.vendor_code THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于主数据 [' || cur_rows.vendor_code || ']!';
              RETURN;
            END IF;
          END IF;
        END LOOP;
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MIN(a.apply_id) apply_id,
                                MIN(b.item_no) item_no
                           FROM hm_applys a, hm_apply_vendor b
                          WHERE a.apply_id = b.apply_id
                            AND b.tax_code = l_hm_apply_vendor.tax_code
                            AND a.active_flag = '1'
                            AND a.delete_flag = '0'
                            and b.delete_flag = '0'
                            AND a.audit_flag < '3'
                            AND a.business_code LIKE 'VDR-UPDATE%'
                               /*                                AND (b.apply_id <>
                               l_hm_apply_vendor.apply_id OR
                               l_hm_apply_vendor.apply_id is null)*/
                            AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
          IF cur_rows.rowscount > 0 THEN
            retcode := 'E';
            retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                       '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                       cur_rows.item_no || '] 中!';
            RETURN;
          END IF;
        END LOOP;
        --END IF;
      end if;
    
    END IF; -- ls_fieldvalue IS NOT NULL
    ----TAX_CODE------------------------------end
  
    --0 基础校验(必输性校验)
  
    str_sql := ' select * from hm_business_fields ' ||
               ' where business_code = :ls_businesscode ' || --'''|| ls_businesscode_create ||''' '||
               ' AND active_flag =''1'' AND must_input_flag =''1'' AND delete_flag =''0'' ';
  
    IF l_hm_business.refence_apply_table = 'HM_APPLY_VENDOR' THEN
      str_sql := str_sql || ' AND ( ';
      str_sql := str_sql || '      ( ''' || l_hm_apply_vendor.view_base_x ||
                 ''' = ''X'' AND view_name = ''BASE'' ) OR ';
      str_sql := str_sql || '      ( ''' ||
                 l_hm_apply_vendor.view_company_x ||
                 ''' = ''X'' AND view_name = ''COMPANY'' ) OR ';
      str_sql := str_sql || '      ( ''' ||
                 l_hm_apply_vendor.view_purchase_x ||
                 ''' = ''X'' AND view_name = ''PURCHASE'' ) ';
      str_sql := str_sql || '     ) ';
    END IF;
  
    str_sql := str_sql || ' ORDER BY order_by ';
  
    retmsg := '';
  
    ----COMMIT;
  
    OPEN cur_type_rows FOR str_sql
      USING ls_businesscode;
    LOOP
      FETCH cur_type_rows
        INTO l_hm_business_fields;
      EXIT WHEN cur_type_rows%NOTFOUND;
    
      IF upper(l_hm_business_fields.field_name) = 'VENDOR_CODE' AND
         upper(ls_operatetype) IN ('UPDATE', 'EXTEND', 'CHANGE') THEN
        quy_sql := ' SELECT ' || l_hm_business_fields.field_name || ', ' ||
                   ' ''X'' ' || l_hm_business_fields.field_name || '_x ' ||
                   ' INTO :ls_value, :ls_value_x FROM hm_apply_vendor' ||
                   in_tablename_suffix || ' WHERE row_id = :in_row_id';
      ELSE
        quy_sql := ' SELECT ' || l_hm_business_fields.field_name || ', ' ||
                   l_hm_business_fields.field_name || '_x ' ||
                   ' INTO :ls_value, :ls_value_x FROM hm_apply_vendor' ||
                   in_tablename_suffix || ' WHERE row_id = :in_row_id';
      END IF;
    
      EXECUTE IMMEDIATE quy_sql
        INTO ls_value, ls_value_x
        USING l_hm_apply_vendor.row_id;
    
      --初始化临时变量
      l_retcode_temp := 'S';
    
      IF upper(ls_operatetype) IN ('CREATE', 'EXTEND') THEN
        IF TRIM(ls_value) IS NULL THEN
          l_retcode_temp := 'E';
        END IF;
      ELSIF upper(ls_operatetype) IN ('UPDATE', 'CHANGE') THEN
        --否则为更新，只需检查相应字段即可
        IF TRIM(ls_value) IS NULL AND TRIM(ls_value_x) = 'X' THEN
          l_retcode_temp := 'E';
        END IF;
      END IF;
    
      IF l_retcode_temp = 'E' THEN
        retcode := 'E';
        retmsg  := retmsg || ' / ' || l_hm_business_fields.field_label_en;
      END IF;
    
    END LOOP;
    CLOSE cur_type_rows;
  
    IF retcode = 'E' THEN
      retmsg := l_hm_apply_vendor.VENDOR_NAME || ', 以下字段值在此业务中不能为空：' ||
                retmsg;
      RETURN;
    END IF;
  
    --1 特殊业务校验(与自身数据相关性)-----------------
  
    for cur_business_fields in (select *
                                  from hm_business_fields
                                 where business_code = ls_businesscode
                                   and audit_version = '0000'
                                   and active_flag = '1'
                                   and delete_flag = '0'
                                   and field_name not in
                                       ('ACCOUNT_GRP_CODE',
                                        'VENDOR_CODE',
                                        'VENDOR_NAME')
                                 order by order_by) loop
      in_checkname := cur_business_fields.field_name;
      ----1.1 此处进行CodeList准确性校验
    
      ----COUNTRY
      IF in_checkname = 'COUNTRY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
      
        ls_fieldvalue := l_hm_apply_vendor.COUNTRY;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode, 'COUNTRY') LOOP
            ls_field_label_en := cur_rows.field_label_en;
          END LOOP;
        
          comm_util.prc_getfndvalues(ls_field_label_en,
                                     ls_fieldvalue,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'COUNTRY'
    
      ----REGION
      IF in_checkname = 'REGION' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
      
        ls_fieldvalue := l_hm_apply_vendor.REGION;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode, 'REGION') LOOP
            ls_field_label_en := cur_rows.field_label_en;
          END LOOP;
        
          comm_util.prc_getfndvalues(ls_field_label_en,
                                     ls_fieldvalue,
                                     'Region',
                                     l_hm_apply_vendor.country,
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'REGION'
    
      ----LANGUAGE
      IF in_checkname = 'LANGUAGE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.LANGUAGE := upper(trim(l_hm_apply_vendor.LANGUAGE));
      
        ls_fieldvalue := l_hm_apply_vendor.LANGUAGE;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode, 'LANGUAGE') LOOP
            ls_field_label_en := cur_rows.field_label_en;
          END LOOP;
        
          comm_util.prc_getfndvalues(ls_field_label_en,
                                     ls_fieldvalue,
                                     'LanguageType',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'LANGUAGE'
    
      ----VENDOR_TITLE
      IF in_checkname = 'VENDOR_TITLE' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.Vendor_Title := upper(trim(l_hm_apply_vendor.VENDOR_TITLE));
      
        ls_fieldvalue := l_hm_apply_vendor.VENDOR_TITLE;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          ls_field_label_en := '';
          FOR cur_rows IN cur_field_label(ls_businesscode, 'VENDOR_TITLE') LOOP
            ls_field_label_en := cur_rows.field_label_en;
          END LOOP;
        
          comm_util.prc_getfndvalues(ls_field_label_en,
                                     ls_fieldvalue,
                                     'VendorTitle',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'VENDOR_TITLE'
    
      ----1.2 此处进行特殊闸口校验
    
      ----STREET
      IF in_checkname = 'STREET_ROOM' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
      
        IF (ls_operatetype = 'CREATE') OR
           (ls_operatetype IN ('UPDATE', 'CHANGE') AND
           upper(l_hm_apply_vendor.STREET_ROOM_x) = 'X') THEN
          ls_fieldvalue := l_hm_apply_vendor.STREET_ROOM;
        ELSE
          ls_fieldvalue := '';
        END IF;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 60 THEN
            retcode := 'E';
            retmsg  := '供应商的街道信息长度超过60!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'STREET_ROOM'
    
      ----POSTAL_CODE_CITY
      IF in_checkname = 'POSTAL_CODE_CITY' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
      
        IF (ls_operatetype = 'CREATE') OR
           (ls_operatetype IN ('UPDATE', 'CHANGE') AND
           upper(l_hm_apply_vendor.POSTAL_CODE_CITY_x) = 'X') THEN
          ls_fieldvalue := l_hm_apply_vendor.POSTAL_CODE_CITY;
        ELSE
          ls_fieldvalue := '';
        END IF;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) <> 6 THEN
            retcode := 'E';
            retmsg  := '供应商的邮政编码信息长度不等于6!';
            RETURN;
          END IF;
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'POSTAL_CODE_CITY'
    
      ----SEARCH_TERMS
      IF in_checkname = 'SEARCH_TERM' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.Search_Term := upper(trim(l_hm_apply_vendor.SEARCH_TERM));
      
        IF (ls_operatetype = 'CREATE') OR
           (ls_operatetype IN ('UPDATE', 'CHANGE') AND
           upper(l_hm_apply_vendor.search_term_x) = 'X') THEN
          ls_fieldvalue := l_hm_apply_vendor.search_term;
        ELSE
          ls_fieldvalue := '';
        END IF;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 10 THEN
            retcode := 'E';
            retmsg  := '供应商检索项信息长度超过10!';
            RETURN;
          END IF;
        
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'SEARCH_TERM'
    
      ----TELEPHONE
      IF in_checkname = 'PHONE_NUMBER' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
      
        IF (ls_operatetype = 'CREATE') OR
           (ls_operatetype IN ('UPDATE', 'CHANGE') AND
           upper(l_hm_apply_vendor.PHONE_NUMBER_x) = 'X') THEN
          ls_fieldvalue := l_hm_apply_vendor.PHONE_NUMBER;
        ELSE
          ls_fieldvalue := '';
        END IF;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 16 THEN
            retcode := 'E';
            retmsg  := '供应商电话信息长度超过16!';
            RETURN;
          END IF;
        
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'PHONE_NUMBER'
    
      ----FAX
      IF in_checkname = 'FAX_NUMBER' THEN
        --确认待校验的值，有业务相关性
        l_hm_apply_vendor.fax_number := upper(trim(l_hm_apply_vendor.FAX_NUMBER));
      
        IF (ls_operatetype = 'CREATE') OR
           (ls_operatetype IN ('UPDATE', 'CHANGE') AND
           upper(l_hm_apply_vendor.FAX_NUMBER_x) = 'X') THEN
          ls_fieldvalue := l_hm_apply_vendor.FAX_NUMBER;
        ELSE
          ls_fieldvalue := '';
        END IF;
      
        --校验处理逻辑
        IF ls_fieldvalue IS NOT NULL THEN
          -----------------------------------------------
          IF length(TRIM(ls_fieldvalue)) > 16 THEN
            retcode := 'E';
            retmsg  := '供应商传真信息长度超过16!';
            RETURN;
          END IF;
        
          -----------------------------------------------
        END IF; -- ls_fieldvalue IS NOT NULL
      END IF; -- in_checkname = 'FAX_NUMBER'
    
    --------------------------------------------------------------------------------------
    ------此处以上不断添加字段的验证闸口，字段顺序无需考虑，但最好保证一个字段只出现一次效验代码段
    --------------------------------------------------------------------------------------      
    end loop; --all field
  
    ----1.3 此处进行特别校验        
  
    --数据微调反馈
    v_hm_apply_vendor := l_hm_apply_vendor;
  
    --创建业务发主数据临时码
    if v_hm_apply_vendor.view_base_x = 'X' THEN
      prc_apply_tmpcode('VENDOR_CODE', v_hm_apply_vendor, retcode, retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
    END IF;
  
    --用v_hm_apply_vendor更新数据库
    prc_input_type2db('', v_hm_apply_vendor, retcode, retmsg);
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      --retmsg  := 'The need for input validation error:' || SQLERRM;
      retmsg := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                               0);
  END prc_input_allcheck;

  /*\****************************************************************
  功能描述：根据批次号将导入的数据从hm_apply_vendor_IMP导入hm_apply_vendor
            及HM_APPLYS中
  作者：    zhangbiao
  时间：    2009-03-26       
       
  输入参数说明： IN_ACTION_BATCH_ID    批次号码
                 IN_APPLY_ID           申请单ID
                 IN_TABLE_NAME         导入表名
                 IN_COLUMN_NAME        导入字段名
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。首先判断必输项（根据HM_BUSINESS_FIELDS_REQUIED获取必输字段）。
       2。判断是全部导入还是单字段导入（IN_COLUMN_NAME非空则为单字段导入）。
       3。根据输入参数IN_APPLY_ID判断是更新还是新增。
       4。对于新增数据（IN_APPLY_ID为空）,分别向HM_APPLYS和hm_apply_vendor分发数据。
       5。对于更新数据（IN_APPLY_ID非空）,仅向hm_apply_vendor分发数据,同时更新HM_APPLYS表。
       6,内部调用 prc_input_allcheck
  ****************************************************************\
  PROCEDURE prc_applys_import(in_action_batch_id IN VARCHAR2,
                              in_apply_id        IN VARCHAR2,
                              in_business_code   IN VARCHAR2,
                              in_applyby         IN VARCHAR2,
                              in_applyemail      IN VARCHAR2,
                              retcode            OUT VARCHAR2,
                              retmsg             OUT VARCHAR2) IS
    str_sql VARCHAR2(250); --查询SQL
    --str_rowid VARCHAR2(50); --ROWID
    TYPE cur_type IS REF CURSOR;
    cur_view_table        cur_type;
    l_apply               hm_applys%ROWTYPE;
    l_apply_vendor        hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_hm_apply_vendor_tpt hm_apply_vendor_all_tmp%ROWTYPE;
    l_apply_vendor_all        hm_apply_vendor_all_imp%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_apply_vendor_bank     hm_apply_vendor_bank%ROWTYPE; 
    l_apply_vendor_company  hm_apply_vendor_company%ROWTYPE; 
  
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
    rows_vendors INTEGER := 0;
    li_count     INTEGER := 0;
    li_times     INTEGER := 0;
    ls_applyid   VARCHAR2(20);   
    ls_version VARCHAR2(4);  
    li_countdefault INTEGER := 0;
  
  
  BEGIN
  
    retcode := 'S';
    retmsg  := 'Import Successful!';
  
    str_sql := 'select * from hm_apply_vendor_all_imp where action_batch_id = ''' ||
               in_action_batch_id || '''';
    IF in_business_code IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Type can''t be empty!';
      RETURN;
    END IF;
  
    SELECT COUNT(*)
      INTO li_countdefault
      FROM hm_apply_vendor_all_tmp
     WHERE business_code = in_business_code
       AND active_flag = '1';
    IF li_countdefault > 0 THEN
      --存在需要默认的值
      SELECT DISTINCT *
        INTO l_hm_apply_vendor_tpt
        FROM hm_apply_vendor_all_tmp
       WHERE business_code = in_business_code
         AND active_flag = '1';
    
      -----------------------------首先更新临时表中的默认值  
    
      UPDATE hm_apply_vendor_all_imp
         SET VENDOR_TITLE           = decode(VENDOR_TITLE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_TITLE,
                                             VENDOR_TITLE),
             VENDOR_CODE            = decode(VENDOR_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_CODE,
                                             VENDOR_CODE),
             VENDOR_NAME            = decode(VENDOR_NAME,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_NAME,
                                             VENDOR_NAME),
             BIDDER_NO              = decode(BIDDER_NO,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BIDDER_NO,
                                             BIDDER_NO),
             SEARCH_TERM            = decode(SEARCH_TERM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SEARCH_TERM,
                                             SEARCH_TERM),
             STREET_ROOM            = decode(STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STREET_ROOM,
                                             STREET_ROOM),
             POSTAL_CODE_CITY       = decode(POSTAL_CODE_CITY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.POSTAL_CODE_CITY,
                                             POSTAL_CODE_CITY),
             COUNTRY                = decode(COUNTRY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COUNTRY,
                                             COUNTRY),
             REGION                 = decode(REGION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.REGION,
                                             REGION),
             PHONE_NUMBER           = decode(PHONE_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PHONE_NUMBER,
                                             PHONE_NUMBER),
             FAX_NUMBER             = decode(FAX_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.FAX_NUMBER,
                                             FAX_NUMBER),
             TAX_CODE               = decode(TAX_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TAX_CODE,
                                             TAX_CODE),
             ACCOUNT_GRP_CODE       = decode(ACCOUNT_GRP_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.ACCOUNT_GRP_CODE,
                                             ACCOUNT_GRP_CODE),
             EXTERNAL_MANUFACTURER  = decode(EXTERNAL_MANUFACTURER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXTERNAL_MANUFACTURER,
                                             EXTERNAL_MANUFACTURER),
             INTL_AREA_CODE         = decode(INTL_AREA_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.INTL_AREA_CODE,
                                             INTL_AREA_CODE),
             TRANS_AGENT_GRP        = decode(TRANS_AGENT_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TRANS_AGENT_GRP,
                                             TRANS_AGENT_GRP),
             SERVICE_AGENT_PROC_GRP = decode(SERVICE_AGENT_PROC_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SERVICE_AGENT_PROC_GRP,
                                             SERVICE_AGENT_PROC_GRP),
             STATION                = decode(STATION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STATION,
                                             STATION),
             CUSTOMER_CODE          = decode(CUSTOMER_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CUSTOMER_CODE,
                                             CUSTOMER_CODE),
             VENDOR_HQ              = decode(VENDOR_HQ,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_HQ,
                                             VENDOR_HQ),
             CITY_STREET_ROOM       = decode(CITY_STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CITY_STREET_ROOM,
                                             CITY_STREET_ROOM),
             LANGUAGE               = decode(LANGUAGE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.LANGUAGE,
                                             LANGUAGE),
             COMPANY_SHARE          = decode(COMPANY_SHARE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANY_SHARE,
                                             COMPANY_SHARE),
             BU                     = decode(BU,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BU,
                                             BU),
             PL                     = decode(PL,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PL,
                                             PL),
             EXPIRY_DATE            = decode(EXPIRY_DATE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXPIRY_DATE,
                                             EXPIRY_DATE),
             COMPANYCODE_LIST       = decode(COMPANYCODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANYCODE_LIST,
                                             COMPANYCODE_LIST),
             PURCHASECODE_LIST      = decode(PURCHASECODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PURCHASECODE_LIST,
                                             PURCHASECODE_LIST)
       WHERE action_batch_id = in_action_batch_id;
    
      -----------------------------  
    END IF;
  
    OPEN cur_view_table FOR str_sql;
    LOOP
      <<loops>>
      FETCH cur_view_table
        INTO l_apply_vendor_all;
      rows_vendors := cur_view_table%ROWCOUNT;
      EXIT WHEN cur_view_table%NOTFOUND;
    --l_apply_vendor_all是一个总的导入表里面包含基本视图 公司视图和银行视图 现在分别像 hm_apply_vendor,hm_apply_bank,hm_apply_company中插入数据121009cuiyj
    --由于供应商申请单在三个表中与物料客户不一样，所以最后临时建了个汇总表再分别往各个分表插数据
                                         
          prc_employee2apply_trans(l_apply_vendor_all.employee_no,l_apply_vendor,retcode,retmsg);
    --基本视图导入表
          l_apply_vendor.ROW_ID:=comm_util.func_new_rowid();
          l_apply_vendor.CREATED_BY:=l_apply_vendor_all.CREATED_BY;
          l_apply_vendor.CREATED:=l_apply_vendor_all.CREATED;
          l_apply_vendor.LAST_UPD_BY:=l_apply_vendor_all.LAST_UPD_BY;
          l_apply_vendor.LAST_UPD:=l_apply_vendor_all.LAST_UPD;
          l_apply_vendor.MODIFICATION_NUM:=l_apply_vendor_all.MODIFICATION_NUM;
          l_apply_vendor.DELETE_FLAG:=l_apply_vendor_all.DELETE_FLAG;
          l_apply_vendor.ACTIVE_FLAG:=l_apply_vendor_all.ACTIVE_FLAG;
          l_apply_vendor.ACTION_BATCH_ID:=l_apply_vendor_all.ACTION_BATCH_ID;
          l_apply_vendor.BUSINESS_CODE:=l_apply_vendor_all.BUSINESS_CODE;
          l_apply_vendor.MASTER_TYPE:=l_apply_vendor_all.MASTER_TYPE;
          l_apply_vendor.OPERATE_TYPE:=l_apply_vendor_all.OPERATE_TYPE;
          l_apply_vendor.BUSINESS_TYPE:=l_apply_vendor_all.BUSINESS_TYPE;
          l_apply_vendor.INNER_OUTER_FLAG:=l_apply_vendor_all.INNER_OUTER_FLAG;
          l_apply_vendor.VIEW_TYPE:=l_apply_vendor_all.VIEW_TYPE;
          l_apply_vendor.DEPT_CODE:=l_apply_vendor_all.DEPT_CODE;
          l_apply_vendor.APPLY_ID:=l_apply_vendor_all.APPLY_ID;
          l_apply_vendor.ITEM_NO:=l_apply_vendor_all.ITEM_NO;
          l_apply_vendor.VIEW_BASE_X:=l_apply_vendor_all.VIEW_BASE_X;
          l_apply_vendor.VIEW_BANK_X:=l_apply_vendor_all.VIEW_BANK_X;
          l_apply_vendor.VIEW_COMPANY_X:=l_apply_vendor_all.VIEW_COMPANY_X;
          l_apply_vendor.VIEW_PURCHASE_X:=l_apply_vendor_all.VIEW_PURCHASE_X;
          l_apply_vendor.VENDOR_TITLE_X:=l_apply_vendor_all.VENDOR_TITLE_X;
          l_apply_vendor.VENDOR_CODE_X:=l_apply_vendor_all.VENDOR_CODE_X;
          l_apply_vendor.VENDOR_NAME_X:=l_apply_vendor_all.VENDOR_NAME_X;
          l_apply_vendor.BIDDER_NO:=l_apply_vendor_all.BIDDER_NO;
          l_apply_vendor.BIDDER_NO_X:=l_apply_vendor_all.BIDDER_NO_X;
          l_apply_vendor.SEARCH_TERM_X:=l_apply_vendor_all.SEARCH_TERM_X;
          l_apply_vendor.STREET_ROOM_X:=l_apply_vendor_all.STREET_ROOM_X;
          l_apply_vendor.POSTAL_CODE_CITY_X:=l_apply_vendor_all.POSTAL_CODE_CITY_X;
          l_apply_vendor.COUNTRY_X:=l_apply_vendor_all.COUNTRY_X;
          l_apply_vendor.REGION_X:=l_apply_vendor_all.REGION_X;
          l_apply_vendor.PHONE_NUMBER_X:=l_apply_vendor_all.PHONE_NUMBER_X;
          l_apply_vendor.FAX_NUMBER:=l_apply_vendor_all.FAX_NUMBER;
          l_apply_vendor.FAX_NUMBER_X:=l_apply_vendor_all.FAX_NUMBER_X;
          l_apply_vendor.TAX_CODE_X:=l_apply_vendor_all.TAX_CODE_X;
          l_apply_vendor.ACCOUNT_GRP_CODE_X:=l_apply_vendor_all.ACCOUNT_GRP_CODE_X;
          l_apply_vendor.EXTERNAL_MANUFACTURER:=l_apply_vendor_all.EXTERNAL_MANUFACTURER;
          l_apply_vendor.EXTERNAL_MANUFACTURER_X:=l_apply_vendor_all.EXTERNAL_MANUFACTURER_X;
          l_apply_vendor.INTL_AREA_CODE:=l_apply_vendor_all.INTL_AREA_CODE;
          l_apply_vendor.INTL_AREA_CODE_X:=l_apply_vendor_all.INTL_AREA_CODE_X;
          l_apply_vendor.TRANS_AGENT_GRP:=l_apply_vendor_all.TRANS_AGENT_GRP;
          l_apply_vendor.TRANS_AGENT_GRP_X:=l_apply_vendor_all.TRANS_AGENT_GRP_X;
          l_apply_vendor.SERVICE_AGENT_PROC_GRP:=l_apply_vendor_all.SERVICE_AGENT_PROC_GRP;
          l_apply_vendor.SERVICE_AGENT_PROC_GRP_X:=l_apply_vendor_all.SERVICE_AGENT_PROC_GRP_X;
          l_apply_vendor.STATION:=l_apply_vendor_all.STATION;
          l_apply_vendor.STATION_X:=l_apply_vendor_all.STATION_X;
          l_apply_vendor.CUSTOMER_CODE:=l_apply_vendor_all.CUSTOMER_CODE;
          l_apply_vendor.CUSTOMER_CODE_X:=l_apply_vendor_all.CUSTOMER_CODE_X;
          l_apply_vendor.VENDOR_HQ:=l_apply_vendor_all.VENDOR_HQ;
          l_apply_vendor.VENDOR_HQ_X:=l_apply_vendor_all.VENDOR_HQ_X;
          l_apply_vendor.CITY_STREET_ROOM_X:=l_apply_vendor_all.CITY_STREET_ROOM_X;
          l_apply_vendor.LANGUAGE_X:=l_apply_vendor_all.LANGUAGE_X;
          l_apply_vendor.COMPANY_SHARE:=l_apply_vendor_all.COMPANY_SHARE;
          l_apply_vendor.COMPANY_SHARE_X:=l_apply_vendor_all.COMPANY_SHARE_X;
          l_apply_vendor.BU:=l_apply_vendor_all.BU;
          l_apply_vendor.BU_X:=l_apply_vendor_all.BU_X;
          l_apply_vendor.PL:=l_apply_vendor_all.PL;
          l_apply_vendor.PL_X:=l_apply_vendor_all.PL_X;
          l_apply_vendor.EXPIRY_DATE:=l_apply_vendor_all.EXPIRY_DATE;
          l_apply_vendor.EXPIRY_DATE_X:=l_apply_vendor_all.EXPIRY_DATE_X;
          l_apply_vendor.COMPANYCODE_LIST:=l_apply_vendor_all.COMPANYCODE_LIST;
          l_apply_vendor.COMPANYCODE_LIST_X:=l_apply_vendor_all.COMPANYCODE_LIST_X;
          l_apply_vendor.PURCHASECODE_LIST:=l_apply_vendor_all.PURCHASECODE_LIST;
          l_apply_vendor.PURCHASECODE_LIST_X:=l_apply_vendor_all.PURCHASECODE_LIST_X;
          l_apply_vendor.VENDOR_CODE_TEMP:=l_apply_vendor_all.VENDOR_CODE_TEMP;
          l_apply_vendor.FINANCE_BUSINESS_FLAG:=l_apply_vendor_all.FINANCE_BUSINESS_FLAG;
  
    
    --公司视图导入表
          l_apply_vendor_company.ROW_ID:=comm_util.func_new_rowid();
          l_apply_vendor_company.CREATED_BY:=l_apply_vendor_all.CREATED_BY;
          l_apply_vendor_company.CREATED:=l_apply_vendor_all.CREATED;
          l_apply_vendor_company.LAST_UPD_BY:=l_apply_vendor_all.LAST_UPD_BY;
          l_apply_vendor_company.LAST_UPD:=l_apply_vendor_all.LAST_UPD;
          l_apply_vendor_company.MODIFICATION_NUM:=l_apply_vendor_all.MODIFICATION_NUM;
          l_apply_vendor_company.DELETE_FLAG:=l_apply_vendor_all.DELETE_FLAG;
          l_apply_vendor_company.ACTIVE_FLAG:=l_apply_vendor_all.ACTIVE_FLAG;
          l_apply_vendor_company.REMARK:=l_apply_vendor_all.REMARK;
          l_apply_vendor_company.ACTION_BATCH_ID:=l_apply_vendor_all.ACTION_BATCH_ID;
          l_apply_vendor_company.APPLY_VENDOR_ID:=l_apply_vendor.ROW_ID;
          l_apply_vendor_company.COMPANY_CODE:=l_apply_vendor_all.comp_COMPANY_CODE;
          l_apply_vendor_company.HQ:=l_apply_vendor_all.comp_HQ;
          l_apply_vendor_company.REFERENCE_ACCOUNT_NUMBER:=l_apply_vendor_all.comp_REFERENCE_ACCOUNT_NUMBER;
          l_apply_vendor_company.SEQUENCE_NO:=l_apply_vendor_all.comp_SEQUENCE_NO;
          l_apply_vendor_company.CASH_MGT_GROUP:=l_apply_vendor_all.comp_CASH_MGT_GROUP;
          l_apply_vendor_company.ACCOUNTING_CUSTOMER:=l_apply_vendor_all.comp_ACCOUNTING_CUSTOMER;
          l_apply_vendor_company.PAYMENT_TERM_COMPANY:=l_apply_vendor_all.comp_PAYMENT_TERM_COMPANY;
          l_apply_vendor_company.PAYMENT_METHOD:=l_apply_vendor_all.comp_PAYMENT_METHOD;
          l_apply_vendor_company.TOLERANCE_GROUP:=l_apply_vendor_all.comp_TOLERANCE_GROUP;
          l_apply_vendor_company.ACCOUNT_REMARK:=l_apply_vendor_all.comp_ACCOUNT_REMARK;
          l_apply_vendor_company.RECONCILE_ACCOUNT:=l_apply_vendor_all.comp_RECONCILE_ACCOUNT;
          l_apply_vendor_company.ROW_STATUS:=l_apply_vendor_all.comp_ROW_STATUS;
          l_apply_vendor_company.OLD_ROW_ID:=l_apply_vendor_all.comp_OLD_ROW_ID;
  
          
    --银行视图导入表
          l_apply_vendor_bank.ROW_ID:=comm_util.func_new_rowid();
          l_apply_vendor_bank.CREATED_BY:=l_apply_vendor_all.CREATED_BY;
          l_apply_vendor_bank.CREATED:=l_apply_vendor_all.CREATED;
          l_apply_vendor_bank.LAST_UPD_BY:=l_apply_vendor_all.LAST_UPD_BY;
          l_apply_vendor_bank.LAST_UPD:=l_apply_vendor_all.LAST_UPD;
          l_apply_vendor_bank.MODIFICATION_NUM:=l_apply_vendor_all.MODIFICATION_NUM;
          l_apply_vendor_bank.DELETE_FLAG:=l_apply_vendor_all.DELETE_FLAG;
          l_apply_vendor_bank.ACTIVE_FLAG:=l_apply_vendor_all.ACTIVE_FLAG;
          l_apply_vendor_bank.REMARK:=l_apply_vendor_all.REMARK;
          l_apply_vendor_bank.ACTION_BATCH_ID:=l_apply_vendor_all.ACTION_BATCH_ID;
          l_apply_vendor_bank.APPLY_VENDOR_ID:=l_apply_vendor.ROW_ID;
          l_apply_vendor_bank.ACCOUNT_HOLDER_NAME:=l_apply_vendor_all.BANK_ACCOUNT_HOLDER_NAME;
          l_apply_vendor_bank.BANK_COUNTRY:=l_apply_vendor_all.BANK_BANK_COUNTRY;
          l_apply_vendor_bank.BANK_ACCOUNT_NUM:=l_apply_vendor_all.BANK_BANK_ACCOUNT_NUM;
          l_apply_vendor_bank.BANK_NAME:=l_apply_vendor_all.BANK_BANK_NAME;
          l_apply_vendor_bank.BANK_BRANCH_CODE:=l_apply_vendor_all.BANK_BANK_BRANCH_CODE;
          l_apply_vendor_bank.ACTIVE_RANGE:=l_apply_vendor_all.BANK_ACTIVE_RANGE;
          l_apply_vendor_bank.ACTIVE_CLASS:=l_apply_vendor_all.BANK_ACTIVE_CLASS;
          l_apply_vendor_bank.ACTIVE_DESC:=l_apply_vendor_all.BANK_ACTIVE_DESC;
          l_apply_vendor_bank.ROW_STATUS:=l_apply_vendor_all.BANK_ROW_STATUS;
          l_apply_vendor_bank.OLD_ROW_ID:=l_apply_vendor_all.BANK_OLD_ROW_ID;
  
    --end
      ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)      
      prc_input_allcheck(in_row_id                  => '',
                         in_tablename_suffix        => '_IMP',
                         v_hm_apply_vendor          => l_apply_vendor,
                         v_hm_apply_vendor_bank     => t_apply_vendor_bank,
                         v_hm_apply_vendor_company  => t_apply_vendor_company,
                         v_hm_apply_vendor_purchase => t_apply_vendor_purchase,
                         retcode                    => retcode,
                         retmsg                     => retmsg);
      IF retcode = 'E' THEN
        UPDATE hm_action_batch_item
           SET success_flag = '0',
               remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                              ' import error: ' || retmsg
         WHERE action_batch_id = l_apply_vendor.action_batch_id
           AND master_row_id = l_apply_vendor.row_id;
        RETURN;
        -- GOTO loops;        
      END IF;
    
      \*此处替换掉众多校验...*\
    
      ---------------------------------------------此处进行版次获取
      SELECT MAX(current_audit_version)
        INTO ls_version
        FROM hm_business_audit
       WHERE business_code = in_business_code
         AND active_flag = '1'
         AND delete_flag = '0';
      IF ls_version IS NULL THEN
        retcode := 'E';
        retmsg  := 'Get Audit Version failure !';
        UPDATE hm_action_batch_item
           SET success_flag = '0',
               remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                              ' import error: ' || retmsg
         WHERE action_batch_id = l_apply_vendor.action_batch_id
           AND master_row_id = l_apply_vendor.row_id;
        RETURN;
      END IF;
    
      -------------------------------End 20090514 By LIYI-----------------------------------------------
      IF in_apply_id IS NULL THEN
      
        --说明为新增导入，需要分别向HM_APPLYS和hm_apply_vendor分发数据
        BEGIN
          IF li_times = 0 THEN
            --仅插入一笔申请单主表数据
            retmsg := l_apply_vendor.business_code;
            --str_rowid  := comm_util.func_new_rowid();
            ls_applyid := comm_util.func_new_applyid('VDR');
          
            --
            l_apply.row_id           := comm_util.func_new_rowid();
            l_apply.created_by       := l_apply_vendor.created_by;
            l_apply.created          := l_apply_vendor.created;
            l_apply.last_upd_by      := l_apply_vendor.last_upd_by;
            l_apply.last_upd         := l_apply_vendor.last_upd;
            l_apply.modification_num := 0;
            l_apply.delete_flag      := '0';
            l_apply.active_flag      := '1';
            l_apply.remark           := '导入创建';
            l_apply.apply_id         := ls_applyid;
            --l_apply.parent_apply_id := '';
            l_apply.master_type           := l_apply_vendor.master_type;
            l_apply.operate_type          := l_apply_vendor.operate_type;
            l_apply.business_code         := in_business_code;
            l_apply.current_audit_version := ls_version;
            if l_apply_vendor.business_code in('VDR-CREATE-1600-PL-OUTER','VDR-CREATE-1600-PL-INNER') then
               l_apply.for_sap               := '0'; --?需要加逻辑
            else
               l_apply.for_sap               := '1'; --?需要加逻辑
            end if;
            l_apply.batch_flag            := '1';
            l_apply.transaction_flag      := '0';
            l_apply.audit_flag            := '0';
            l_apply.apply_by              := in_applyby;
            l_apply.apply_email           := in_applyemail;
            l_apply.business_type         := l_apply_vendor.business_type;
            l_apply.dept_code             := l_apply_vendor.dept_code;
          
            INSERT INTO hm_applys VALUES l_apply;
          
            li_times := li_times + 1;
          
          END IF;
        
          l_apply_vendor.apply_id := ls_applyid;
          --l_apply_vendor.Row_Id := ;
          INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
          comm_util.copy_table_line('hm_apply_vendor',
                                    '',
                                    '_HIS',
                                    l_apply_vendor.row_id,
                                    retcode,
                                    retmsg);
          --插入银行视图和公司视图
          INSERT INTO hm_apply_vendor_company VALUES l_apply_vendor_company;
          comm_util.copy_table_line('hm_apply_vendor_company',
                                    '',
                                    '_HIS',
                                    l_apply_vendor_company.row_id,
                                    retcode,
                                    retmsg);
          INSERT INTO hm_apply_vendor_bank VALUES l_apply_vendor_bank;
          comm_util.copy_table_line('hm_apply_vendor_bank',
                                    '',
                                    '_HIS',
                                    l_apply_vendor_bank.row_id,
                                    retcode,
                                    retmsg);
          --end
          UPDATE hm_action_batch_item
             SET success_flag = '1',
                 remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                                ' import successful'
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor.row_id;
        
        EXCEPTION
          WHEN OTHERS THEN
            retcode := 'E';
            retmsg  := 'Insert failed!Exception Code:' || SQLCODE ||
                       ';Exception message:' || SQLERRM;
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor.row_id;
          
        END;
      ELSE
      
        ls_applyid := in_apply_id;
      
        --说明非新增导入，只需要向hm_apply_vendor增加数据，更新HM_APPLYS的最后更新记录
        BEGIN
          SELECT COUNT(*)
            INTO li_count
            FROM hm_applys
           WHERE apply_id = ls_applyid;
          IF li_count = 0 THEN
            retcode := 'E';
            retmsg  := 'Apply ID has not benn created!';
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor.row_id;
          
            GOTO loops; --继续下一步循环；
          END IF;
          IF li_times = 0 THEN
            UPDATE hm_applys
               SET last_upd_by      = l_apply_vendor.last_upd_by,
                   last_upd         = l_apply_vendor.last_upd,
                   modification_num = modification_num + 1,
                   apply_by         = decode(apply_by,
                                             NULL,
                                             in_applyby,
                                             apply_by),
                   apply_email      = decode(apply_email,
                                             NULL,
                                             in_applyemail,
                                             apply_email)
             WHERE apply_id = ls_applyid;
            li_times := li_times + 1;
          END IF;
        
          --  L_APPLY_vendor.ROW_ID := COMM_UTIL.FUNC_NEW_ROWID();
          INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
          comm_util.copy_table_line('hm_apply_vendor',
                                    '',
                                    '_HIS',
                                    l_apply_vendor.row_id,
                                    retcode,
                                    retmsg);
          UPDATE hm_action_batch_item
             SET success_flag = '1',
                 remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                                ' import successful'
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor.row_id;
        
        EXCEPTION
          WHEN OTHERS THEN
            retcode := 'E';
            retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                       ';Exception message:' || SQLERRM;
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor.row_id;
          
        END;
      END IF;
    END LOOP;
    CLOSE cur_view_table;
  
    --COMMIT;
  
    --applys.prc_apply_get_itemno(ls_applyid, lv_retcode, lv_retmsg);
    applys.prc_apply_get_itemno(in_apply_id => ls_applyid,
                                retcode     => retcode,
                                retmsg      => retmsg);
    IF retcode = 'E' THEN
      RETURN;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                 ';Exception message:' || SQLERRM;
  END prc_applys_import;*/

  /****************************************************************
  功能描述：申请明显信息保存前处理 (应用位置: save)
  作者：    zhangbiao 
  时间：    2010-05-20       
       
  输入参数说明： in_row_id        申请单_信息ID              
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,为保存按钮数据commit前的标准方法，可进行数据校验，数据联动等等
       2,前提：数据已经保存至正式表中，尚未提交
       3,内部调用 prc_input_allcheck
  ****************************************************************/
  PROCEDURE prc_apply_vendor_save(in_row_id IN VARCHAR2,
                                  retcode   OUT VARCHAR2,
                                  retmsg    OUT VARCHAR2) IS
    l_hm_applys       hm_applys%rowtype;
    l_hm_apply_vendor hm_apply_vendor%rowtype;
  
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
  
    --l_hm_vendors hm_vendors%rowtype;
  
  BEGIN
    --获取当前申请条目信息
    for cur_rows in (select * from hm_apply_vendor where row_id = in_row_id) loop
      l_hm_apply_vendor := cur_rows;
    
      for cur_rows2 in (select *
                          from hm_apply_vendor_company t
                         where t.apply_vendor_id = in_row_id) LOOP
        t_apply_vendor_company.extend();
        t_apply_vendor_company(t_apply_vendor_company.count) := cur_rows2;
      end loop;
    
      for cur_rows3 in (select *
                          from hm_apply_vendor_purchase t
                         where t.apply_vendor_id = in_row_id) LOOP
        t_apply_vendor_purchase.extend();
        t_apply_vendor_purchase(t_apply_vendor_purchase.count) := cur_rows3;
      end loop;
    
      for cur_rows4 in (select *
                          from hm_apply_vendor_bank t
                         where t.apply_vendor_id = in_row_id) LOOP
        t_apply_vendor_bank.extend();
        t_apply_vendor_bank(t_apply_vendor_bank.count) := cur_rows4;
      end loop;
    
    end loop;
  
    if l_hm_apply_vendor.row_id is null then
      retcode := 'E';
      retmsg  := 'Vendor apply info not exist!';
      RETURN;
    end if;
  
    --获取当前申请头信息
    for cur_rows in (select *
                       from hm_applys
                      where apply_id = l_hm_apply_vendor.apply_id) loop
      l_hm_applys := cur_rows;
    end loop;
  
    /*    --获取当然申请对应主数据条目
    FOR cur_rows IN (SELECT * FROM hm_vendors WHERE vendor_code = l_hm_apply_vendor.vendor_code)
    LOOP
      l_hm_vendors := cur_rows;
    END LOOP;*/
  
    ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)--调用--prc_apply_vendor_change
    prc_input_allcheck(in_row_id                  => '',
                       in_tablename_suffix        => '',
                       v_hm_apply_vendor          => l_hm_apply_vendor,
                       v_hm_apply_vendor_bank     => t_apply_vendor_bank,
                       v_hm_apply_vendor_company  => t_apply_vendor_company,
                       v_hm_apply_vendor_purchase => t_apply_vendor_purchase,
                       retcode                    => retcode,
                       retmsg                     => retmsg);
    IF retcode = 'E' THEN
      RETURN;
    END IF;
  
    applys.prc_apply_get_itemno(in_apply_id => l_hm_apply_vendor.apply_id,
                                retcode     => retcode,
                                retmsg      => retmsg);
    IF retcode = 'E' THEN
      RETURN;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_apply_vendor_save:' || SQLERRM;
  END prc_apply_vendor_save;

  /****************************************************************
  功能描述：根据业务类型创建、更新银行信息
  作者：    zhangbiao
  时间：    2009-04-09    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
     根据业务类型分为三部分：创建(银行信息挂在基本视图下，不可能出现扩展)、更新
       1.创建操作
         直接向银行信息表中插入一笔银行数据
       2.更新操作       
         如果有更新银行信息,直接向银行信息表中插入一笔数据即可
  ****************************************************************/
  /*  PROCEDURE prc_bank_create
    (
      in_datavalue   IN hm_apply_vendor%ROWTYPE,
      in_vendor_id IN VARCHAR2,
      in_user_name   IN VARCHAR2,
      retcode        OUT VARCHAR2,
      retmsg         OUT VARCHAR2
    ) IS
      l_apply_vendor        hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
      l_hm_VENDOR_bank_accounts hm_VENDOR_bank_accounts%ROWTYPE;
    
      --ls_partnerid VARCHAR2(20);
    
      li_count  INTEGER := 0;
      lv_bankid VARCHAR2(20);
    
    BEGIN
      retcode := 'S';
      retmsg  := 'The bank create success ! ';
  
      l_apply_vendor := in_datavalue;
    
    \*
        银行视图只有一条数据，先冻结原数据，然后新增
    *\
          UPDATE hm_VENDOR_bank_accounts
       SET delete_flag  = '1',
           last_upd_by = in_user_name,
           last_upd = SYSDATE
     WHERE VENDOR_ID = in_vendor_id;
     \*
      SELECT COUNT(*),
             MAX(t.row_id)
        INTO li_count,
             lv_bankid
        FROM hm_VENDOR_bank_accounts t
       WHERE t.bank_country = l_apply_vendor.bank_country
         AND t.bank_branch_code = l_apply_vendor.bank_key
         AND t.account_holder_name = l_apply_vendor.bank_account
         AND t.customer_id = in_vendor_id
         AND T.DELETE_FLAG = '0';
    
      IF li_count < 1 THEN
      *\
      
        --if l_apply_vendor.iban_code is null then
      
        --创建/扩展供应商银行账户信息
        lv_bankid := comm_util.func_new_rowid();
  
        if l_apply_vendor.bank_account is null then 
           l_apply_vendor.bank_account := '1';
        end if;
        
        if l_apply_vendor.bank_country is null then 
           l_apply_vendor.bank_country := 'CN';
        end if;     
            
        l_hm_VENDOR_bank_accounts.row_id                   := lv_bankid;
        l_hm_VENDOR_bank_accounts.customer_id              := in_vendor_id;
        l_hm_VENDOR_bank_accounts.bank_country             := l_apply_vendor.bank_country;
        l_hm_VENDOR_bank_accounts.bank_name := l_apply_vendor.bank_name;
        l_hm_VENDOR_bank_accounts.bank_branch_code         := l_apply_vendor.bank_key;
        l_hm_VENDOR_bank_accounts.bank_account_num         := l_apply_vendor.bank_account;
        l_hm_VENDOR_bank_accounts.account_holder_name      := l_apply_vendor.account_holder;
    
        l_hm_VENDOR_bank_accounts.row_id            := lv_bankid;
        l_hm_VENDOR_bank_accounts.created_by        := in_user_name;
        l_hm_VENDOR_bank_accounts.created           := SYSDATE;
        l_hm_VENDOR_bank_accounts.last_upd_by       := in_user_name;
        l_hm_VENDOR_bank_accounts.last_upd          := SYSDATE;
        l_hm_VENDOR_bank_accounts.modification_num  := 0;
        l_hm_VENDOR_bank_accounts.active_flag       := '1';
        l_hm_VENDOR_bank_accounts.version           := '1.0';
        l_hm_VENDOR_bank_accounts.last_version_flag := '2';
        l_hm_VENDOR_bank_accounts.operate_status    := 'CREATE';
        l_hm_VENDOR_bank_accounts.active_range := 'ALL';
        l_hm_VENDOR_bank_accounts.lock_flag         := '0';
        l_hm_VENDOR_bank_accounts.for_gvs           := '1';
        l_hm_VENDOR_bank_accounts.delete_flag       := '0';
      
        INSERT INTO hm_VENDOR_bank_accounts
        VALUES l_hm_VENDOR_bank_accounts;
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS', '', '_HIS', lv_bankid, retcode, retmsg);
        
        \*
      ELSE
      
        UPDATE hm_VENDOR_bank_accounts
           SET account_holder_name = l_apply_vendor.bank_account,
               bank_account_num = l_apply_vendor.account_holder, --bank_name = v_bank_name,
               last_upd_by = in_user_name,
               last_upd = SYSDATE
         WHERE row_id = lv_bankid;
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS', '', '_HIS', lv_bankid, retcode, retmsg);
      END IF;
    *\
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'The bank create error ! ' || SQLERRM;
    END prc_bank_create;
  */
  /****************************************************************
  功能描述：根据业务类型创建、更新合作伙伴
  作者：    zhangbiao
  时间：    2009-04-03    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
     根据业务类型分为三部分：创建、更新、扩展
       1.创建操作
         1.1创建0211(sold to)：
            默认创建四个合作伙伴(SP、BP、PY、SH),值为本身； --
         1.2创建0222(payer): 
             默认创建PY,值为本身；--
         1.3创建0111/0101(internal)
             默认创建四个合作伙伴(SP、BP、PY、SH),值为本身；--               
         1.4创建Z001(sales manager)               
         1.5创建0402(ship to)
             默认创建SH,值为本身；--
         1.6创建0301(non_trading)              
         1.7创建0204(one_time) --
             默认创建四个合作伙伴(SP、BP、PY、SH),值为本身；
             
            若有Regional GM/Manager(Z1) 、 Vendor Manager(Z2)
                Assistant Cust. Mgr(Z5) 、 Sales Rep.(Z9)
                Sales Agent(ZA)、 key account manager(ZF)
                Credit manager code(Zd)、 SOE code(Ze)
                Forwarding agent(CR)等，需要分别创建Partner;
              若有central account，则更新BP/PY为所录入得值；
       2。更新操作
          先删除合作伙伴然后重新创建
       3。扩展操作
          同创建操作。
    decode(#, 'AG','SP' , 'RE','BP', 'RG','PY', 'WE','SH', 'SP','CR',#)
   备注：SP：Sold-to party   
         BP：Bill-to party
         PY：Payer
         SH：Ship-to party
  ****************************************************************/
  /*  PROCEDURE prc_partner_create
    (
      in_datavalue IN hm_apply_vendor%ROWTYPE,
      in_vendor_code IN VARCHAR2,
      in_purchase_id  IN VARCHAR2,
      in_user_name IN VARCHAR2,
      retcode      OUT VARCHAR2,
      retmsg       OUT VARCHAR2
    ) IS
      l_apply_vendor       hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
      l_hm_vendor_partners hm_vendor_partners%ROWTYPE;  
    
      li_count  INTEGER := 0;
      lv_partnerid VARCHAR2(20);
  
    BEGIN
      retcode := 'S';
      retmsg  := 'prc_partner_create:The partner create success ! ';
  
      l_apply_vendor := in_datavalue;
      
      -- SP 方处理
      SELECT COUNT(*),
             MAX(t.row_id)
        INTO li_count,
             lv_partnerid
        FROM hm_vendor_partners t
       WHERE t.partner_function = 'SP'
         AND t.partner_subject_id = in_vendor_code
         AND t.pur_grp_id = in_purchase_id;
      
      IF li_count < 1 THEN
        IF ( l_apply_vendor.operate_type IN ('CREATE','EXTEND') AND 
             l_apply_vendor.partner_flag_sp = '1' ) OR
           ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_sp_x = 'X' AND
             l_apply_vendor.partner_flag_sp = '1' ) THEN
          --创建/扩展供应商合作伙伴信息
          lv_partnerid := comm_util.func_new_rowid();
            
          l_hm_vendor_partners.cust_partner_type := 'SP';
          l_hm_vendor_partners.cust_partner_subject_id := in_vendor_number;
          l_hm_vendor_partners.pur_grp_id := in_purchase_id;
      
          l_hm_vendor_partners.row_id             := lv_partnerid;
          l_hm_vendor_partners.created_by         := in_user_name;
          l_hm_vendor_partners.created            := SYSDATE;
          l_hm_vendor_partners.last_upd_by        := in_user_name;
          l_hm_vendor_partners.last_upd           := SYSDATE;
          l_hm_vendor_partners.modification_num   := 0;
          l_hm_vendor_partners.active_flag        := '1';
          l_hm_vendor_partners.version            := '1.0';
          l_hm_vendor_partners.last_version_flag  := '2';
          l_hm_vendor_partners.operate_status     := 'CREATE';
          l_hm_vendor_partners.lock_flag          := '0';
          l_hm_vendor_partners.for_gvs            := '1';
          l_hm_vendor_partners.delete_flag        := '0';
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        END IF;  
      ELSIF li_count = 1 THEN
        IF ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_sp_x = 'X' AND
             l_apply_vendor.partner_flag_sp = '0' ) THEN
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
          DELETE FROM hm_vendor_partners WHERE row_id = lv_partnerid;
        END IF;
      ELSE 
        retcode := 'E';
        retmsg := 'prc_partner_create:SP合作伙伴信息异常，请检查数据！';
      END IF;
             
      -- SH 方处理
      SELECT COUNT(*),
             MAX(t.row_id)
        INTO li_count,
             lv_partnerid
        FROM hm_vendor_partners t
       WHERE t.cust_partner_type = 'SH'
         AND t.cust_partner_subject_id = in_vendor_number
         AND t.pur_grp_id = in_purchase_id;
      
      IF li_count < 1 THEN
        IF ( l_apply_vendor.operate_type IN ('CREATE','EXTEND') AND 
             l_apply_vendor.partner_flag_sh = '1' ) OR
           ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_sh_x = 'X' AND
             l_apply_vendor.partner_flag_sh = '1' )  THEN
          --创建/扩展供应商合作伙伴信息
          lv_partnerid := comm_util.func_new_rowid();
            
          l_hm_vendor_partners.cust_partner_type := 'SH';
          l_hm_vendor_partners.cust_partner_subject_id := in_vendor_number;
          l_hm_vendor_partners.pur_grp_id := in_purchase_id;
      
          l_hm_vendor_partners.row_id             := lv_partnerid;
          l_hm_vendor_partners.created_by         := in_user_name;
          l_hm_vendor_partners.created            := SYSDATE;
          l_hm_vendor_partners.last_upd_by        := in_user_name;
          l_hm_vendor_partners.last_upd           := SYSDATE;
          l_hm_vendor_partners.modification_num   := 0;
          l_hm_vendor_partners.active_flag        := '1';
          l_hm_vendor_partners.version            := '1.0';
          l_hm_vendor_partners.last_version_flag  := '2';
          l_hm_vendor_partners.operate_status     := 'CREATE';
          l_hm_vendor_partners.lock_flag          := '0';
          l_hm_vendor_partners.for_gvs            := '1';
          l_hm_vendor_partners.delete_flag        := '0';
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        END IF;  
      ELSIF li_count = 1 THEN
        IF ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_sh_x = 'X' AND
             l_apply_vendor.partner_flag_sh = '0' ) THEN
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
          DELETE FROM hm_vendor_partners WHERE row_id = lv_partnerid;
        END IF;
      ELSE 
        retcode := 'E';
        retmsg := 'prc_partner_create:SH合作伙伴信息异常，请检查数据！';
      END IF;
             
      -- BP 方处理
      SELECT COUNT(*),
             MAX(t.row_id)
        INTO li_count,
             lv_partnerid
        FROM hm_vendor_partners t
       WHERE t.cust_partner_type = 'BP'
         AND t.cust_partner_subject_id = in_vendor_number
         AND t.pur_grp_id = in_purchase_id;
      
      IF li_count < 1 THEN
        IF ( l_apply_vendor.operate_type IN ('CREATE','EXTEND') AND 
             l_apply_vendor.partner_flag_bp = '1' ) OR
           ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_bp_x = 'X' AND
             l_apply_vendor.partner_flag_bp = '1' ) THEN
          --创建/扩展供应商合作伙伴信息
          lv_partnerid := comm_util.func_new_rowid();
            
          l_hm_vendor_partners.cust_partner_type := 'BP';
          l_hm_vendor_partners.cust_partner_subject_id := in_vendor_number;
          l_hm_vendor_partners.pur_grp_id := in_purchase_id;
      
          l_hm_vendor_partners.row_id             := lv_partnerid;
          l_hm_vendor_partners.created_by         := in_user_name;
          l_hm_vendor_partners.created            := SYSDATE;
          l_hm_vendor_partners.last_upd_by        := in_user_name;
          l_hm_vendor_partners.last_upd           := SYSDATE;
          l_hm_vendor_partners.modification_num   := 0;
          l_hm_vendor_partners.active_flag        := '1';
          l_hm_vendor_partners.version            := '1.0';
          l_hm_vendor_partners.last_version_flag  := '2';
          l_hm_vendor_partners.operate_status     := 'CREATE';
          l_hm_vendor_partners.lock_flag          := '0';
          l_hm_vendor_partners.for_gvs            := '1';
          l_hm_vendor_partners.delete_flag        := '0';
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        END IF;  
      ELSIF li_count = 1 THEN
        IF ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_bp_x = 'X' AND
             l_apply_vendor.partner_flag_bp = '0' ) THEN
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
          DELETE FROM hm_vendor_partners WHERE row_id = lv_partnerid;
        END IF;
      ELSE 
        retcode := 'E';
        retmsg := 'prc_partner_create:BP合作伙伴信息异常，请检查数据！';
      END IF;
             
      -- PY 方处理
      SELECT COUNT(*),
             MAX(t.row_id)
        INTO li_count,
             lv_partnerid
        FROM hm_vendor_partners t
       WHERE t.cust_partner_type = 'PY'
         AND t.cust_partner_subject_id = in_vendor_number
         AND t.pur_grp_id = in_purchase_id;
      
      IF li_count < 1 THEN
        IF ( l_apply_vendor.operate_type IN ('CREATE','EXTEND') AND 
             l_apply_vendor.partner_flag_py = '1' ) OR
           ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_py_x = 'X' AND
             l_apply_vendor.partner_flag_py = '1' )  THEN
          --创建/扩展供应商合作伙伴信息
          lv_partnerid := comm_util.func_new_rowid();
            
          l_hm_vendor_partners.cust_partner_type := 'PY';
          l_hm_vendor_partners.cust_partner_subject_id := in_vendor_number;
          l_hm_vendor_partners.pur_grp_id := in_purchase_id;
      
          l_hm_vendor_partners.row_id             := lv_partnerid;
          l_hm_vendor_partners.created_by         := in_user_name;
          l_hm_vendor_partners.created            := SYSDATE;
          l_hm_vendor_partners.last_upd_by        := in_user_name;
          l_hm_vendor_partners.last_upd           := SYSDATE;
          l_hm_vendor_partners.modification_num   := 0;
          l_hm_vendor_partners.active_flag        := '1';
          l_hm_vendor_partners.version            := '1.0';
          l_hm_vendor_partners.last_version_flag  := '2';
          l_hm_vendor_partners.operate_status     := 'CREATE';
          l_hm_vendor_partners.lock_flag          := '0';
          l_hm_vendor_partners.for_gvs            := '1';
          l_hm_vendor_partners.delete_flag        := '0';
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
        END IF;  
      ELSIF li_count = 1 THEN
        IF ( l_apply_vendor.operate_type IN ( 'UPDATE','CHANGE') AND
             l_apply_vendor.partner_flag_py_x = 'X' AND
             l_apply_vendor.partner_flag_py = '0' ) THEN
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', lv_partnerid, retcode, retmsg);
          DELETE FROM hm_vendor_partners WHERE row_id = lv_partnerid;
        END IF;
      ELSE 
        retcode := 'E';
        retmsg := 'prc_partner_create:PY合作伙伴信息异常，请检查数据！';
      END IF;
             
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'The partner create error:' || SQLERRM;
    END prc_partner_create;
  */
  /****************************************************************
  功能描述：根据申请单更新Sold to party
  作者：    zhangbiao
  时间：    2009-04-23    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 in_purchase_id           采购组织ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
         0.业务背景说明：假如申请单供应商为A，选择的Sold to party为B.
         1.更新sold to party(B)的基本视图和采购视图状态：
             基本视图状态：NVL(OPERATE_STATUS,'DOING');
             采购视图状态：DECODE(OPERATE_STATUS,'CREATE','CREATE','UPDATE')
         2.供应商B的采购视图下创建一个PARTNER: 
             默认创建PY,值为本身；--    
  ****************************************************************/
  /*  PROCEDURE prc_soldto_update
    (
      in_datavalue IN hm_apply_vendor%ROWTYPE,
      in_salesorg  IN VARCHAR2,
      in_user_name IN VARCHAR2,
      retcode      OUT VARCHAR2,
      retmsg       OUT VARCHAR2
    ) IS
      l_apply_vendor         hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
      l_hm_vendor_partners   hm_vendor_partners%ROWTYPE;
      l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
    
      ls_partnerid VARCHAR2(20);
      ls_purid   hm_vendor_pur_data.row_id%TYPE; --B供应商的采购视图ID
    
      li_count INTEGER := 0;
      lv_partner_function VARCHAR2(10);
      
      ls_belong_yjt varchar2(20);
      
    BEGIN
      retcode := 'S';
      retmsg  := 'The soldto partner create success!';
    
      l_apply_vendor := in_datavalue;
      
      IF l_apply_vendor.sold_to_party IS NOT NULL THEN
        FOR CUR_ROWS IN (SELECT COUNT(*) ROWSCOUNT FROM HM_FND_VENDOR_RRS2SALESORG
                                              WHERE SALES_ORGANIZATION = in_salesorg  )
        LOOP
           IF CUR_ROWS.ROWSCOUNT > 0 and (ls_belong_yjt is null or (ls_belong_yjt is not null and ls_belong_yjt not in ('1005','1011','1020','1021')))THEN --1005  社区店--1011  工程--1020  专卖店--1021 电子商务
             RETURN;
           END IF;
        END LOOP;    
      
        SELECT MAX(b.row_id)
          INTO ls_purid
          FROM hm_vendors           a,
               hm_vendor_pur_data b
         WHERE a.row_id = b.customer_id
           AND lpad(a.vendor_code, 10, '0') = lpad(l_apply_vendor.sold_to_party, 10, '0')
           AND b.sales_group = in_salesorg
           AND b.distribution_channel = '00'
           AND b.division = '00'
           AND a.active_flag = '1'
           AND a.delete_flag = '0'
           AND b.active_flag = '1'
           AND b.delete_flag = '0';
        IF ls_purid IS NULL THEN
          retcode := 'E';
          retmsg  := '对应售达方更新: 供应商:[' || l_apply_vendor.sold_to_party || '] 在采购组织:[' ||
                     in_salesorg || '] 中尚未维护视图信息，请先进行EXTEND业务扩展动作 !';
          RETURN;
        END IF;       
        
        IF l_apply_vendor.partner_function = 'JCSH' THEN
          lv_partner_function := 'SH';
        ELSE
          lv_partner_function := l_apply_vendor.partner_function;
        END IF;
        
        SELECT COUNT(*)
          INTO li_count
          FROM hm_vendor_partners
         WHERE cust_partner_type = lv_partner_function
           AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_vendor.vendor_code, 10, '0')
           AND pur_grp_id = ls_purid
           AND active_flag = '1'
           AND delete_flag = '0';
      
        --sold_to_party 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
        IF li_count < 1 THEN
          --B中不经存在SH
          l_hm_vendor_partners.pur_grp_id      := ls_purid;
          l_hm_vendor_partners.created_by              := in_user_name;
          l_hm_vendor_partners.created                 := SYSDATE;
          l_hm_vendor_partners.last_upd_by             := in_user_name;
          l_hm_vendor_partners.last_upd                := SYSDATE;
          l_hm_vendor_partners.modification_num        := 0;
          l_hm_vendor_partners.active_flag             := '1';
          l_hm_vendor_partners.version                 := '1.0';
          l_hm_vendor_partners.last_version_flag       := '2';
          l_hm_vendor_partners.operate_status          := 'CREATE';
          l_hm_vendor_partners.lock_flag               := '0';
          l_hm_vendor_partners.for_gvs                 := '1';
          l_hm_vendor_partners.delete_flag             := '0';
          ls_partnerid                                   := comm_util.func_new_rowid();
          l_hm_vendor_partners.row_id                  := ls_partnerid;
          l_hm_vendor_partners.cust_partner_subject_id := l_apply_vendor.vendor_code;
          l_hm_vendor_partners.cust_partner_type       := lv_partner_function;
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
        
          UPDATE hm_vendor_pur_data
             SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE row_id = ls_purid;
        
          UPDATE hm_vendors
             SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE vendor_code = l_apply_vendor.sold_to_party;
        
        END IF;
    
        l_hm_applys_transactions.action_batch_id := l_apply_vendor.action_batch_id;
        l_hm_applys_transactions.apply_id        := l_apply_vendor.apply_id;
        l_hm_applys_transactions.apply_item_no   := l_apply_vendor.row_id;
        l_hm_applys_transactions.master_row_code := l_apply_vendor.sold_to_party;
        l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
        l_hm_applys_transactions.created_by      := in_user_name;
        l_hm_applys_transactions.created         := SYSDATE;
        l_hm_applys_transactions.last_upd_by     := in_user_name;
        l_hm_applys_transactions.last_upd        := SYSDATE;
        l_hm_applys_transactions.active_flag     := '1';
        l_hm_applys_transactions.delete_flag     := '0';
          
        INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
        
        --老售达方处理 soldto old party 处理
        FOR cur_rows IN CUR_PARTNER2SPCUST_item (l_apply_vendor.vendor_code, 
                                                lv_partner_function, 
                                                in_salesorg, 
                                                l_apply_vendor.sold_to_party )
        LOOP
          --ls_old_soldtoparty := ls_old_soldtoparty||cur_rows.vendor_code||CHR(9)||cur_rows.account_group||CHR(9)||cur_rows.VENDOR_NAME1||CHR(13)||CHR(10);
          
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', cur_rows.row_id, retcode, retmsg);
          
          UPDATE HM_vendor_PARTNERS
             SET DELETE_FLAG = '1',
                 LAST_UPD_BY = IN_USER_NAME,
                 LAST_UPD    = SYSDATE
           WHERE ROW_ID = CUR_ROWS.ROW_ID;
          
          UPDATE hm_vendor_pur_data
             SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE row_id = cur_rows.pur_grp_id;
        
          UPDATE hm_vendors
             SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE row_id = cur_rows.customer_id;
  
          --
          l_hm_applys_transactions.action_batch_id := l_apply_vendor.action_batch_id;
          l_hm_applys_transactions.apply_id        := l_apply_vendor.apply_id;
          l_hm_applys_transactions.apply_item_no   := l_apply_vendor.row_id;
          l_hm_applys_transactions.master_row_code := CUR_ROWS.vendor_code;
          l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
          l_hm_applys_transactions.created_by      := in_user_name;
          l_hm_applys_transactions.created         := SYSDATE;
          l_hm_applys_transactions.last_upd_by     := in_user_name;
          l_hm_applys_transactions.last_upd        := SYSDATE;
          l_hm_applys_transactions.active_flag     := '1';
          l_hm_applys_transactions.delete_flag     := '0';
  
          INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
          
        END LOOP;
        
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'The soldto partner create error:' || SQLERRM;
    END prc_soldto_update;
  */
  /****************************************************************
  功能描述：根据申请单更新Sold to party old.
  作者：    zhangbiao
  时间：    2009-04-23    
         
  输入参数说明： IN_DATAVALUE          业务申请单数据
                 in_purchase_id           采购组织ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
         0.业务背景说明：假如申请单供应商为A，选择的Sold to party为B.
         1.更新sold to party(B)的基本视图和采购视图状态：
             基本视图状态：NVL(OPERATE_STATUS,'DOING');
             采购视图状态：DECODE(OPERATE_STATUS,'CREATE','CREATE','UPDATE')
         2.供应商B的采购视图下创建一个PARTNER: 
             默认创建PY,值为本身；--    
  ****************************************************************/
  /*  PROCEDURE prc_soldto_old_update
    (
      in_datavalue IN hm_apply_vendor%ROWTYPE,
      in_salesorg  IN VARCHAR2,
      in_user_name IN VARCHAR2,
      retcode      OUT VARCHAR2,
      retmsg       OUT VARCHAR2
    ) IS
      l_apply_vendor         hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
      l_hm_vendor_partners   hm_vendor_partners%ROWTYPE;
      l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
    
      ls_partnerid VARCHAR2(20);
      ls_purid   hm_vendor_pur_data.row_id%TYPE; --B供应商的采购视图ID
    
      li_count INTEGER := 0;
      lv_partner_function VARCHAR2(10);
      
    BEGIN
      retcode := 'S';
      retmsg  := 'The old soldto partner delete success!';
    
      l_apply_vendor := in_datavalue;
      
      IF l_apply_vendor.sold_to_party IS NOT NULL THEN
      
        --FOR cur_rows IN CUR_PARTNER2SPCUST(
      
      
        SELECT MAX(b.row_id)
          INTO ls_purid
          FROM hm_vendors           a,
               hm_vendor_pur_data b
         WHERE a.row_id = b.customer_id
           AND lpad(a.vendor_code, 10, '0') = lpad(l_apply_vendor.sold_to_party, 10, '0')
           AND b.sales_group = in_salesorg
           AND b.distribution_channel = '00'
           AND b.division = '00'
           AND a.active_flag = '1'
           AND a.delete_flag = '0'
           AND b.active_flag = '1'
           AND b.delete_flag = '0';
        IF ls_purid IS NULL THEN
          retcode := 'E';
          retmsg  := 'SoldTo_update: Customer:[' || l_apply_vendor.sold_to_party || '] Sales Area View:[' ||
                     in_salesorg || '] has not been created !';
          RETURN;
        END IF;
    
        IF l_apply_vendor.partner_function = 'JCSH' THEN
          lv_partner_function := 'SH';
        ELSE
          lv_partner_function := l_apply_vendor.partner_function;
        END IF;
        
        SELECT COUNT(*)
          INTO li_count
          FROM hm_vendor_partners
         WHERE cust_partner_type = lv_partner_function
           AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_vendor.vendor_code, 10, '0')
           AND pur_grp_id = ls_purid
           AND active_flag = '1'
           AND delete_flag = '0';
      
        --sold_to_party 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
        IF li_count < 1 THEN
          --B中不经存在SH
          l_hm_vendor_partners.pur_grp_id      := ls_purid;
          l_hm_vendor_partners.created_by              := in_user_name;
          l_hm_vendor_partners.created                 := SYSDATE;
          l_hm_vendor_partners.last_upd_by             := in_user_name;
          l_hm_vendor_partners.last_upd                := SYSDATE;
          l_hm_vendor_partners.modification_num        := 0;
          l_hm_vendor_partners.active_flag             := '1';
          l_hm_vendor_partners.version                 := '1.0';
          l_hm_vendor_partners.last_version_flag       := '2';
          l_hm_vendor_partners.operate_status          := 'CREATE';
          l_hm_vendor_partners.lock_flag               := '0';
          l_hm_vendor_partners.for_gvs                 := '1';
          l_hm_vendor_partners.delete_flag             := '0';
          ls_partnerid                                   := comm_util.func_new_rowid();
          l_hm_vendor_partners.row_id                  := ls_partnerid;
          l_hm_vendor_partners.cust_partner_subject_id := l_apply_vendor.vendor_code;
          l_hm_vendor_partners.cust_partner_type       := lv_partner_function;
          
          INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
          comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
        
          UPDATE hm_vendor_pur_data
             SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE row_id = ls_purid;
        
          UPDATE hm_vendors
             SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
                 last_version_flag = '2',
                 last_upd_by = in_user_name,
                 last_upd = SYSDATE,
                 modification_num = modification_num + 1
           WHERE vendor_code = l_apply_vendor.sold_to_party;
        
        END IF;
    
        l_hm_applys_transactions.action_batch_id := l_apply_vendor.action_batch_id;
        l_hm_applys_transactions.apply_id        := l_apply_vendor.apply_id;
        l_hm_applys_transactions.apply_item_no   := l_apply_vendor.row_id;
        l_hm_applys_transactions.master_row_code := l_apply_vendor.sold_to_party;
        l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
        l_hm_applys_transactions.created_by      := in_user_name;
        l_hm_applys_transactions.created         := SYSDATE;
        l_hm_applys_transactions.last_upd_by     := in_user_name;
        l_hm_applys_transactions.last_upd        := SYSDATE;
        l_hm_applys_transactions.active_flag     := '1';
        l_hm_applys_transactions.delete_flag     := '0';
          
        INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
          
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'The soldto partner create error:' || SQLERRM;
    END prc_soldto_old_update;
  */
  /*  PROCEDURE prc_rrsflag_update
    (
      in_datavalue IN hm_apply_vendor%ROWTYPE,
      in_salesorg  IN VARCHAR2,
      in_user_name IN VARCHAR2,
      retcode      OUT VARCHAR2,
      retmsg       OUT VARCHAR2
    ) IS
      l_apply_vendor         hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
      l_hm_vendor_partners   hm_vendor_partners%ROWTYPE;
      l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
    
      ls_partnerid VARCHAR2(20);
      ls_purid   hm_vendor_pur_data.row_id%TYPE; --B供应商的采购视图ID
    
      li_count INTEGER := 0;
      lv_partner_function VARCHAR2(10);
      
    BEGIN
      retcode := 'S';
      retmsg  := 'The RRS partner create success!';
    
      l_apply_vendor := in_datavalue;
      
      IF l_apply_vendor.market_area IN ('X','S','W') AND l_apply_vendor.partner_function <> 'PY' THEN
      
        FOR CUR_ROWS IN ( SELECT * FROM HM_MAP_VENDOR_SALESORG2RRSCUST T WHERE T.SALES_ORG = in_salesorg )
        LOOP
          SELECT MAX(b.row_id)
            INTO ls_purid
            FROM hm_vendors           a,
                 hm_vendor_pur_data b
           WHERE a.row_id = b.customer_id
             AND lpad(a.vendor_code, 10, '0') = lpad(cur_rows.sp_vendor_number, 10, '0')
             AND b.sales_group = in_salesorg
             AND b.distribution_channel = '00'
             AND b.division = '00'
             AND a.active_flag = '1'
             AND a.delete_flag = '0'
             AND b.active_flag = '1'
             AND b.delete_flag = '0';
          IF ls_purid IS NULL THEN
            retcode := 'E';
            retmsg  := '日日顺合作伙伴关系更新: 供应商:[' || cur_rows.sp_vendor_number || ']的[' ||
                       in_salesorg || ']采购组织视图尚未维护 !';
            RETURN;
          END IF;
      
          lv_partner_function := 'SH';
          
          SELECT COUNT(*)
            INTO li_count
            FROM hm_vendor_partners
           WHERE cust_partner_type = lv_partner_function
             AND lpad(cust_partner_subject_id, 10, '0') = lpad(l_apply_vendor.vendor_code, 10, '0')
             AND pur_grp_id = ls_purid
             AND active_flag = '1'
             AND delete_flag = '0';
        
          --market_area(RRS_FLAG) 为空尚未处理，是否清除所有对应售达方的合作伙伴关系
          IF li_count < 1 THEN
            --B中不经存在SH
            l_hm_vendor_partners.pur_grp_id      := ls_purid;
            l_hm_vendor_partners.created_by              := in_user_name;
            l_hm_vendor_partners.created                 := SYSDATE;
            l_hm_vendor_partners.last_upd_by             := in_user_name;
            l_hm_vendor_partners.last_upd                := SYSDATE;
            l_hm_vendor_partners.modification_num        := 0;
            l_hm_vendor_partners.active_flag             := '1';
            l_hm_vendor_partners.version                 := '1.0';
            l_hm_vendor_partners.last_version_flag       := '2';
            l_hm_vendor_partners.operate_status          := 'CREATE';
            l_hm_vendor_partners.lock_flag               := '0';
            l_hm_vendor_partners.for_gvs                 := '1';
            l_hm_vendor_partners.delete_flag             := '0';
            ls_partnerid                                   := comm_util.func_new_rowid();
            l_hm_vendor_partners.row_id                  := ls_partnerid;
            l_hm_vendor_partners.cust_partner_subject_id := l_apply_vendor.vendor_code;
            l_hm_vendor_partners.cust_partner_type       := lv_partner_function;
            
            INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
            comm_util.copy_table_line('HM_vendor_PARTNERS', '', '_HIS', ls_partnerid, retcode, retmsg);
          
            UPDATE hm_vendor_pur_data
               SET operate_status = decode(operate_status, 'CREATE', 'CREATE', 'UPDATE'),
                   last_version_flag = '2',
                   last_upd_by = in_user_name,
                   last_upd = SYSDATE,
                   modification_num = modification_num + 1
             WHERE row_id = ls_purid;
          
            UPDATE hm_vendors
               SET operate_status = decode(operate_status, 'NVL', 'DOING', operate_status),
                   last_version_flag = '2',
                   last_upd_by = in_user_name,
                   last_upd = SYSDATE,
                   modification_num = modification_num + 1
             WHERE vendor_code = cur_rows.sp_vendor_number;
          
          END IF;
      
          l_hm_applys_transactions.action_batch_id := l_apply_vendor.action_batch_id;
          l_hm_applys_transactions.apply_id        := l_apply_vendor.apply_id;
          l_hm_applys_transactions.apply_item_no   := l_apply_vendor.row_id;
          l_hm_applys_transactions.master_row_code := cur_rows.sp_vendor_number;
          l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
          l_hm_applys_transactions.created_by      := in_user_name;
          l_hm_applys_transactions.created         := SYSDATE;
          l_hm_applys_transactions.last_upd_by     := in_user_name;
          l_hm_applys_transactions.last_upd        := SYSDATE;
          l_hm_applys_transactions.active_flag     := '1';
          l_hm_applys_transactions.delete_flag     := '0';
            
          INSERT INTO hm_applys_transactions  VALUES l_hm_applys_transactions;  
          
        END LOOP;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'The RRS partner create error:' || SQLERRM;
    END prc_rrsflag_update;
  */
  /****************************************************************
  功能描述：供应商信息从结构更新到数据库,依据in_hm_vendors.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_vendors 待更新结构
                                     (*如果in_hm_vendors.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_vendor_type2db(in_hm_vendors IN hm_vendors%Rowtype,
                               retcode       OUT VARCHAR2,
                               retmsg        OUT VARCHAR2) IS
    l_hm_vendors hm_vendors%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_vendor_type2db: succeed!';
  
    if in_hm_vendors.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_vendor_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
  
    l_hm_vendors := in_hm_vendors;
  
    UPDATE hm_vendors
       SET --row_id = l_hm_vendors.row_id,
                     vendor_name = l_hm_vendors.vendor_name,
           vendor_code            = l_hm_vendors.vendor_code,
           bidder_no              = l_hm_vendors.bidder_no,
           search_term            = l_hm_vendors.search_term,
           street_room            = l_hm_vendors.street_room,
           postal_code_city       = l_hm_vendors.postal_code_city,
           country                = l_hm_vendors.country,
           region                 = l_hm_vendors.region,
           phone_number           = l_hm_vendors.phone_number,
           fax_number             = l_hm_vendors.fax_number,
           tax_code               = l_hm_vendors.tax_code,
           account_grp_code       = l_hm_vendors.account_grp_code,
           external_manufacturer  = l_hm_vendors.external_manufacturer,
           intl_area_code         = l_hm_vendors.intl_area_code,
           scac                   = l_hm_vendors.scac,
           trans_agent_grp        = l_hm_vendors.trans_agent_grp,
           service_agent_proc_grp = l_hm_vendors.service_agent_proc_grp,
           station                = l_hm_vendors.station,
           bank_country           = l_hm_vendors.bank_country,
           account_holder_name    = l_hm_vendors.account_holder_name,
           bank_account_num       = l_hm_vendors.bank_account_num,
           bank_branch_code       = l_hm_vendors.bank_branch_code,
           created_by             = l_hm_vendors.created_by,
           created                = l_hm_vendors.created,
           last_upd_by            = l_hm_vendors.last_upd_by,
           last_upd               = l_hm_vendors.last_upd,
           modification_num       = l_hm_vendors.modification_num,
           last_version_flag      = l_hm_vendors.last_version_flag,
           version                = l_hm_vendors.version,
           active_flag            = l_hm_vendors.active_flag,
           lock_flag              = l_hm_vendors.lock_flag,
           delete_flag            = l_hm_vendors.delete_flag,
           operate_status         = l_hm_vendors.operate_status,
           remark                 = l_hm_vendors.remark,
           vendor_title           = l_hm_vendors.vendor_title,
           customer_code          = l_hm_vendors.customer_code,
           vendor_hq              = l_hm_vendors.vendor_hq,
           action_batch_id        = l_hm_vendors.action_batch_id,
           return_batch_id        = l_hm_vendors.return_batch_id,
           business_type          = l_hm_vendors.business_type,
           generate_code_flag     = l_hm_vendors.generate_code_flag,
           city_street_room       = l_hm_vendors.city_street_room,
           LANGUAGE               = l_hm_vendors.language,
           for_gvs                = l_hm_vendors.for_gvs,
           audit_flag             = l_hm_vendors.audit_flag,
           is_no_apply_flag       = l_hm_vendors.is_no_apply_flag,
           delete_flag_pur_org    = l_hm_vendors.delete_flag_pur_org,
           delete_flag_company    = l_hm_vendors.delete_flag_company,
           email                  = l_hm_vendors.email,
           company_share          = l_hm_vendors.company_share,
           bu                     = l_hm_vendors.bu,
           pl                     = l_hm_vendors.pl,
           expiry_date            = l_hm_vendors.expiry_date,
           create_apply_id        = l_hm_vendors.create_apply_id,
           tax_number1        = l_hm_vendors.tax_number1,
           is_bank_debit        = l_hm_vendors.is_bank_debit,
           vendor_code_temp       = l_hm_vendors.vendor_code_temp
     WHERE row_id = l_hm_vendors.row_id;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_vendor_type2db:' || SQLERRM;
  END prc_vendor_type2db;

  /****************************************************************
  功能描述：供应商公司代码信息从结构更新到数据库,依据 in_hm_VENDOR_company_data.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_VENDOR_company_data 待更新结构
                                     (*如果 in_hm_VENDOR_company_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_vendor_company_type2db(in_hm_VENDOR_company_data IN hm_VENDOR_company_data%Rowtype,
                                       retcode                   OUT VARCHAR2,
                                       retmsg                    OUT VARCHAR2) IS
    l_hm_VENDOR_company_data hm_VENDOR_company_data%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_vendor_company_type2db: succeed!';
  
    if in_hm_VENDOR_company_data.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_vendor_company_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
  
    l_hm_VENDOR_company_data := in_hm_VENDOR_company_data;
  
    UPDATE hm_vendor_company_data
       SET --row_id = l_hm_VENDOR_company_data.row_id,
                         vendor_id = l_hm_VENDOR_company_data.vendor_id,
           company_code             = l_hm_VENDOR_company_data.company_code,
           reconcile_account        = l_hm_VENDOR_company_data.reconcile_account,
           hq                       = l_hm_VENDOR_company_data.hq,
           reference_account_number = l_hm_VENDOR_company_data.reference_account_number,
           sequence_no              = l_hm_VENDOR_company_data.sequence_no,
           cash_mgt_group           = l_hm_VENDOR_company_data.cash_mgt_group,
           accounting_customer      = l_hm_VENDOR_company_data.accounting_customer,
           payment_term             = l_hm_VENDOR_company_data.payment_term,
           payment_method           = l_hm_VENDOR_company_data.payment_method,
           tolerance_group          = l_hm_VENDOR_company_data.tolerance_group,
           created_by               = l_hm_VENDOR_company_data.created_by,
           created                  = l_hm_VENDOR_company_data.created,
           last_upd_by              = l_hm_VENDOR_company_data.last_upd_by,
           last_upd                 = l_hm_VENDOR_company_data.last_upd,
           modification_num         = l_hm_VENDOR_company_data.modification_num,
           last_version_flag        = l_hm_VENDOR_company_data.last_version_flag,
           version                  = l_hm_VENDOR_company_data.version,
           active_flag              = l_hm_VENDOR_company_data.active_flag,
           lock_flag                = l_hm_VENDOR_company_data.lock_flag,
           delete_flag              = l_hm_VENDOR_company_data.delete_flag,
           operate_status           = l_hm_VENDOR_company_data.operate_status,
           remark                   = l_hm_VENDOR_company_data.remark,
           return_batch_id          = l_hm_VENDOR_company_data.return_batch_id,
           action_batch_id          = l_hm_VENDOR_company_data.action_batch_id,
           for_gvs                  = l_hm_VENDOR_company_data.for_gvs,
           audit_flag               = l_hm_VENDOR_company_data.audit_flag,
           account_remark           = l_hm_VENDOR_company_data.account_remark,
           create_apply_id          = l_hm_VENDOR_company_data.create_apply_id
     WHERE row_id = l_hm_VENDOR_company_data.row_id;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_vendor_company_type2db:' || SQLERRM;
  END prc_vendor_company_type2db;

  /****************************************************************
  功能描述：供应商采购信息从结构更新到数据库,依据 in_hm_vendor_pur_data.ROW_ID (应用位置: transaction)
  作者：    zhangbiao 
  时间：    2009-10-15       
       
  输入参数说明： in_hm_vendor_pur_data 待更新结构
                                     (*如果 in_hm_vendor_pur_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/
  PROCEDURE prc_vendor_purchase_type2db(in_hm_vendor_pur_data IN hm_vendor_pur_data%Rowtype,
                                        retcode               OUT VARCHAR2,
                                        retmsg                OUT VARCHAR2) IS
    l_hm_vendor_pur_data hm_vendor_pur_data%ROWTYPE;
  BEGIN
    retcode := 'S';
    --retmsg  := 'prc_vendor_purchase_type2db: succeed!';
  
    if in_hm_vendor_pur_data.row_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'prc_vendor_purchase_type2db: UPDATE ERROR: row_id is null!';
      RETURN;
    END IF;
  
    l_hm_vendor_pur_data := in_hm_vendor_pur_data;
  
    UPDATE hm_vendor_pur_data
       SET --row_id = l_hm_vendor_pur_data.row_id,
                    vendor_id = l_hm_vendor_pur_data.vendor_id,
           purchase_grp_code   = l_hm_vendor_pur_data.purchase_grp_code,
           order_currency      = l_hm_vendor_pur_data.order_currency,
           auto_generate_order = l_hm_vendor_pur_data.auto_generate_order,
           payment_term        = l_hm_vendor_pur_data.payment_term,
           created_by          = l_hm_vendor_pur_data.created_by,
           created             = l_hm_vendor_pur_data.created,
           last_upd_by         = l_hm_vendor_pur_data.last_upd_by,
           last_upd            = l_hm_vendor_pur_data.last_upd,
           modification_num    = l_hm_vendor_pur_data.modification_num,
           last_version_flag   = l_hm_vendor_pur_data.last_version_flag,
           version             = l_hm_vendor_pur_data.version,
           active_flag         = l_hm_vendor_pur_data.active_flag,
           lock_flag           = l_hm_vendor_pur_data.lock_flag,
           delete_flag         = l_hm_vendor_pur_data.delete_flag,
           operate_status      = l_hm_vendor_pur_data.operate_status,
           remark              = l_hm_vendor_pur_data.remark,
           return_batch_id     = l_hm_vendor_pur_data.return_batch_id,
           action_batch_id     = l_hm_vendor_pur_data.action_batch_id,
           for_gvs             = l_hm_vendor_pur_data.for_gvs,
           audit_flag          = l_hm_vendor_pur_data.audit_flag,
           salesman            = l_hm_vendor_pur_data.salesman,
           create_apply_id     = l_hm_vendor_pur_data.create_apply_id
     WHERE row_id = l_hm_vendor_pur_data.row_id;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_vendor_purchase_type2db:' || SQLERRM;
  END prc_vendor_purchase_type2db;

  /****************************************************************
  功能描述：根据业务申请ID将业务申请信息触发成为相应的供应商主数据维护动作
  作者：    zhangbiao
  时间：    2009-04-01    
         
  输入参数说明： IN_APPLY_ID           业务申请单ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。根据业务类型分为三部分：创建、更新、扩展
       2。创建时将申请表中的数据分发到供应商表中即可
       3。更新时根据申请表中_X的内容更新供应商表
       4。扩展时根据扩展试图将数据分发到供应商表
       5,内部调用 prc_input_allcheck
  ****************************************************************/
  PROCEDURE prc_base_trans(vendor_exists_flag IN VARCHAR2,
                           in_user_name       IN VARCHAR2,
                           l_apply_vendor     IN OUT hm_apply_vendor%ROWTYPE,
                           l_hm_vendors       IN OUT hm_vendors%ROWTYPE,
                           retcode            OUT VARCHAR2,
                           retmsg             OUT VARCHAR2) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';
  
    IF l_apply_vendor.operate_type = 'CREATE' THEN
    
      l_hm_vendors.VENDOR_NAME            := l_apply_vendor.VENDOR_NAME; --供应商名称
      l_hm_vendors.VENDOR_CODE            := l_apply_vendor.VENDOR_CODE; --供应商编码;使用新的供应商编码规则供应商
      l_hm_vendors.BIDDER_NO              := l_apply_vendor.BIDDER_NO; --SRM临时号
      l_hm_vendors.SEARCH_TERM            := l_apply_vendor.SEARCH_TERM; --搜索项
      l_hm_vendors.STREET_ROOM            := l_apply_vendor.STREET_ROOM; --街道/房号;供应商注册地址
      l_hm_vendors.POSTAL_CODE_CITY       := l_apply_vendor.POSTAL_CODE_CITY; --邮政编码/城市;系统默认6位
      l_hm_vendors.COUNTRY                := l_apply_vendor.COUNTRY; --国家
      l_hm_vendors.REGION                 := l_apply_vendor.REGION; --地区
      l_hm_vendors.PHONE_NUMBER           := l_apply_vendor.PHONE_NUMBER; --电话
      l_hm_vendors.FAX_NUMBER             := l_apply_vendor.FAX_NUMBER; --传真
      l_hm_vendors.TAX_CODE               := l_apply_vendor.TAX_CODE; --纳税人登记号
      l_hm_vendors.ACCOUNT_GRP_CODE       := l_apply_vendor.ACCOUNT_GRP_CODE; --供应商账户组;使用新的供应商账户组的规则
      l_hm_vendors.EXTERNAL_MANUFACTURER  := l_apply_vendor.EXTERNAL_MANUFACTURER; --外部制造商;与R3对应的旧的供应商编号
      l_hm_vendors.INTL_AREA_CODE         := l_apply_vendor.INTL_AREA_CODE; --国际区位码 1;9-该供应商传输大宗系统
      l_hm_vendors.TRANS_AGENT_GRP        := l_apply_vendor.TRANS_AGENT_GRP; --货运代理运输组;供应商类别－A、辅料代理B、生产加工，用户可选择，单选
      l_hm_vendors.SERVICE_AGENT_PROC_GRP := l_apply_vendor.SERVICE_AGENT_PROC_GRP; --服务代理过程组
      l_hm_vendors.STATION                := l_apply_vendor.STATION; --物料类型(火车站)
      l_hm_vendors.VENDOR_TITLE           := l_apply_vendor.VENDOR_TITLE; --供应商TITLE
      l_hm_vendors.CUSTOMER_CODE          := l_apply_vendor.CUSTOMER_CODE; --客户编号
      l_hm_vendors.VENDOR_HQ              := l_apply_vendor.VENDOR_HQ; --总部(信用信息号)
      l_hm_vendors.CITY_STREET_ROOM       := l_apply_vendor.CITY_STREET_ROOM; --城市街道房号
      l_hm_vendors.LANGUAGE               := l_apply_vendor.LANGUAGE; --语言代码
      -- add baochh 20110623 业务码辨别
      l_hm_vendors.business_type  := l_apply_vendor.business_type;
      l_hm_vendors.operate_status := l_apply_vendor.operate_type;
    
      --l_hm_vendors.IS_NO_APPLY_FLAG := l_apply_vendor.IS_NO_APPLY_FLAG; --未经过GO引入标识
      --l_hm_vendors.DELETE_FLAG_PUR_ORG := l_apply_vendor.DELETE_FLAG_PUR_ORG; --供应商采购组织删除标记:0正常,1删除
      --l_hm_vendors.DELETE_FLAG_COMPANY := l_apply_vendor.DELETE_FLAG_COMPANY; --供应商公司删除标记:0正常,1删除
      --l_hm_vendors.EMAIL := l_apply_vendor.EMAIL; --电子邮件
      l_hm_vendors.COMPANY_SHARE   := l_apply_vendor.COMPANY_SHARE; --股份，行业代码 2
      l_hm_vendors.BU              := l_apply_vendor.BU; --BU，行业代码 3
      l_hm_vendors.PL              := l_apply_vendor.PL; --PL，行业代码 4
      l_hm_vendors.EXPIRY_DATE     := l_apply_vendor.EXPIRY_DATE; --有效期，名称 3
      l_hm_vendors.sub_company     := l_apply_vendor.sub_company;
      l_hm_vendors.business_belong := l_apply_vendor.business_belong;
      l_hm_vendors.tax_number1     := l_apply_vendor.tax_number1;
       l_hm_vendors.is_bank_debit     := l_apply_vendor.is_bank_debit;
    ELSIF l_apply_vendor.operate_type IN ('UPDATE', 'CHANGE') THEN
    
      if l_apply_vendor.VENDOR_NAME_x = 'X' then
        l_hm_vendors.VENDOR_NAME := l_apply_vendor.VENDOR_NAME; --供应商名称
      end if;
      if l_apply_vendor.BIDDER_NO_x = 'X' then
        l_hm_vendors.BIDDER_NO := l_apply_vendor.BIDDER_NO; --SRM临时号
      end if;
      if l_apply_vendor.SEARCH_TERM_x = 'X' then
        l_hm_vendors.SEARCH_TERM := l_apply_vendor.SEARCH_TERM; --搜索项
      end if;
      if l_apply_vendor.STREET_ROOM_x = 'X' then
        l_hm_vendors.STREET_ROOM := l_apply_vendor.STREET_ROOM; --街道/房号;供应商注册地址
      end if;
      if l_apply_vendor.POSTAL_CODE_CITY_x = 'X' then
        l_hm_vendors.POSTAL_CODE_CITY := l_apply_vendor.POSTAL_CODE_CITY; --邮政编码/城市;系统默认6位
      end if;
      if l_apply_vendor.COUNTRY_x = 'X' then
        l_hm_vendors.COUNTRY := l_apply_vendor.COUNTRY; --国家
      end if;
      if l_apply_vendor.REGION_x = 'X' then
        l_hm_vendors.REGION := l_apply_vendor.REGION; --地区
      end if;
      if l_apply_vendor.PHONE_NUMBER_x = 'X' then
        l_hm_vendors.PHONE_NUMBER := l_apply_vendor.PHONE_NUMBER; --电话
      end if;
      if l_apply_vendor.FAX_NUMBER_x = 'X' then
        l_hm_vendors.FAX_NUMBER := l_apply_vendor.FAX_NUMBER; --传真
      end if;
      if l_apply_vendor.TAX_CODE_x = 'X' then
        l_hm_vendors.TAX_CODE := l_apply_vendor.TAX_CODE; --纳税人登记号
      end if;
      if l_apply_vendor.ACCOUNT_GRP_CODE_x = 'X' then
        l_hm_vendors.ACCOUNT_GRP_CODE := l_apply_vendor.ACCOUNT_GRP_CODE; --供应商账户组;使用新的供应商账户组的规则
      end if;
      if l_apply_vendor.EXTERNAL_MANUFACTURER_x = 'X' then
        l_hm_vendors.EXTERNAL_MANUFACTURER := l_apply_vendor.EXTERNAL_MANUFACTURER; --外部制造商;与R3对应的旧的供应商编号
      end if;
      if l_apply_vendor.INTL_AREA_CODE_x = 'X' then
        l_hm_vendors.INTL_AREA_CODE := l_apply_vendor.INTL_AREA_CODE; --国际区位码 1;9-该供应商传输大宗系统
      end if;
      if l_apply_vendor.TRANS_AGENT_GRP_x = 'X' then
        l_hm_vendors.TRANS_AGENT_GRP := l_apply_vendor.TRANS_AGENT_GRP; --货运代理运输组;供应商类别－A、辅料代理B、生产加工，用户可选择，单选
      end if;
      if l_apply_vendor.SERVICE_AGENT_PROC_GRP_x = 'X' then
        l_hm_vendors.SERVICE_AGENT_PROC_GRP := l_apply_vendor.SERVICE_AGENT_PROC_GRP; --服务代理过程组
      end if;
      if l_apply_vendor.STATION_x = 'X' then
        l_hm_vendors.STATION := l_apply_vendor.STATION; --物料类型(火车站)
      end if;
      if l_apply_vendor.VENDOR_TITLE_x = 'X' then
        l_hm_vendors.VENDOR_TITLE := l_apply_vendor.VENDOR_TITLE; --供应商TITLE
      end if;
      if l_apply_vendor.CUSTOMER_CODE_x = 'X' then
        l_hm_vendors.CUSTOMER_CODE := l_apply_vendor.CUSTOMER_CODE; --客户编号
      end if;
      if l_apply_vendor.VENDOR_HQ_x = 'X' then
        l_hm_vendors.VENDOR_HQ := l_apply_vendor.VENDOR_HQ; --总部(信用信息号)
      end if;
      if l_apply_vendor.CITY_STREET_ROOM_x = 'X' then
        l_hm_vendors.CITY_STREET_ROOM := l_apply_vendor.CITY_STREET_ROOM; --城市街道房号
      end if;
      if l_apply_vendor.LANGUAGE_x = 'X' then
        l_hm_vendors.LANGUAGE := l_apply_vendor.LANGUAGE; --语言代码
      end if;
      /*          if l_apply_vendor.IS_NO_APPLY_FLAG_x = 'X' then
                  l_hm_vendors.IS_NO_APPLY_FLAG := l_apply_vendor.IS_NO_APPLY_FLAG; --未经过GO引入标识
                end if;
                if l_apply_vendor.DELETE_FLAG_PUR_ORG_x = 'X' then
                  l_hm_vendors.DELETE_FLAG_PUR_ORG := l_apply_vendor.DELETE_FLAG_PUR_ORG; --供应商采购组织删除标记:0正常,1删除
                end if;
                if l_apply_vendor.DELETE_FLAG_COMPANY_x = 'X' then
                  l_hm_vendors.DELETE_FLAG_COMPANY := l_apply_vendor.DELETE_FLAG_COMPANY; --供应商公司删除标记:0正常,1删除
                end if;
                if l_apply_vendor.EMAIL_x = 'X' then
                  l_hm_vendors.EMAIL := l_apply_vendor.EMAIL; --电子邮件
                end if;
      */
      if l_apply_vendor.COMPANY_SHARE_x = 'X' then
        l_hm_vendors.COMPANY_SHARE := l_apply_vendor.COMPANY_SHARE; --股份，行业代码 2
      end if;
      if l_apply_vendor.BU_x = 'X' then
        l_hm_vendors.BU := l_apply_vendor.BU; --BU，行业代码 3
      end if;
      if l_apply_vendor.PL_x = 'X' then
        l_hm_vendors.PL := l_apply_vendor.PL; --PL，行业代码 4
      end if;
      if l_apply_vendor.EXPIRY_DATE_x = 'X' then
        l_hm_vendors.EXPIRY_DATE := l_apply_vendor.EXPIRY_DATE; --有效期，名称 3
      end if;
      if l_apply_vendor.sub_company_x = 'X' then
        l_hm_vendors.sub_company := l_apply_vendor.sub_company; --有效期，名称 3
      end if;
      if l_apply_vendor.business_belong_x = 'X' then
        l_hm_vendors.business_belong := l_apply_vendor.business_belong; --有效期，名称 3
      end if;
      if l_apply_vendor.tax_number1_x = 'X' then
        l_hm_vendors.tax_number1 := l_apply_vendor.tax_number1; --有效期，名称 3
      end if;
      if l_apply_vendor.is_bank_debit_x = 'X' then
        l_hm_vendors.is_bank_debit := l_apply_vendor.is_bank_debit; --有效期，名称 3
      end if;
    END IF;
  
    --l_hm_vendors 数据填充完毕，往数据库回写处理
    IF vendor_exists_flag < 1 THEN
      if l_hm_vendors.vendor_code is null then
        l_hm_vendors.vendor_code := l_apply_vendor.vendor_code; --供应商编号(供应商编号.RF02D-KUNNR)
      end if;
      if l_hm_vendors.account_grp_code is null then
        l_hm_vendors.account_grp_code := l_apply_vendor.account_grp_code; --科目组(账户组.KNA1-KTOKD)[CustomerAccountGroup]
      end if;
    
      if l_hm_vendors.create_apply_id is null AND
         l_apply_vendor.operate_type = 'CREATE' then
        l_hm_vendors.create_apply_id := l_apply_vendor.apply_id; --创建业务申请单ID
      end if;
      if l_hm_vendors.vendor_code_temp is null and
         instr(l_apply_vendor.vendor_code, 'TEMP') > 0 then
        l_hm_vendors.vendor_code_temp := l_apply_vendor.vendor_code; --临时供应商编码
      end if;
    
      if l_apply_vendor.vendor_code is null then
        l_hm_vendors.generate_code_flag := '0'; --主数据编码生成(0,未生成,1,生成)
      else
        if instr(l_apply_vendor.vendor_code, 'TEMP') > 0 then
          l_hm_vendors.generate_code_flag := '0'; --主数据编码生成(0,未生成,1,生成)     
        else
          l_hm_vendors.generate_code_flag := '1'; --主数据编码生成(0,未生成,1,生成)     
        end if;
      end if;
    
      if l_hm_vendors.row_id is null then
        l_hm_vendors.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
      end if;
      if l_hm_vendors.created_by is null then
        l_hm_vendors.created_by := in_user_name; --创建人_通用字段
        l_hm_vendors.created    := sysdate; --创建时间_通用字段
      end if;
      l_hm_vendors.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_vendors.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_vendors.modification_num  := nvl(l_hm_vendors.modification_num,
                                            0) + 1; --修改次数_通用字段
      l_hm_vendors.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_vendors.version is null then
        l_hm_vendors.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
      end if;
      if l_hm_vendors.active_flag is null then
        l_hm_vendors.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
      end if;
      if l_hm_vendors.lock_flag is null then
        l_hm_vendors.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
      end if;
      if l_hm_vendors.delete_flag is null then
        l_hm_vendors.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
      end if;
      if l_hm_vendors.operate_status is null then
        l_hm_vendors.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_vendors.remark is null then
        l_hm_vendors.remark := l_apply_vendor.remark; --备注(可选)_通用字段
      end if;
      if l_hm_vendors.action_batch_id is null then
        l_hm_vendors.action_batch_id := l_apply_vendor.action_batch_id; --动作批次ID
      end if;
      if l_hm_vendors.business_type is null then
        l_hm_vendors.business_type := l_apply_vendor.business_type; --MDM业务类型
      end if;
      if l_hm_vendors.for_gvs is null THEN
        --if l_hm_vendors.view_base_x is null and
        --   l_hm_vendors.view_company_x is null and 
        --   l_hm_vendors.view_sales_x is null then
        --  l_hm_vendors.for_gvs := '0';
        --else
        --abb baochh 20110623 
      
        if l_hm_vendors.business_type = 'PL' and
           l_hm_vendors.account_grp_code = '1600' and
           l_hm_vendors.operate_status = 'CREATE' then
          l_hm_vendors.for_gvs := '0'; --是否传输至GVS(1,传输,0,不传)
        else
          l_hm_vendors.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
        end if;
        --end if;
      end if;
      if l_hm_vendors.audit_flag is null then
        l_hm_vendors.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
      end if;
    
      insert into hm_vendors values l_hm_vendors; -------------------------------
    
    elsif vendor_exists_flag = 1 then
    
      l_hm_vendors.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_vendors.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_vendors.modification_num  := nvl(l_hm_vendors.modification_num,
                                            0) + 1; --修改次数_通用字段
      l_hm_vendors.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_vendors.operate_status <> 'CREATE' then
        l_hm_vendors.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_vendors.action_batch_id is null then
        l_hm_vendors.action_batch_id := l_apply_vendor.action_batch_id; --动作批次ID
      end if;
    
      prc_vendor_type2db(l_hm_vendors, retcode, retmsg); ------------------------
      if retcode = 'E' then
        rollback;
        return;
      end if;
    ELSE
      retcode := 'E';
      retmsg  := 'prc_base_trans: 供应商信息存在，且多于一条!';
      ROLLBACK;
      RETURN;
    end if;
  
    comm_util.copy_table_line('hm_vendors',
                              '',
                              '_HIS',
                              l_hm_vendors.row_id,
                              retcode,
                              retmsg);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_base_trans:operate failure !' || SQLERRM;
  END prc_base_trans;

  PROCEDURE prc_bank_create(in_datavalue IN hm_apply_VENDOR_BANK%ROWTYPE,
                            in_VENDOR_id IN VARCHAR2,
                            in_user_name IN VARCHAR2,
                            retcode      OUT VARCHAR2,
                            retmsg       OUT VARCHAR2) IS
    l_apply_VENDOR_BANK       hm_apply_VENDOR_BANK%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    l_hm_VENDOR_bank_accounts hm_VENDOR_bank_accounts%ROWTYPE;
  
    --ls_partnerid VARCHAR2(20);
  
    li_count        INTEGER := 0;
    lv_bankid       VARCHAR2(20);
    l_business_code VARCHAR2(30);
  
  BEGIN
    retcode := 'S';
    retmsg  := 'The bank create success ! ';
  
    l_apply_VENDOR_BANK := in_datavalue;
  
    select a.business_code
      into l_business_code
      from hm_apply_vendor a
     where a.row_id = l_apply_VENDOR_BANK.Apply_Vendor_Id;
  
    IF l_apply_VENDOR_BANK.Row_Status = 'UPDATED' THEN
      lv_bankid := l_apply_VENDOR_BANK.OLD_ROW_ID;
    
      for row_count in (select *
                          from hm_vendor_bank_accounts t
                         where t.row_id = lv_bankid) loop
        l_hm_VENDOR_bank_accounts := row_count;
      end loop;
    
      if l_hm_VENDOR_bank_accounts.bank_country <>
         l_apply_VENDOR_BANK.bank_country or l_hm_VENDOR_bank_accounts.bank_name <>
         l_apply_VENDOR_BANK.bank_name or
         l_hm_VENDOR_bank_accounts.bank_branch_code <>
         l_apply_VENDOR_BANK.bank_branch_code or
         l_hm_VENDOR_bank_accounts.bank_account_num <>
         l_apply_VENDOR_BANK.bank_account_num or
         l_hm_VENDOR_bank_accounts.account_holder_name <>
         l_apply_VENDOR_BANK.account_holder_name or
         l_hm_VENDOR_bank_accounts.active_range <>
         l_apply_VENDOR_BANK.active_range or
         l_hm_VENDOR_bank_accounts.active_class <>
         l_apply_VENDOR_BANK.active_class or
         l_hm_VENDOR_bank_accounts.active_desc <>
         l_apply_VENDOR_BANK.active_desc then
      
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS',
                                  '',
                                  '_HIS',
                                  lv_bankid,
                                  retcode,
                                  retmsg);
      
        UPDATE hm_vendor_bank_accounts
           SET last_upd_by = IN_USER_NAME,
               last_upd    = SYSDATE,
               delete_flag = '1'
         WHERE row_id = lv_bankid;
      
        /*      UPDATE hm_vendor_bank_accounts
          SET account_holder_name = l_apply_VENDOR_BANK.account_holder_name,
              bank_country = l_apply_VENDOR_BANK.bank_country,
              bank_account_num = l_apply_VENDOR_BANK.bank_account_num,
              bank_name = l_apply_VENDOR_BANK.bank_name,
              bank_branch_code = l_apply_VENDOR_BANK.bank_branch_code,
              last_upd_by = IN_USER_NAME,
              last_upd = SYSDATE,
              modification_num = modification_num + 1,
              last_version_flag = '2',
              operate_status = 'UPDATE',
              active_range = l_apply_VENDOR_BANK.active_range,
              active_class = l_apply_VENDOR_BANK.active_class,
              active_desc = l_apply_VENDOR_BANK.active_desc
        WHERE row_id = lv_bankid;*/
      
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS',
                                  '',
                                  '_HIS',
                                  lv_bankid,
                                  retcode,
                                  retmsg);
      
        --创建/扩展客户银行账户信息
        lv_bankid := comm_util.func_new_rowid();
      
        l_hm_VENDOR_bank_accounts.row_id              := lv_bankid;
        l_hm_VENDOR_bank_accounts.VENDOR_id           := in_VENDOR_id;
        l_hm_VENDOR_bank_accounts.bank_country        := l_apply_VENDOR_BANK.bank_country;
        l_hm_VENDOR_bank_accounts.bank_name           := l_apply_VENDOR_BANK.bank_name;
        l_hm_VENDOR_bank_accounts.bank_branch_code    := l_apply_VENDOR_BANK.bank_branch_code;
        l_hm_VENDOR_bank_accounts.bank_account_num    := l_apply_VENDOR_BANK.bank_account_num;
        l_hm_VENDOR_bank_accounts.account_holder_name := l_apply_VENDOR_BANK.account_holder_name;
        l_hm_VENDOR_bank_accounts.active_range        := l_apply_VENDOR_BANK.active_range;
        l_hm_VENDOR_bank_accounts.active_class        := l_apply_VENDOR_BANK.active_class;
        l_hm_VENDOR_bank_accounts.active_desc         := l_apply_VENDOR_BANK.active_desc;
      
        --20150407zll 印度贸易公司上线，审批流中业务类型为海外的，供应商银行视图字段维护需要跟hopemdm字段一致
        l_hm_VENDOR_bank_accounts.bank_control_key  := l_apply_VENDOR_BANK.bank_control_key;
        l_hm_VENDOR_bank_accounts.instruction_key   := l_apply_VENDOR_BANK.instruction_key;
        l_hm_VENDOR_bank_accounts.iban_code         := l_apply_VENDOR_BANK.iban_code;
        l_hm_VENDOR_bank_accounts.bank_currency     := l_apply_VENDOR_BANK.bank_currency;
        l_hm_VENDOR_bank_accounts.bank_valdate      := l_apply_VENDOR_BANK.bank_valdate;
        l_hm_VENDOR_bank_accounts.partner_bank_type := l_apply_VENDOR_BANK.partner_bank_type;
      
        l_hm_VENDOR_bank_accounts.created_by        := in_user_name;
        l_hm_VENDOR_bank_accounts.created           := SYSDATE;
        l_hm_VENDOR_bank_accounts.last_upd_by       := in_user_name;
        l_hm_VENDOR_bank_accounts.last_upd          := SYSDATE;
        l_hm_VENDOR_bank_accounts.modification_num  := 0;
        l_hm_VENDOR_bank_accounts.active_flag       := '1';
        l_hm_VENDOR_bank_accounts.version           := '1.0';
        l_hm_VENDOR_bank_accounts.last_version_flag := '2';
        l_hm_VENDOR_bank_accounts.operate_status    := 'CREATE';
        l_hm_VENDOR_bank_accounts.lock_flag         := '0';
        if l_hm_VENDOR_bank_accounts.bank_country = 'US' then
          l_hm_VENDOR_bank_accounts.for_gvs := '0';
        else
          l_hm_VENDOR_bank_accounts.For_Gvs := '1';
        end if;
        if l_business_code like '%HW%' then
          l_hm_VENDOR_bank_accounts.for_gvs := '0';
        end if;
        l_hm_VENDOR_bank_accounts.delete_flag := '0';
      
        INSERT INTO hm_VENDOR_bank_accounts
        VALUES l_hm_VENDOR_bank_accounts;
      
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS',
                                  '',
                                  '_HIS',
                                  lv_bankid,
                                  retcode,
                                  retmsg);
      
      end if;
    
    ELSIF l_apply_VENDOR_BANK.Row_Status = 'INSERTED' THEN
      SELECT COUNT(*), MAX(t.row_id)
        INTO li_count, lv_bankid
        FROM hm_VENDOR_bank_accounts t
       WHERE t.bank_country = l_apply_VENDOR_BANK.bank_country
         AND t.bank_branch_code = l_apply_VENDOR_BANK.bank_branch_code
         AND t.account_holder_name =
             l_apply_VENDOR_BANK.account_holder_name
         AND t.VENDOR_id = in_VENDOR_id
         AND T.DELETE_FLAG = '0';
    
      IF li_count < 1 THEN
      
        --创建/扩展客户银行账户信息
        lv_bankid := comm_util.func_new_rowid();
      
        /*          if l_apply_VENDOR_BANK.Bank_Account_Num is null then 
                     l_apply_VENDOR_BANK.Bank_Account_Num := '1';
                  end if;
                  
                  if l_apply_VENDOR_BANK.bank_country is null then 
                     l_apply_VENDOR_BANK.bank_country := 'CN';
                  end if;     
        */
        l_hm_VENDOR_bank_accounts.row_id              := lv_bankid;
        l_hm_VENDOR_bank_accounts.VENDOR_id           := in_VENDOR_id;
        l_hm_VENDOR_bank_accounts.bank_country        := l_apply_VENDOR_BANK.bank_country;
        l_hm_VENDOR_bank_accounts.bank_name           := l_apply_VENDOR_BANK.bank_name;
        l_hm_VENDOR_bank_accounts.bank_branch_code    := l_apply_VENDOR_BANK.bank_branch_code;
        l_hm_VENDOR_bank_accounts.bank_account_num    := l_apply_VENDOR_BANK.bank_account_num;
        l_hm_VENDOR_bank_accounts.account_holder_name := l_apply_VENDOR_BANK.account_holder_name;
        l_hm_VENDOR_bank_accounts.active_range        := l_apply_VENDOR_BANK.active_range;
        l_hm_VENDOR_bank_accounts.active_class        := l_apply_VENDOR_BANK.active_class;
        l_hm_VENDOR_bank_accounts.active_desc         := l_apply_VENDOR_BANK.active_desc;
      
        --20150407zll 印度贸易公司上线，审批流中业务类型为海外的，供应商银行视图字段维护需要跟hopemdm字段一致
        l_hm_VENDOR_bank_accounts.bank_control_key  := l_apply_VENDOR_BANK.bank_control_key;
        l_hm_VENDOR_bank_accounts.instruction_key   := l_apply_VENDOR_BANK.instruction_key;
        l_hm_VENDOR_bank_accounts.iban_code         := l_apply_VENDOR_BANK.iban_code;
        l_hm_VENDOR_bank_accounts.bank_currency     := l_apply_VENDOR_BANK.bank_currency;
        l_hm_VENDOR_bank_accounts.bank_valdate      := l_apply_VENDOR_BANK.bank_valdate;
        l_hm_VENDOR_bank_accounts.partner_bank_type := l_apply_VENDOR_BANK.partner_bank_type;
      
        l_hm_VENDOR_bank_accounts.row_id            := lv_bankid;
        l_hm_VENDOR_bank_accounts.created_by        := in_user_name;
        l_hm_VENDOR_bank_accounts.created           := SYSDATE;
        l_hm_VENDOR_bank_accounts.last_upd_by       := in_user_name;
        l_hm_VENDOR_bank_accounts.last_upd          := SYSDATE;
        l_hm_VENDOR_bank_accounts.modification_num  := 0;
        l_hm_VENDOR_bank_accounts.active_flag       := '1';
        l_hm_VENDOR_bank_accounts.version           := '1.0';
        l_hm_VENDOR_bank_accounts.last_version_flag := '2';
        l_hm_VENDOR_bank_accounts.operate_status    := 'CREATE';
        l_hm_VENDOR_bank_accounts.lock_flag         := '0';
        if l_hm_VENDOR_bank_accounts.bank_country = 'US' then
          l_hm_VENDOR_bank_accounts.for_gvs := '0';
        else
          l_hm_VENDOR_bank_accounts.For_Gvs := '1';
        end if;
        if l_business_code like '%HW%' then
          l_hm_VENDOR_bank_accounts.for_gvs := '0';
        end if;
        l_hm_VENDOR_bank_accounts.delete_flag := '0';
      
        INSERT INTO hm_VENDOR_bank_accounts
        VALUES l_hm_VENDOR_bank_accounts;
        comm_util.copy_table_line('HM_VENDOR_BANK_ACCOUNTS',
                                  '',
                                  '_HIS',
                                  lv_bankid,
                                  retcode,
                                  retmsg);
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'The bank create error ! ' || SQLERRM;
  END prc_bank_create;

  PROCEDURE prc_company_trans(vendor_company_exists_flag IN VARCHAR2,
                              in_user_name               IN VARCHAR2,
                              l_apply_vendor             IN hm_apply_vendor%ROWTYPE,
                              l_apply_vendor_company     IN OUT hm_apply_vendor_company%ROWTYPE,
                              l_hm_VENDOR_company_data   IN OUT hm_VENDOR_company_data%ROWTYPE,
                              retcode                    OUT VARCHAR2,
                              retmsg                     OUT VARCHAR2) IS
    --add baochh 20110623
    temp_msg1 VARCHAR2(20) := '';
    temp_msg2 VARCHAR2(20) := '';
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_company_trans:operate success !';
  
    IF l_apply_vendor.operate_type IN ('CREATE', 'EXTEND', 'CHANGE') OR
       (l_apply_vendor.operate_type = 'UPDATE' /*AND l_apply_vendor.companycode_list_x = 'X'*/
       ) THEN
    
      l_hm_VENDOR_company_data.reconcile_account        := l_apply_vendor_company.reconcile_account;
      l_hm_VENDOR_company_data.hq                       := l_apply_vendor_company.hq;
      l_hm_VENDOR_company_data.reference_account_number := l_apply_vendor_company.reference_account_number;
      l_hm_VENDOR_company_data.sequence_no              := l_apply_vendor_company.sequence_no;
      l_hm_VENDOR_company_data.cash_mgt_group           := l_apply_vendor_company.cash_mgt_group;
      l_hm_VENDOR_company_data.accounting_customer      := l_apply_vendor_company.accounting_customer;
      l_hm_VENDOR_company_data.payment_term             := l_apply_vendor_company.payment_term_company;
      l_hm_VENDOR_company_data.payment_method           := l_apply_vendor_company.payment_method;
      l_hm_VENDOR_company_data.tolerance_group          := l_apply_vendor_company.tolerance_group;
      l_hm_VENDOR_company_data.account_remark           := l_apply_vendor_company.account_remark;
    
    END IF;
  
    --l_hm_VENDOR_company_data 数据填充完毕，往数据库回写处理
    IF vendor_company_exists_flag < 1 THEN
    
      --customer_id, company_code 已经在外部填充
    
      if l_hm_VENDOR_company_data.create_apply_id is null AND
         l_apply_vendor.operate_type IN ('CREATE', 'EXTEND') then
        l_hm_VENDOR_company_data.create_apply_id := l_apply_vendor.apply_id; --创建业务申请单ID
      end if;
    
      if l_hm_VENDOR_company_data.row_id is null then
        l_hm_VENDOR_company_data.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
      end if;
      if l_hm_VENDOR_company_data.created_by is null then
        l_hm_VENDOR_company_data.created_by := in_user_name; --创建人_通用字段
        l_hm_VENDOR_company_data.created    := sysdate; --创建时间_通用字段
      end if;
      l_hm_VENDOR_company_data.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_VENDOR_company_data.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_VENDOR_company_data.modification_num  := nvl(l_hm_VENDOR_company_data.modification_num,
                                                        0) + 1; --修改次数_通用字段
      l_hm_VENDOR_company_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_VENDOR_company_data.version is null then
        l_hm_VENDOR_company_data.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_company_data.active_flag is null then
        l_hm_VENDOR_company_data.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
      end if;
      if l_hm_VENDOR_company_data.lock_flag is null then
        l_hm_VENDOR_company_data.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
      end if;
      if l_hm_VENDOR_company_data.delete_flag is null then
        l_hm_VENDOR_company_data.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
      end if;
      if l_hm_VENDOR_company_data.operate_status is null then
        l_hm_VENDOR_company_data.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_company_data.remark is null then
        l_hm_VENDOR_company_data.remark := l_apply_vendor_company.remark; --备注(可选)_通用字段
      end if;
      if l_hm_VENDOR_company_data.action_batch_id is null then
        l_hm_VENDOR_company_data.action_batch_id := l_apply_vendor_company.action_batch_id; --动作批次ID
      end if;
      --update by baochh 20110623
      if l_hm_VENDOR_company_data.for_gvs is null then
        --查询中间表
        select DECODE(parent_value_high, null, '0', '1') parent_value_high
          into temp_msg1
          from hm_fnd_values ss
         where ss.value = l_hm_VENDOR_company_data.Company_Code
           and ss.value_set_id = 'CompanyCode';
        --查询基本表    
        select distinct For_Gvs
          into temp_msg2
          from hm_vendors hvs
         where hvs.vendor_code = l_apply_vendor.vendor_code;
        if l_apply_vendor.operate_type = 'CREATE' then
          if temp_msg2 = '0' then
            l_hm_VENDOR_company_data.For_Gvs := '0';
          elsif temp_msg2 = '1' then
            if temp_msg1 = '1' then
              l_hm_VENDOR_company_data.For_Gvs := '1';
            else
              l_hm_VENDOR_company_data.For_Gvs := '0';
            end if;
          end if;
        elsif l_apply_vendor.operate_type = 'EXTEND' THEN
          if temp_msg2 = '0' then
            l_hm_VENDOR_company_data.For_Gvs := '0';
          elsif temp_msg2 = '1' then
            if temp_msg1 = '1' then
              l_hm_VENDOR_company_data.For_Gvs := '1';
            else
              l_hm_VENDOR_company_data.For_Gvs := '0';
            end if;
          end if;
        end if;
      
        -- else  l_hm_VENDOR_company_data.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
      end if;
    
      if l_hm_VENDOR_company_data.audit_flag is null then
        l_hm_VENDOR_company_data.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
      end if;
    
      insert into hm_VENDOR_company_data values l_hm_VENDOR_company_data; -------------------------------
      ---在这里增加税视图的转换
      --liuzhilong
      ---2015年6月3日14:44:47
      prc_company_tax_trans(in_user_name,
                            l_apply_vendor_company,
                            l_hm_VENDOR_company_data,
                            retcode,
                            retmsg);
      if retcode = 'E' then
        rollback;
        return;
      end if;
    elsif vendor_company_exists_flag = 1 then
    
      l_hm_VENDOR_company_data.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_VENDOR_company_data.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_VENDOR_company_data.modification_num  := nvl(l_hm_VENDOR_company_data.modification_num,
                                                        0) + 1; --修改次数_通用字段
      l_hm_VENDOR_company_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_VENDOR_company_data.operate_status <> 'CREATE' then
        l_hm_VENDOR_company_data.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_company_data.action_batch_id is null then
        l_hm_VENDOR_company_data.action_batch_id := l_apply_vendor_company.action_batch_id; --动作批次ID
      end if;
    
      prc_vendor_company_type2db(l_hm_VENDOR_company_data, retcode, retmsg); ------------------------
      if retcode = 'E' then
        rollback;
        return;
      end if;
      ---在这里增加税视图的转换
      --liuzhilong
      ---2015年6月3日14:44:47
      prc_company_tax_trans(in_user_name,
                            l_apply_vendor_company,
                            l_hm_VENDOR_company_data,
                            retcode,
                            retmsg);
      if retcode = 'E' then
        rollback;
        return;
      end if;
    ELSE
      retcode := 'E';
      retmsg  := 'prc_company_trans: 公司代码存在，且多于一条!';
      ROLLBACK;
      RETURN;
    end if;
  
    comm_util.copy_table_line('HM_VENDOR_COMPANY_DATA',
                              '',
                              '_HIS',
                              l_hm_VENDOR_company_data.row_id,
                              retcode,
                              retmsg);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_company_trans:operate failure !' || SQLERRM;
  END prc_company_trans;

  PROCEDURE prc_partner_create(in_datavalue   IN hm_apply_vendor_purchase%ROWTYPE,
                               in_vendor_code IN VARCHAR2,
                               in_purchase_id IN VARCHAR2,
                               in_user_name   IN VARCHAR2,
                               retcode        OUT VARCHAR2,
                               retmsg         OUT VARCHAR2) IS
  
    /*
    OA  订货地址
    PI  出票方
    VN  供应商
    */
    l_apply_vendor       hm_apply_vendor_purchase%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    l_hm_vendor_partners hm_vendor_partners%ROWTYPE;
  
    li_count      INTEGER := 0;
    lv_partnerid  VARCHAR2(20);
    l_vendor_code VARCHAR2(30);
  
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_partner_create:The partner create success ! ';
  
    l_apply_vendor := in_datavalue;
  
    -- VN 方处理
    SELECT COUNT(*), MAX(t.row_id)
      INTO li_count, lv_partnerid
      FROM hm_vendor_partners t
     WHERE t.partner_function = 'VN'
       AND t.partner_subject_id = in_vendor_code
       AND t.pur_grp_id = in_purchase_id;
  
    IF li_count < 1 THEN
      --创建/扩展客户合作伙伴信息
      lv_partnerid := comm_util.func_new_rowid();
    
      l_hm_vendor_partners.partner_function   := 'VN';
      l_hm_vendor_partners.partner_subject_id := in_vendor_code;
      l_hm_vendor_partners.pur_grp_id         := in_purchase_id;
    
      l_hm_vendor_partners.row_id            := lv_partnerid;
      l_hm_vendor_partners.created_by        := in_user_name;
      l_hm_vendor_partners.created           := SYSDATE;
      l_hm_vendor_partners.last_upd_by       := in_user_name;
      l_hm_vendor_partners.last_upd          := SYSDATE;
      l_hm_vendor_partners.modification_num  := 0;
      l_hm_vendor_partners.active_flag       := '1';
      l_hm_vendor_partners.version           := '1.0';
      l_hm_vendor_partners.last_version_flag := '2';
      l_hm_vendor_partners.operate_status    := 'CREATE';
      l_hm_vendor_partners.lock_flag         := '0';
      l_hm_vendor_partners.for_gvs           := '1';
      l_hm_vendor_partners.delete_flag       := '0';
    
      INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
      comm_util.copy_table_line('HM_VENDOR_PARTNERS',
                                '',
                                '_HIS',
                                lv_partnerid,
                                retcode,
                                retmsg);
    
      --ELSE 
      --retcode := 'E';
      --retmsg := 'prc_partner_create:VN合作伙伴信息异常，请检查数据！';
    END IF;
  
    -- OA 方处理
    SELECT COUNT(*), MAX(t.row_id)
      INTO li_count, lv_partnerid
      FROM hm_vendor_partners t
     WHERE t.partner_function = 'OA'
       AND t.partner_subject_id = in_vendor_code
       AND t.pur_grp_id = in_purchase_id;
  
    IF li_count < 1 THEN
      --创建/扩展客户合作伙伴信息
      lv_partnerid := comm_util.func_new_rowid();
    
      l_hm_vendor_partners.partner_function   := 'OA';
      l_hm_vendor_partners.partner_subject_id := in_vendor_code;
      l_hm_vendor_partners.pur_grp_id         := in_purchase_id;
    
      l_hm_vendor_partners.row_id            := lv_partnerid;
      l_hm_vendor_partners.created_by        := in_user_name;
      l_hm_vendor_partners.created           := SYSDATE;
      l_hm_vendor_partners.last_upd_by       := in_user_name;
      l_hm_vendor_partners.last_upd          := SYSDATE;
      l_hm_vendor_partners.modification_num  := 0;
      l_hm_vendor_partners.active_flag       := '1';
      l_hm_vendor_partners.version           := '1.0';
      l_hm_vendor_partners.last_version_flag := '2';
      l_hm_vendor_partners.operate_status    := 'CREATE';
      l_hm_vendor_partners.lock_flag         := '0';
      l_hm_vendor_partners.for_gvs           := '1';
      l_hm_vendor_partners.delete_flag       := '0';
    
      INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
      comm_util.copy_table_line('HM_VENDOR_PARTNERS',
                                '',
                                '_HIS',
                                lv_partnerid,
                                retcode,
                                retmsg);
    
      --ELSE 
      --retcode := 'E';
      --retmsg := 'prc_partner_create:OA合作伙伴信息异常，请检查数据！';
    END IF;
  
    -- PI 方处理
  
    l_vendor_code := '';
    IF l_apply_vendor.partner_pi IS NOT NULL THEN
      l_vendor_code := l_apply_vendor.partner_pi;
    ELSE
      l_vendor_code := in_vendor_code;
    END if;
  
    SELECT COUNT(*), MAX(t.row_id)
      INTO li_count, lv_partnerid
      FROM hm_vendor_partners t
     WHERE t.partner_function = 'PI'
       AND t.partner_subject_id = l_vendor_code
       AND t.pur_grp_id = in_purchase_id;
  
    IF li_count < 1 THEN
    
      --创建/扩展客户合作伙伴信息
      lv_partnerid := comm_util.func_new_rowid();
    
      l_hm_vendor_partners.partner_function   := 'PI';
      l_hm_vendor_partners.partner_subject_id := l_vendor_code;
      l_hm_vendor_partners.pur_grp_id         := in_purchase_id;
    
      l_hm_vendor_partners.row_id            := lv_partnerid;
      l_hm_vendor_partners.created_by        := in_user_name;
      l_hm_vendor_partners.created           := SYSDATE;
      l_hm_vendor_partners.last_upd_by       := in_user_name;
      l_hm_vendor_partners.last_upd          := SYSDATE;
      l_hm_vendor_partners.modification_num  := 0;
      l_hm_vendor_partners.active_flag       := '1';
      l_hm_vendor_partners.version           := '1.0';
      l_hm_vendor_partners.last_version_flag := '2';
      l_hm_vendor_partners.operate_status    := 'CREATE';
      l_hm_vendor_partners.lock_flag         := '0';
      l_hm_vendor_partners.for_gvs           := '1';
      l_hm_vendor_partners.delete_flag       := '0';
    
      INSERT INTO hm_vendor_partners VALUES l_hm_vendor_partners;
      comm_util.copy_table_line('HM_VENDOR_PARTNERS',
                                '',
                                '_HIS',
                                lv_partnerid,
                                retcode,
                                retmsg);
    
      DELETE FROM HM_VENDOR_PARTNERS T
       WHERE t.partner_function = 'PI'
         AND t.partner_subject_id <> l_vendor_code
         AND t.pur_grp_id = in_purchase_id;
    
      --ELSE 
      --retcode := 'E';
      --retmsg := 'prc_partner_create:PI合作伙伴信息异常，请检查数据！'||li_count;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'The partner create error:' || SQLERRM;
  END prc_partner_create;

  PROCEDURE prc_purchase_trans(vendor_purchase_exists_flag IN VARCHAR2,
                               in_user_name                IN VARCHAR2,
                               l_apply_vendor              IN hm_apply_vendor%ROWTYPE,
                               l_apply_vendor_purchase     IN OUT hm_apply_vendor_purchase%ROWTYPE,
                               l_hm_VENDOR_purchase_data   IN OUT hm_VENDOR_pur_data%ROWTYPE,
                               retcode                     OUT VARCHAR2,
                               retmsg                      OUT VARCHAR2) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_purchase_trans:operate success !';
  
    IF l_apply_vendor.operate_type IN ('CREATE', 'EXTEND', 'CHANGE') OR
       (l_apply_vendor.operate_type = 'UPDATE' /*AND l_apply_vendor.purchasecode_list_x = 'X'*/
       ) THEN
    
      l_hm_VENDOR_purchase_data.ORDER_CURRENCY      := l_apply_vendor_purchase.ORDER_CURRENCY;
      l_hm_VENDOR_purchase_data.AUTO_GENERATE_ORDER := l_apply_vendor_purchase.AUTO_GENERATE_ORDER;
      l_hm_VENDOR_purchase_data.PAYMENT_TERM        := l_apply_vendor_purchase.payment_term_purchase;
      l_hm_VENDOR_purchase_data.SALESMAN            := l_apply_vendor_purchase.SALESMAN;
    
    END IF;
  
    --l_hm_VENDOR_purchase_data 数据填充完毕，往数据库回写处理
    IF vendor_purchase_exists_flag < 1 THEN
    
      --customer_id, purchase_code 已经在外部填充
    
      if l_hm_VENDOR_purchase_data.create_apply_id is null AND
         l_apply_vendor.operate_type IN ('CREATE', 'EXTEND') then
        l_hm_VENDOR_purchase_data.create_apply_id := l_apply_vendor.apply_id; --创建业务申请单ID
      end if;
    
      if l_hm_VENDOR_purchase_data.row_id is null then
        l_hm_VENDOR_purchase_data.row_id := comm_util.FUNC_NEW_ROWID(); --信息ID_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.created_by is null then
        l_hm_VENDOR_purchase_data.created_by := in_user_name; --创建人_通用字段
        l_hm_VENDOR_purchase_data.created    := sysdate; --创建时间_通用字段
      end if;
      l_hm_VENDOR_purchase_data.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_VENDOR_purchase_data.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_VENDOR_purchase_data.modification_num  := nvl(l_hm_VENDOR_purchase_data.modification_num,
                                                         0) + 1; --修改次数_通用字段
      l_hm_VENDOR_purchase_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_VENDOR_purchase_data.version is null then
        l_hm_VENDOR_purchase_data.version := '1.0'; --版本号,步幅0.1(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.active_flag is null then
        l_hm_VENDOR_purchase_data.active_flag := '1'; --使用标记:1正常,0未使用(可选)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.lock_flag is null then
        l_hm_VENDOR_purchase_data.lock_flag := '0'; --办理锁定标记:0正常,1锁定(基本视图主表)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.delete_flag is null then
        l_hm_VENDOR_purchase_data.delete_flag := '0'; --删除标记:0正常,1删除(可选)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.operate_status is null then
        l_hm_VENDOR_purchase_data.operate_status := 'CREATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.remark is null then
        l_hm_VENDOR_purchase_data.remark := l_apply_vendor_purchase.remark; --备注(可选)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.action_batch_id is null then
        l_hm_VENDOR_purchase_data.action_batch_id := l_apply_vendor_purchase.action_batch_id; --动作批次ID
      end if;
      if l_hm_VENDOR_purchase_data.for_gvs is null then
        l_hm_VENDOR_purchase_data.for_gvs := '1'; --是否传输至GVS(1,传输,0,不传)
      end if;
      if l_hm_VENDOR_purchase_data.audit_flag is null then
        l_hm_VENDOR_purchase_data.audit_flag := '1'; --发布审核标志(0,未审核,1,审核)
      end if;
       --2015年7月22日10:06:19
      ---增加逻辑  印度供应商 3100账户组的 增加的时候默认供应商方案组 为Z2
      if l_apply_vendor_purchase.Purchase_Grp_Code = '6600' and l_apply_vendor.account_grp_code = '3100'
      then
        l_hm_VENDOR_purchase_data.Schema_Group  :='Z2';
       end if;
      insert into hm_VENDOR_pur_data values l_hm_VENDOR_purchase_data; -------------------------------
    
    elsif vendor_purchase_exists_flag = 1 then
    
      l_hm_VENDOR_purchase_data.last_upd_by       := in_user_name; --最后更新人_通用字段
      l_hm_VENDOR_purchase_data.last_upd          := sysdate; --最后更新时间_通用字段
      l_hm_VENDOR_purchase_data.modification_num  := nvl(l_hm_VENDOR_purchase_data.modification_num,
                                                         0) + 1; --修改次数_通用字段
      l_hm_VENDOR_purchase_data.last_version_flag := '2'; --最新版本标记:1最新版本,0历史版本(每视图主表)_通用字段
      if l_hm_VENDOR_purchase_data.operate_status <> 'CREATE' then
        l_hm_VENDOR_purchase_data.operate_status := 'UPDATE'; --操作状态:CREATE,UPDATE,NVL(每视图主表)_通用字段
      end if;
      if l_hm_VENDOR_purchase_data.action_batch_id is null then
        l_hm_VENDOR_purchase_data.action_batch_id := l_apply_vendor_purchase.action_batch_id; --动作批次ID
      end if;
    
      prc_vendor_purchase_type2db(l_hm_VENDOR_purchase_data,
                                  retcode,
                                  retmsg); ------------------------
      if retcode = 'E' then
        rollback;
        return;
      end if;
    ELSE
      retcode := 'E';
      retmsg  := 'prc_purchase_trans: 公司代码存在，且多于一条!';
      ROLLBACK;
      RETURN;
    end if;
  
    comm_util.copy_table_line('HM_VENDOR_PUR_DATA',
                              '',
                              '_HIS',
                              l_hm_VENDOR_purchase_data.row_id,
                              retcode,
                              retmsg);
  
    --for partner
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_purchase_trans:operate failure !' || SQLERRM;
  END prc_purchase_trans;

  procedure prc_tmpcode2mastercode(in_tmpcode_type IN VARCHAR2, --vendor_code,MANAGER_vendor
                                   IN_tempcode     in varchar2, --ROWID
                                   out_mastercode  out varchar2,
                                   retcode         out varchar2, --返回码
                                   retmsg          out varchar2 --返回消息                                  
                                   ) is
    lv_businesstype varchar2(20) := '';
  begin
  
    retcode := 'S';
    retmsg  := 'prc_tmpcode2mastercode:获取正式编码成功!';
  
    out_mastercode := IN_tempcode;
  
    IF instr(IN_tempcode, 'TEMP') > 0 THEN
      IF in_tmpcode_type = 'VENDOR_CODE' THEN
        FOR cur_rows IN (select account_grp_code,
                                operate_status,
                                vendor_code
                           from hm_vendors
                          where vendor_code = IN_tempcode) LOOP
          generate_code.generate_master_code('VENDOR',
                                             cur_rows.account_grp_code,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND NOT instr(out_mastercode, 'TEMP') > 0 AND
             out_mastercode IS NOT NULL THEN
            retcode := 'S';
          ELSE
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
        
          --更新申请单
          UPDATE hm_apply_vendor
             SET vendor_code = out_mastercode
           WHERE vendor_code = IN_tempcode;
        
          --更新申请单_pur
          UPDATE hm_apply_vendor_purchase
             SET PARTNER_PI = out_mastercode
           WHERE PARTNER_PI = IN_tempcode;
        
          --更新申请转化日志
          UPDATE hm_applys_transactions
             SET master_row_code = out_mastercode
           WHERE master_row_code = IN_tempcode;
        
          --更新供应商主数据
          UPDATE hm_vendors
             SET vendor_code = out_mastercode, generate_code_flag = '1'
           WHERE vendor_code = IN_tempcode;
        
          --更新供应商合作伙伴
          UPDATE hm_vendor_partners
             SET partner_subject_id = out_mastercode
           WHERE partner_subject_id = IN_tempcode;
        
        END LOOP;
      
      ELSE
        out_mastercode := IN_tempcode;
      END IF;
    
    END IF;
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := 'prc_tmpcode2mastercode:获取正式编码失败!' || sqlerrm;
  end prc_tmpcode2mastercode;

  PROCEDURE prc_file_apply2data(in_apply_table_code IN VARCHAR2,
                                in_apply_row_id     IN VARCHAR2,
                                in_data_table_code  IN VARCHAR2,
                                in_data_row_id      IN VARCHAR2,
                                in_user_name        IN VARCHAR2,
                                retcode             OUT VARCHAR2,
                                retmsg              OUT VARCHAR2) IS
    l_hm_affix_inf hm_affix_inf%ROWTYPE;
  
  BEGIN
    retcode := 'S';
    retmsg  := '文件附件复制成功!';
  
    FOR cur_rows IN (SELECT *
                       FROM hm_affix_inf t
                      WHERE t.table_code = in_apply_table_code
                        AND t.record_id = in_apply_row_id) LOOP
      l_hm_affix_inf := cur_rows;
    
      FOR cur_rows2 IN (SELECT COUNT(*) row_count
                          FROM hm_affix_inf t
                         WHERE t.table_code = in_data_table_code
                           AND t.record_id = in_data_row_id
                           AND t.remark = cur_rows.remark) LOOP
        IF cur_rows2.row_count < 1 THEN
          l_hm_affix_inf.row_id       := comm_util.FUNC_NEW_ROWID;
          l_hm_affix_inf.table_code   := in_data_table_code;
          l_hm_affix_inf.record_id    := in_data_row_id;
          l_hm_affix_inf.created_by   := in_user_name;
          l_hm_affix_inf.created_date := SYSDATE;
          l_hm_affix_inf.attribute1   := in_apply_table_code;
          l_hm_affix_inf.attribute2   := in_apply_row_id;
          INSERT INTO hm_affix_inf VALUES l_hm_affix_inf;
        END IF;
      END LOOP;
    
    END LOOP;
  
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := 'prc_file_apply2data:文件附件复制失败!' || sqlerrm;
  end prc_file_apply2data;

  /****************************************************************
  功能描述：根据业务申请ID将业务申请信息触发成为相应的供应商主数据维护动作
  作者：    zhangbiao
  时间：    2010-05-24    
         
  输入参数说明： IN_APPLY_ID           业务申请单ID
                 IN_USER_NAME          操作人员名称
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。根据业务类型分为三部分：创建、更新、扩展
       2。创建时将申请表中的数据分发到供应商表中即可
       3。更新时根据申请表中_X的内容更新供应商表
       4。扩展时根据扩展试图将数据分发到供应商表
       5,内部调用 prc_input_allcheck
  ****************************************************************/

  PROCEDURE prc_apply_vendor_trans(in_apply_id  IN VARCHAR2,
                                   in_user_name IN VARCHAR2,
                                   retcode      OUT VARCHAR2,
                                   retmsg       OUT VARCHAR2) IS
    str_sql VARCHAR2(250); --查询SQL
    --str_rowid VARCHAR2(50); --ROWID
    TYPE cur_type IS REF CURSOR;
    cur_view_table          cur_type;
    l_apply_vendor          hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    l_apply_vendor_bank     hm_apply_vendor_bank%ROWTYPE; --HM_APPLY_CUSTOME_BANK表 行类型  
    l_apply_vendor_company  hm_apply_vendor_company%ROWTYPE; --HM_APPLY_CUSTOME_COMPANY表 行类型      
    l_apply_vendor_purchase hm_apply_vendor_purchase%ROWTYPE; --HM_APPLY_CUSTOME_PURCHASE表 行类型
  
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
  
    l_applys                 hm_applys%ROWTYPE; --HM_APPLYS表 行类型  
    l_hm_applys_transactions hm_applys_transactions%ROWTYPE;
  
    l_hm_vendors              hm_vendors%ROWTYPE; --hm_vendors表 行类型
    l_hm_vendor_pur_data      hm_vendor_pur_data%ROWTYPE; --hm_vendor_pur_data表 行类型
    l_hm_vendor_company_data  hm_vendor_company_data%ROWTYPE; --HM_VENDOR_COMPANY_DATA表 行类型
    l_hm_vendor_partners      hm_vendor_partners%ROWTYPE;
    l_hm_vendor_bank_accounts hm_vendor_bank_accounts%ROWTYPE;
  
    rows_vendors INTEGER := 0;
  
    --ls_vendorid       VARCHAR2(20);
    --ls_partnerid        VARCHAR2(20);
    --ls_retmsg           VARCHAR2(250);
    --ls_code             VARCHAR2(2);
    --ls_completedelivery VARCHAR2(2);
  
    vendor_exists_flag          INTEGER := 0;
    vendor_company_exists_flag  INTEGER := 0;
    vendor_purchase_exists_flag INTEGER := 0;
  
    li_count INTEGER := 0;
    --lv_companyid         VARCHAR2(20);
    --lv_salesorgid        VARCHAR2(20);
    --ls_accountgrp        VARCHAR2(4);
    ls_action_batch_id VARCHAR2(20);
    --ls_codetemp          VARCHAR2(20);
    --ls_vendornumber    VARCHAR2(20);
    --l_trade_companys VARCHAR2(1000);
    lcl_company_name     varchar2(200);
  BEGIN
  
    retcode := 'S';
    retmsg  := 'operate completely!';
  
    --0,申请明细信息有效性校验
    FOR cur_rows IN (SELECT * FROM hm_applys WHERE apply_id = in_apply_id) LOOP
      l_applys := cur_rows;
    END LOOP;
  
    IF l_applys.apply_id IS NULL THEN
      retcode := 'E';
      retmsg  := 'The Application NO :' || in_apply_id ||
                 ' has not been created!';
      RETURN;
    END IF;
  
    IF l_applys.audit_flag = '0' THEN
      retcode := 'E';
      retmsg  := 'The Application NO :' || in_apply_id ||
                 ' doesn''t audit!';
      RETURN;
    END IF;
    IF l_applys.transaction_flag > 1 THEN
      retcode := 'E';
      retmsg  := 'The Application NO : ' || in_apply_id ||
                 ' has been transfered!';
      RETURN;
    END IF;
  
    --0.1申请明细列表准备
    str_sql := 'SELECT * FROM hm_apply_vendor WHERE apply_id = ''' ||
               in_apply_id ||
               ''' and delete_flag = ''0'' ORDER BY ITEM_NO,ROW_ID ';
    ----
    ls_action_batch_id := comm_util.func_new_rowid();
    --归档同申请ID的转化日志
    UPDATE hm_applys_transactions
       SET delete_flag = '1'
     WHERE apply_id = in_apply_id;
    ----
  
    OPEN cur_view_table FOR str_sql;
    LOOP
      <<loops>>
      FETCH cur_view_table
        INTO l_apply_vendor;
      rows_vendors := cur_view_table%ROWCOUNT;
      EXIT WHEN cur_view_table%NOTFOUND;
    
      --供应商申请单银行信息收集
      t_apply_vendor_bank := tab_apply_vendor_bank();
      FOR cur_rows IN (SELECT *
                         FROM hm_apply_vendor_bank t
                        WHERE t.apply_vendor_id = l_apply_vendor.row_id
                          AND ROW_STATUS IN ('INSERTED', 'UPDATED')
                          and delete_flag = '0'
                        ORDER BY ROW_ID) LOOP
        t_apply_vendor_bank.extend();
        t_apply_vendor_bank(t_apply_vendor_bank.count) := cur_rows;
      END LOOP;
    
      --供应商申请单公司信息收集      
      t_apply_vendor_company := tab_apply_vendor_company();
      FOR cur_rows IN (SELECT *
                         FROM hm_apply_vendor_company t
                        WHERE t.apply_vendor_id = l_apply_vendor.row_id
                          AND ROW_STATUS IN ('INSERTED', 'UPDATED')
                          and delete_flag = '0'
                        ORDER BY ROW_ID) LOOP
        t_apply_vendor_company.extend();
        t_apply_vendor_company(t_apply_vendor_company.count) := cur_rows;
      END LOOP;
    
      --供应商申请单采购组织信息收集      
      t_apply_vendor_purchase := tab_apply_vendor_purchase();
      FOR cur_rows IN (SELECT *
                         FROM hm_apply_vendor_purchase t
                        WHERE t.apply_vendor_id = l_apply_vendor.row_id
                          AND ROW_STATUS IN ('INSERTED', 'UPDATED')
                          and delete_flag = '0'
                        ORDER BY ROW_ID) LOOP
        t_apply_vendor_purchase.extend();
        t_apply_vendor_purchase(t_apply_vendor_purchase.count) := cur_rows;
      END LOOP;
    
      --0.2必要校验
      IF l_apply_vendor.business_code IS NULL OR
         l_apply_vendor.business_code <> l_applys.business_code THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := l_apply_vendor.item_no ||
                   ' ROW, The bussiness code in Application item is different from the head!';
        RETURN;
      END IF;
    
      ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
      prc_input_allcheck(in_row_id                  => '',
                         v_hm_apply_vendor          => l_apply_vendor,
                         v_hm_apply_vendor_bank     => t_apply_vendor_bank,
                         v_hm_apply_vendor_company  => t_apply_vendor_company,
                         v_hm_apply_vendor_purchase => t_apply_vendor_purchase,
                         in_tablename_suffix        => '',
                         retcode                    => retcode,
                         retmsg                     => retmsg);
      IF retcode = 'E' THEN
        ROLLBACK;
        retmsg := l_apply_vendor.item_no || ' ROW, Error:' || retmsg;
        RETURN;
      END IF;
    
      --获取系统原有供应商信息
      vendor_exists_flag := 0;
      l_hm_vendors       := null;
      FOR cur_rows2 IN (SELECT *
                          FROM hm_vendors t
                         WHERE t.vendor_code =
                               trim(l_apply_vendor.vendor_code)) LOOP
        l_hm_vendors       := cur_rows2;
        vendor_exists_flag := vendor_exists_flag + 1;
      END LOOP;
    
      IF vendor_exists_flag < 1 THEN
        IF l_apply_vendor.operate_type = 'CREATE' THEN
          --如果供应商号信息尚未存在，供应商名不应存在
          SELECT COUNT(*)
            INTO li_count
            FROM hm_vendors
           WHERE VENDOR_NAME = l_apply_vendor.VENDOR_NAME
             and account_grp_code != '1600'
                --and ACCOUNT_GRP_CODE = l_apply_vendor.ACCOUNT_GRP_CODE           
             AND delete_flag = '0';
        
          IF li_count > 0 and l_apply_vendor.account_grp_code != '1600' THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := l_apply_vendor.item_no ||
                       ',Vendor name is already exist!';
            RETURN;
          END IF;
        
        ELSIF l_apply_vendor.operate_type IN ('UPDATE', 'EXTEND', 'CHANGE') THEN
          --供应商主数据不存在，不能进行'UPDATE','EXTEND','CHANGE'业务
          ROLLBACK;
          retcode := 'E';
          retmsg  := l_apply_vendor.item_no ||
                     ',Vendor number is not exist!';
          RETURN;
        END IF;
      ELSIF vendor_exists_flag = 1 THEN
        IF l_hm_vendors.vendor_code IS NULL OR l_hm_vendors.row_id IS NULL THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := l_apply_vendor.item_no || ',Vendor info is not exist!';
          RETURN;
        END IF;
      
        --在创建业务中，主数据的原始申请应该是本条申请
        IF l_apply_vendor.operate_type = 'CREATE' THEN
          IF l_hm_vendors.create_apply_id IS NULL OR
             l_hm_vendors.create_apply_id <> in_apply_id THEN
            ROLLBACK;
            retcode := 'E';
            retmsg  := l_apply_vendor.item_no ||
                       ',Vendor info is already created and not this apply!';
            RETURN;
          END IF;
        END IF;
      ELSE
        --vendor_exists_flag > 1
        ROLLBACK;
        retcode := 'E';
        retmsg  := l_apply_vendor.item_no ||
                   ',Vendor info is exist more than one!';
        RETURN;
      END IF;
    
      ----用申请单信息 l_apply_vendor 构建补充主数据条目结构 l_hm_vendors
      ----注意：如果为UPDATE， 或者CREATE打回二次审批业务，那么l_hm_vendors中已经有值
      IF l_apply_vendor.View_Base_x = 'X' AND
         l_apply_vendor.operate_type <> 'EXTEND' THEN
        prc_base_trans(vendor_exists_flag,
                       in_user_name,
                       l_apply_vendor,
                       l_hm_vendors,
                       retcode,
                       retmsg);
        IF retcode = 'E' THEN
          RETURN;
        END IF;
      END if;
    
      ----用申请单信息 l_apply_vendor 构建补充主数据条目结构 l_hm_VENDOR_company
      ----注意：如果为UPDATE，EXTEND，CHANGE, 或者CREATE打回二次审批业务，那么l_hm_VENDOR_company中已经有值
      IF l_apply_vendor.view_company_x = 'X' THEN
        FOR i IN 1 .. t_apply_vendor_company.count LOOP
          l_hm_VENDOR_company_data   := NULL;
          vendor_company_exists_flag := 0;
          FOR cur_rows IN (SELECT *
                             FROM hm_VENDOR_company_data
                            WHERE vendor_id = l_hm_vendors.row_id
                              AND company_code = t_apply_vendor_company(i)
                                 .company_code) LOOP
            l_hm_VENDOR_company_data   := cur_rows;
            vendor_company_exists_flag := vendor_company_exists_flag + 1;
          END LOOP;
        
          --补充主键信息
          l_hm_VENDOR_company_data.vendor_id    := l_hm_vendors.row_id;
          l_hm_VENDOR_company_data.company_code := t_apply_vendor_company(i)
                                                   .company_code;
        
          --用申请单信息 t_apply_vendor_company(i) 构建补充主数据条目结构 l_hm_VENDOR_company
          prc_company_trans(vendor_company_exists_flag,
                            in_user_name,
                            l_apply_vendor,
                            t_apply_vendor_company(i),
                            l_hm_VENDOR_company_data,
                            retcode,
                            retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
        
          --设置基本信息操作状态
          UPDATE HM_VENDORS T
             SET T.OPERATE_STATUS    = DECODE(t.operate_status,
                                              'NVL',
                                              'DOING',
                                              T.OPERATE_STATUS),
                 T.LAST_VERSION_FLAG = '2'
           WHERE T.ROW_ID = l_hm_VENDOR_company_data.Vendor_Id;
        
        END LOOP;
      END IF;
    
      ----用申请单信息 l_apply_vendor 构建补充主数据条目结构 l_hm_VENDOR_purchase
      ----注意：如果为UPDATE，EXTEND，CHANGE, 或者CREATE打回二次审批业务，那么l_hm_VENDOR_purchase中已经有值
      IF l_apply_vendor.view_purchase_x = 'X' THEN
        FOR i IN 1 .. t_apply_vendor_purchase.count LOOP
          l_hm_VENDOR_pur_data        := NULL;
          vendor_purchase_exists_flag := 0;
          FOR cur_rows IN (SELECT *
                             FROM hm_VENDOR_pur_data
                            WHERE vendor_id = l_hm_vendors.row_id
                              AND purchase_grp_code = t_apply_vendor_purchase(i)
                                 .purchase_grp_code) LOOP
            l_hm_VENDOR_pur_data        := cur_rows;
            vendor_purchase_exists_flag := vendor_purchase_exists_flag + 1;
          END LOOP;
        
          --补充主键信息
          l_hm_VENDOR_pur_data.vendor_id         := l_hm_vendors.row_id;
          l_hm_VENDOR_pur_data.purchase_grp_code := t_apply_vendor_purchase(i)
                                                    .purchase_grp_code;
        
          --用申请单信息 t_apply_vendor_purchase(i) 构建补充主数据条目结构 l_hm_VENDOR_purchase
          prc_purchase_trans(vendor_purchase_exists_flag,
                             in_user_name,
                             l_apply_vendor,
                             t_apply_vendor_purchase(i),
                             l_hm_VENDOR_pur_data,
                             retcode,
                             retmsg);
          IF retcode = 'E' THEN
            RETURN;
          END IF;
        
          --设置基本信息操作状态
          UPDATE HM_VENDORS T
             SET T.OPERATE_STATUS    = DECODE(t.operate_status,
                                              'NVL',
                                              'DOING',
                                              T.OPERATE_STATUS),
                 T.LAST_VERSION_FLAG = '2'
           WHERE T.ROW_ID = l_hm_VENDOR_pur_data.Vendor_Id;
        
          /*          FOR cur_rows_pt IN (SELECT 'OA' pt FROM dual UNION
                              SELECT 'VN' pt FROM dual UNION
                              SELECT 'PI' pt FROM dual)
          LOOP*/
          --合作伙伴信息
          IF l_apply_vendor.operate_type IN ('CREATE', 'UPDATE', 'EXTEND') AND
             l_hm_VENDOR_pur_data.Vendor_Id IS NOT NULL THEN
          
            prc_partner_create(t_apply_vendor_purchase(i),
                               l_apply_vendor.vendor_code,
                               l_hm_VENDOR_pur_data.Row_Id,
                               in_user_name,
                               retcode,
                               retmsg);
            IF retcode = 'E' THEN
              RETURN;
            END IF;
          END IF; --维护供应商合作伙伴信息
        /*          END LOOP;
                        */
        END LOOP;
      
      END IF;
    
      ----用申请单信息 t_apply_vendor_bank 构建补充主数据条目结构 t_hm_vendor_bank_account
      ----注意：如果为UPDATE， 或者CREATE打回二次审批业务，那么t_hm_vendor_bank_account中已经有值
      IF l_apply_vendor.View_Base_x = 'X' THEN
        FOR i IN 1 .. t_apply_vendor_bank.count LOOP
          --银行账户处理
          IF l_apply_vendor.operate_type IN ('CREATE', 'UPDATE', 'CHANGE') AND t_apply_vendor_bank(i)
            .bank_country IS NOT NULL AND t_apply_vendor_bank(i)
            .bank_branch_code IS NOT NULL AND t_apply_vendor_bank(i)
            .account_holder_name IS NOT NULL THEN
          
            prc_bank_create(t_apply_vendor_bank(i),
                            l_hm_vendors.row_id,
                            in_user_name,
                            retcode,
                            retmsg);
            IF retcode = 'E' THEN
              RETURN;
            END IF;
          END IF; --维护供应商银行帐户信息
        END LOOP;
      END IF;
      --cuiyj 如果基本视图里该条供应商要传输SAP那个字段打钩，表示这条供应商信息以及它所有的公司和银行要传输SAP
      IF l_apply_vendor.business_code in ('VDR-UPDATE-1600-PL-U') THEN
        if l_apply_vendor.translate_flag1600_x = 'X' and
           l_apply_vendor.translate_flag1600 = 'X' then
          comm_util.copy_table_line('hm_vendors',
                                    '',
                                    '_HIS',
                                    l_hm_vendors.row_id,
                                    retcode,
                                    retmsg);
          update hm_vendors s
             set s.last_upd_by       = in_user_name,
                 s.last_upd          = sysdate,
                 s.for_gvs           = '1',
                 s.last_version_flag = '2',
                 s.operate_status    = 'CREATE'
           where s.row_id = l_hm_vendors.row_id;
          FOR cur_rows IN (SELECT *
                             FROM hm_VENDOR_company_data a
                            WHERE a.vendor_id = l_hm_vendors.row_id
                              AND a.delete_flag = '0'
                              and (a.for_gvs = '0' or a.for_gvs is null)) LOOP
            comm_util.copy_table_line('hm_VENDOR_company_data',
                                      '',
                                      '_HIS',
                                      cur_rows.row_id,
                                      retcode,
                                      retmsg);
            update hm_VENDOR_company_data s
               set s.last_upd_by       = in_user_name,
                   s.last_upd          = sysdate,
                   s.for_gvs           = '1',
                   s.last_version_flag = '2',
                   s.operate_status    = 'CREATE'
             where s.row_id = cur_rows.row_id;
          END LOOP;
        
          IF retcode = 'E' THEN
            RETURN;
          END IF;
        end if;
      END IF;
      --end
      -------4记录申请单与供应商主数据转化关系
    
      l_hm_applys_transactions.action_batch_id := ls_action_batch_id;
      l_hm_applys_transactions.apply_id        := in_apply_id;
      l_hm_applys_transactions.apply_item_no   := l_apply_vendor.row_id;
      l_hm_applys_transactions.master_row_code := l_apply_vendor.vendor_code;
      l_hm_applys_transactions.row_id          := comm_util.func_new_rowid();
      l_hm_applys_transactions.created_by      := in_user_name;
      l_hm_applys_transactions.created         := SYSDATE;
      l_hm_applys_transactions.last_upd_by     := in_user_name;
      l_hm_applys_transactions.last_upd        := SYSDATE;
      l_hm_applys_transactions.active_flag     := '1';
      l_hm_applys_transactions.delete_flag     := '0';
    
      INSERT INTO hm_applys_transactions VALUES l_hm_applys_transactions;
    
      --临时码替换  -----for beta
      if instr(l_apply_vendor.vendor_code, 'TEMP') > 0 THEN
        prc_tmpcode2mastercode('VENDOR_CODE',
                               l_apply_vendor.vendor_code,
                               l_apply_vendor.vendor_code,
                               retcode,
                               retmsg);
        IF retcode = 'E' THEN
          RETURN;
        END IF;
      END IF;
      if l_apply_vendor.account_grp_code = '1400' and l_apply_vendor.sub_company is not null then
        select max(value_meaning) into lcl_company_name from hm_fnd_values a where a.delete_flag = '0' and a.value = l_apply_vendor.sub_company and a.value_set_id = 'CompanyCode';
        if lcl_company_name is not null then
          insert into hm_vc_company(row_id,company_code,code_type,code,created_by,company_name,code_name)
            values(comm_util.FUNC_NEW_ROWID,l_apply_vendor.sub_company,'vendor',l_apply_vendor.VENDOR_CODE,in_user_name,lcl_company_name,l_apply_vendor.VENDOR_NAME);
        end if;
      end if;
      --申请文件复制
      prc_file_apply2data('HM_APPLY_VENDOR',
                          l_apply_vendor.row_id,
                          'HM_VENDORS',
                          l_hm_vendors.row_id,
                          in_user_name,
                          retcode,
                          retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
    
    END LOOP;
    CLOSE cur_view_table;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'operate failure !' || SQLERRM;
  END prc_apply_vendor_trans;

  /*  PROCEDURE prc_apply2apply_trans
    ( l_apply_vendor_temp IN hm_apply_vendor%ROWTYPE,
      l_apply_vendor IN OUT hm_apply_vendor%ROWTYPE,
      retcode      OUT VARCHAR2,
      retmsg       OUT VARCHAR2
    ) IS
    BEGIN
      retcode := 'S';
      retmsg  := 'prc_apply2apply_trans:operate success !';  
      
      l_apply_vendor.row_id := l_apply_vendor_temp.row_id;
      l_apply_vendor.created_by := l_apply_vendor_temp.created_by;
      l_apply_vendor.created := l_apply_vendor_temp.created;
      l_apply_vendor.last_upd_by := l_apply_vendor_temp.last_upd_by;
      l_apply_vendor.last_upd := l_apply_vendor_temp.last_upd;
      l_apply_vendor.modification_num := l_apply_vendor_temp.modification_num;
      l_apply_vendor.delete_flag := l_apply_vendor_temp.delete_flag;
      l_apply_vendor.active_flag := l_apply_vendor_temp.active_flag;
      l_apply_vendor.remark := l_apply_vendor_temp.remark;
      l_apply_vendor.action_batch_id := l_apply_vendor_temp.action_batch_id;
      l_apply_vendor.business_code := l_apply_vendor_temp.business_code;
      l_apply_vendor.master_type := l_apply_vendor_temp.master_type;
      l_apply_vendor.operate_type := l_apply_vendor_temp.operate_type;
      l_apply_vendor.business_type := l_apply_vendor_temp.business_type;
      l_apply_vendor.inner_outer_flag := l_apply_vendor_temp.inner_outer_flag;
      l_apply_vendor.view_type := l_apply_vendor_temp.view_type;
      l_apply_vendor.dept_code := l_apply_vendor_temp.dept_code;
      l_apply_vendor.apply_id := l_apply_vendor_temp.apply_id;
      l_apply_vendor.item_no := l_apply_vendor_temp.item_no;
      l_apply_vendor.view_base_x := l_apply_vendor_temp.view_base_x;
      l_apply_vendor.view_bank_x := l_apply_vendor_temp.view_bank_x;
      l_apply_vendor.view_company_x := l_apply_vendor_temp.view_company_x;
      l_apply_vendor.view_purchase_x := l_apply_vendor_temp.view_purchase_x;
      l_apply_vendor.vendor_title := l_apply_vendor_temp.vendor_title;
      l_apply_vendor.vendor_title_x := l_apply_vendor_temp.vendor_title_x;
      l_apply_vendor.vendor_code := l_apply_vendor_temp.vendor_code;
      l_apply_vendor.vendor_code_x := l_apply_vendor_temp.vendor_code_x;
      l_apply_vendor.vendor_name := l_apply_vendor_temp.vendor_name;
      l_apply_vendor.vendor_name_x := l_apply_vendor_temp.vendor_name_x;
      l_apply_vendor.bidder_no := l_apply_vendor_temp.bidder_no;
      l_apply_vendor.bidder_no_x := l_apply_vendor_temp.bidder_no_x;
      l_apply_vendor.search_term := l_apply_vendor_temp.search_term;
      l_apply_vendor.search_term_x := l_apply_vendor_temp.search_term_x;
      l_apply_vendor.street_room := l_apply_vendor_temp.street_room;
      l_apply_vendor.street_room_x := l_apply_vendor_temp.street_room_x;
      l_apply_vendor.postal_code_city := l_apply_vendor_temp.postal_code_city;
      l_apply_vendor.postal_code_city_x := l_apply_vendor_temp.postal_code_city_x;
      l_apply_vendor.country := l_apply_vendor_temp.country;
      l_apply_vendor.country_x := l_apply_vendor_temp.country_x;
      l_apply_vendor.region := l_apply_vendor_temp.region;
      l_apply_vendor.region_x := l_apply_vendor_temp.region_x;
      l_apply_vendor.phone_number := l_apply_vendor_temp.phone_number;
      l_apply_vendor.phone_number_x := l_apply_vendor_temp.phone_number_x;
      l_apply_vendor.fax_number := l_apply_vendor_temp.fax_number;
      l_apply_vendor.fax_number_x := l_apply_vendor_temp.fax_number_x;
      l_apply_vendor.tax_code := l_apply_vendor_temp.tax_code;
      l_apply_vendor.tax_code_x := l_apply_vendor_temp.tax_code_x;
      l_apply_vendor.account_grp_code := l_apply_vendor_temp.account_grp_code;
      l_apply_vendor.account_grp_code_x := l_apply_vendor_temp.account_grp_code_x;
      l_apply_vendor.external_manufacturer := l_apply_vendor_temp.external_manufacturer;
      l_apply_vendor.external_manufacturer_x := l_apply_vendor_temp.external_manufacturer_x;
      l_apply_vendor.intl_area_code := l_apply_vendor_temp.intl_area_code;
      l_apply_vendor.intl_area_code_x := l_apply_vendor_temp.intl_area_code_x;
      l_apply_vendor.trans_agent_grp := l_apply_vendor_temp.trans_agent_grp;
      l_apply_vendor.trans_agent_grp_x := l_apply_vendor_temp.trans_agent_grp_x;
      l_apply_vendor.service_agent_proc_grp := l_apply_vendor_temp.service_agent_proc_grp;
      l_apply_vendor.service_agent_proc_grp_x := l_apply_vendor_temp.service_agent_proc_grp_x;
      l_apply_vendor.station := l_apply_vendor_temp.station;
      l_apply_vendor.station_x := l_apply_vendor_temp.station_x;
      l_apply_vendor.customer_code := l_apply_vendor_temp.customer_code;
      l_apply_vendor.customer_code_x := l_apply_vendor_temp.customer_code_x;
      l_apply_vendor.vendor_hq := l_apply_vendor_temp.vendor_hq;
      l_apply_vendor.vendor_hq_x := l_apply_vendor_temp.vendor_hq_x;
      l_apply_vendor.city_street_room := l_apply_vendor_temp.city_street_room;
      l_apply_vendor.city_street_room_x := l_apply_vendor_temp.city_street_room_x;
      l_apply_vendor.LANGUAGE := l_apply_vendor_temp.language;
      l_apply_vendor.language_x := l_apply_vendor_temp.language_x;
      l_apply_vendor.company_share := l_apply_vendor_temp.company_share;
      l_apply_vendor.company_share_x := l_apply_vendor_temp.company_share_x;
      l_apply_vendor.bu := l_apply_vendor_temp.bu;
      l_apply_vendor.bu_x := l_apply_vendor_temp.bu_x;
      l_apply_vendor.pl := l_apply_vendor_temp.pl;
      l_apply_vendor.pl_x := l_apply_vendor_temp.pl_x;
      l_apply_vendor.expiry_date := l_apply_vendor_temp.expiry_date;
      l_apply_vendor.expiry_date_x := l_apply_vendor_temp.expiry_date_x;
      l_apply_vendor.companycode_list := l_apply_vendor_temp.companycode_list;
      l_apply_vendor.companycode_list_x := l_apply_vendor_temp.companycode_list_x;
      l_apply_vendor.purchasecode_list := l_apply_vendor_temp.purchasecode_list;
      l_apply_vendor.purchasecode_list_x := l_apply_vendor_temp.purchasecode_list_x;
      l_apply_vendor.vendor_code_temp := l_apply_vendor_temp.vendor_code_temp;
      l_apply_vendor.finance_business_flag := l_apply_vendor_temp.finance_business_flag;
          
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'prc_apply2apply_trans:operate failure !' || SQLERRM;  
    END prc_apply2apply_trans;  
  */
  PROCEDURE prc_base2apply_trans(l_hm_vendors   IN hm_vendors%ROWTYPE,
                                 l_apply_vendor IN OUT hm_apply_vendor%ROWTYPE,
                                 retcode        OUT VARCHAR2,
                                 retmsg         OUT VARCHAR2) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_base_trans:operate success !';
  
    l_apply_vendor.vendor_title           := l_hm_vendors.vendor_title;
    l_apply_vendor.vendor_code            := l_hm_vendors.vendor_code;
    l_apply_vendor.vendor_name            := l_hm_vendors.vendor_name;
    l_apply_vendor.bidder_no              := l_hm_vendors.bidder_no;
    l_apply_vendor.search_term            := l_hm_vendors.search_term;
    l_apply_vendor.street_room            := l_hm_vendors.street_room;
    l_apply_vendor.postal_code_city       := l_hm_vendors.postal_code_city;
    l_apply_vendor.country                := l_hm_vendors.country;
    l_apply_vendor.region                 := l_hm_vendors.region;
    l_apply_vendor.phone_number           := l_hm_vendors.phone_number;
    l_apply_vendor.fax_number             := l_hm_vendors.fax_number;
    l_apply_vendor.tax_code               := l_hm_vendors.tax_code;
    l_apply_vendor.account_grp_code       := l_hm_vendors.account_grp_code;
    l_apply_vendor.external_manufacturer  := l_hm_vendors.external_manufacturer;
    l_apply_vendor.intl_area_code         := l_hm_vendors.intl_area_code;
    l_apply_vendor.trans_agent_grp        := l_hm_vendors.trans_agent_grp;
    l_apply_vendor.service_agent_proc_grp := l_hm_vendors.service_agent_proc_grp;
    l_apply_vendor.station                := l_hm_vendors.station;
    l_apply_vendor.customer_code          := l_hm_vendors.customer_code;
    l_apply_vendor.vendor_hq              := l_hm_vendors.vendor_hq;
    l_apply_vendor.city_street_room       := l_hm_vendors.city_street_room;
    l_apply_vendor.LANGUAGE               := l_hm_vendors.language;
    l_apply_vendor.company_share          := l_hm_vendors.company_share;
    l_apply_vendor.bu                     := l_hm_vendors.bu;
    l_apply_vendor.pl                     := l_hm_vendors.pl;
    l_apply_vendor.expiry_date            := l_hm_vendors.expiry_date;
    l_apply_vendor.sub_company            := l_hm_vendors.sub_company;
    l_apply_vendor.business_belong        := l_hm_vendors.business_belong;
    l_apply_vendor.tax_number1            := l_hm_vendors.tax_number1;
      l_apply_vendor.is_bank_debit            := l_hm_vendors.is_bank_debit;
    --l_apply_vendor.companycode_list := l_hm_vendors.companycode_list;
    --l_apply_vendor.purchasecode_list := l_hm_vendors.purchasecode_list;
    --l_apply_vendor.vendor_code_temp := l_hm_vendors.vendor_code_temp;
    --l_apply_vendor.finance_business_flag := l_hm_vendors.finance_business_flag; 
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_base2apply_trans:operate failure !' || SQLERRM;
  END prc_base2apply_trans;

  --职员信息转化为个人供应商信息，存在则更新字段 --不用action_batch_id,防止其它活动action_batch_id干扰取值
  PROCEDURE prc_employee2apply_trans(IN_EMPLOYEE_NO IN VARCHAR2,
                                     l_apply_vendor IN OUT hm_apply_vendor%ROWTYPE,
                                     RETCODE        OUT VARCHAR2,
                                     RETMSG         OUT VARCHAR2) IS
    indentity_flag hm_emp_identification.identity_number%type;
    CURSOR CUR_EMPLOYEE IS
      select employee.employee_no employee_no,
             max(employee.first_name) first_name,
             max(employee.company_code) company_code,
             max(employee.bank_type) bank_type,
             max(employee.bank_number) bank_number,
             trim(max(employee.communication_id)) communication_id,
             max(employee.country) country,
             max(employee.regio) regio,
             trim(max(employee.city)) city,
             trim(max(employee.street)) street,
             max(employee.postal_code) postal_code,
             trim(max(employee.identity_number)) identity_number
      
        from (select person.employee_no employee_no,
                     person.first_name first_name,
                     '' company_code,
                     '' bank_type,
                     '' bank_number,
                     '' communication_id,
                     '' country,
                     '' regio,
                     '' city,
                     '' street,
                     '' postal_code,
                     '' identity_number
              
                from (SELECT t.employee_no, t.first_name
                        FROM HM_EMP_PERSON_DATA T
                       WHERE (T.EMPLOYEE_NO, T.BEGIN_DATE) =
                             (SELECT T.EMPLOYEE_NO,
                                     MAX(T.BEGIN_DATE) BEGIN_DATE
                                FROM HM_EMP_PERSON_DATA T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                               GROUP BY T.EMPLOYEE_NO)) person
              
              union
              
              select org.employee_no employee_no,
                     '' first_name,
                     org.company_code company_code,
                     '' bank_type,
                     '' bank_number,
                     '' communication_id,
                     '' country,
                     '' regio,
                     '' city,
                     '' street,
                     '' postal_code,
                     '' identity_number
              
                from (SELECT t.employee_no, t.company_code
                        FROM hm_emp_org_assign T
                       WHERE (T.EMPLOYEE_NO, T.BEGIN_DATE) =
                             (SELECT T.EMPLOYEE_NO,
                                     MAX(T.BEGIN_DATE) BEGIN_DATE
                                FROM hm_emp_org_assign T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                               GROUP BY T.EMPLOYEE_NO)) org
              
              union
              
              select bank.employee_no employee_no,
                     '' first_name,
                     '' company_code,
                     bank.bank_type bank_type,
                     bank.bank_number bank_number,
                     '' communication_id,
                     '' country,
                     '' regio,
                     '' city,
                     '' street,
                     '' postal_code,
                     '' identity_number
              
                from (SELECT t.employee_no, t.bank_type, t.bank_number
                        FROM hm_emp_bank_detail T
                       WHERE (T.EMPLOYEE_NO, T.BEGIN_DATE) =
                             (SELECT T.EMPLOYEE_NO,
                                     MAX(T.BEGIN_DATE) BEGIN_DATE
                                FROM hm_emp_bank_detail T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                               GROUP BY T.EMPLOYEE_NO)) bank
              
              union
              
              select comm.employee_no employee_no,
                     '' first_name,
                     '' company_code,
                     '' bank_type,
                     '' bank_number,
                     comm.communication_id communication_id,
                     '' country,
                     '' regio,
                     '' city,
                     '' street,
                     '' postal_code,
                     '' identity_number
              
                from (SELECT t.employee_no, t.communication_id
                        FROM hm_emp_communication T
                       WHERE (T.EMPLOYEE_NO, T.BEGIN_DATE) =
                             (SELECT T.EMPLOYEE_NO,
                                     MAX(T.BEGIN_DATE) BEGIN_DATE
                                FROM hm_emp_communication T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                                 and t.communication_type in ('0025', '0021') --增加这个限制cuiyj先限定是手机
                               GROUP BY T.EMPLOYEE_NO)
                      /*and t.communication_type in('0025','0021')*/
                       order by t.communication_type desc) comm
               where rownum = 1
              
              union
              
              select addr.employee_no employee_no,
                     '' first_name,
                     '' company_code,
                     '' bank_type,
                     '' bank_number,
                     '' communication_id,
                     addr.country country,
                     addr.regio regio,
                     addr.city city,
                     addr.street street,
                     addr.postal_code postal_code,
                     '' identity_number
              
                from (SELECT t.employee_no,
                             t.country,
                             t.regio,
                             t.city,
                             t.street,
                             t.postal_code
                        FROM hm_emp_private_address T
                       WHERE (T.EMPLOYEE_NO, T.BEGIN_DATE) =
                             (SELECT T.EMPLOYEE_NO,
                                     MAX(T.BEGIN_DATE) BEGIN_DATE
                                FROM hm_emp_private_address T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                               GROUP BY T.EMPLOYEE_NO)
                         and t.address_type in ('1', '3')
                       order by t.address_type) addr
               where rownum = 1
              
              union
              
              select ident.employee_no employee_no,
                     '' first_name,
                     '' company_code,
                     '' bank_type,
                     '' bank_number,
                     '' communication_id,
                     '' country,
                     '' regio,
                     '' city,
                     '' street,
                     '' postal_code,
                     ident.identity_number identity_number
              
                from (SELECT t.employee_no, t.identity_number
                        FROM hm_emp_identification_cur T
                       WHERE (T.EMPLOYEE_NO) =
                             (SELECT T.EMPLOYEE_NO
                              
                                FROM hm_emp_identification_cur T
                               WHERE (T.BEGIN_DATE <=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                                     T.END_DATE >=
                                     TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
                                 AND T.EMPLOYEE_NO = in_employee_no
                               GROUP BY T.EMPLOYEE_NO)
                         and t.ic_type = '01') ident
              
              ) employee
       group by employee.employee_no;
  
    CURSOR CUR_VENDOR(P_EMPLOYEE_NO IN VARCHAR2) IS
      SELECT * FROM HM_VENDORS T WHERE T.VENDOR_CODE = P_EMPLOYEE_NO;
  
    L_HM_VENDORS HM_VENDORS%ROWTYPE;
  
    LC_FIND VARCHAR2(10) := '0';
  
    role_flag NUMBER := 0;
  BEGIN
    RETCODE := 'S';
    RETMSG  := IN_EMPLOYEE_NO || ',人员信息转化个人供应商创建处理成功！';
  
    LC_FIND := '0';
  
    /*      select count(*) 
          into role_flag 
          from org_person a, org_role_psn_map b,org_role c
        where a.psn_id = b.psn_id 
        and b.role_id = c.role_id
        and a.psn_account = IN_USER_NAME
        and c.role_name = 'BranchVendor';
    */
    FOR CUR_EMPLOYEE_ROW IN CUR_EMPLOYEE LOOP
      LC_FIND := '1';
      FOR CUR_VENDOR_ROW IN CUR_VENDOR(CUR_EMPLOYEE_ROW.EMPLOYEE_NO) LOOP
        LC_FIND := 'X';
      END LOOP;
    
      IF LC_FIND <> 'X' THEN
        --add 20140207 by cuiyj 用来判断身份证不存在时，护照是否存在
      
        if CUR_EMPLOYEE_ROW.identity_number is null then
          SELECT identity_number
            into indentity_flag
            FROM hm_emp_identification T
           WHERE (T.BEGIN_DATE <= TO_CHAR(SYSDATE, 'yyyy-mm-dd') AND
                 T.END_DATE >= TO_CHAR(SYSDATE, 'yyyy-mm-dd'))
             AND T.EMPLOYEE_NO = in_employee_no
             and t.ic_type = '02';
          if indentity_flag is not null then
            CUR_EMPLOYEE_ROW.identity_number := indentity_flag;
          end if;
        end if;
        ---end 20140207
        --INSERT VENDOR INFO
        if CUR_EMPLOYEE_ROW.first_name is not null and
           CUR_EMPLOYEE_ROW.identity_number is not null then
          --L_HM_VENDORS.ROW_ID := COMM_UTIL.FUNC_NEW_ROWID();
          l_apply_vendor.VENDOR_CODE      := CUR_EMPLOYEE_ROW.EMPLOYEE_NO;
          l_apply_vendor.VENDOR_NAME      := substr(CUR_EMPLOYEE_ROW.first_name,
                                                    1,
                                                    40);
          l_apply_vendor.SEARCH_TERM      := L_HM_VENDORS.VENDOR_NAME;
          l_apply_vendor.STREET_ROOM      := CUR_EMPLOYEE_ROW.city ||
                                             CUR_EMPLOYEE_ROW.street;
          l_apply_vendor.POSTAL_CODE_CITY := CUR_EMPLOYEE_ROW.postal_code;
          l_apply_vendor.COUNTRY          := CUR_EMPLOYEE_ROW.country;
          l_apply_vendor.REGION           := CUR_EMPLOYEE_ROW.regio;
          l_apply_vendor.PHONE_NUMBER     := CUR_EMPLOYEE_ROW.communication_id;
          l_apply_vendor.CITY_STREET_ROOM := CUR_EMPLOYEE_ROW.CITY;
          l_apply_vendor.TAX_CODE         := CUR_EMPLOYEE_ROW.identity_number;
        
          l_apply_vendor.ACCOUNT_GRP_CODE := '1600';
          l_apply_vendor.LANGUAGE         := '1';
          l_apply_vendor.VENDOR_TITLE     := '';
        
          --l_apply_vendor.created_by                  := IN_USER_NAME;
          --l_apply_vendor.created                     := sysdate;
          --l_apply_vendor.last_upd_by                 := IN_USER_NAME;
          --l_apply_vendor.last_upd                    := sysdate;
          --l_apply_vendor.modification_num            := 0;
          --l_apply_vendor.version                     := 1.0;
          --l_apply_vendor.active_flag                 := '1';
          --l_apply_vendor.delete_flag                 := '0';
          l_apply_vendor.remark := '人员信息转化个人供应商';
        
          --l_apply_vendor.last_version_flag           := '2';
          --l_apply_vendor.lock_flag                   := '0';
          --l_apply_vendor.operate_status              := 'CREATE';
        
          --if role_flag > 0 then
          --l_apply_vendor.for_gvs := '1';
          --end if;
          --INSERT INTO HM_VENDORS VALUES L_HM_VENDORS;
        
          --COMMIT;
        else
          RETCODE := 'E';
          RETMSG  := IN_EMPLOYEE_NO || '人力信息不完整[名称][身份证号]，不能创建个人供应商信息！';
          ROLLBACK;
        end if;
      ELSIF LC_FIND = 'X' THEN
        --UPDATE VENDOR INFO
        --LC_FIND := LC_FIND;  -- NOTHING CAN DO.
        RETCODE := 'E';
        RETMSG  := '个人供应商信息' || IN_EMPLOYEE_NO || '已经存在，不需要再次创建！';
        ROLLBACK;
      END IF;
    
    END LOOP;
  
    if LC_FIND = '0' then
      RETCODE := 'E';
      RETMSG  := '无职员信息可用，创建个人供应商程序处理失败！';
      ROLLBACK;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RETCODE := 'E';
      RETMSG  := 'prc_employee2apply_trans: 职员转化供应商程序处理异常!' || SQLERRM;
  END prc_employee2apply_trans;

  PROCEDURE prc_company2apply_trans(l_hm_VENDOR_company_data IN hm_VENDOR_company_data%ROWTYPE,
                                    l_apply_vendor_company   IN OUT hm_apply_vendor_company%ROWTYPE,
                                    retcode                  OUT VARCHAR2,
                                    retmsg                   OUT VARCHAR2) IS
    lcl_count                     integer;
    lcl_hm_vendor_withholding_tax hm_vendor_withholding_tax%rowtype;
  
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_company2apply_trans:operate success !';
  
    --l_apply_vendor.view_company_x := 'X';
  
    --l_apply_vendor_company.apply_vendor_id := l_hm_VENDOR_company_data.apply_vendor_id;
    --l_apply_vendor_company.company_code := l_hm_VENDOR_company_data.company_code;
    l_apply_vendor_company.hq                       := l_hm_VENDOR_company_data.hq;
    l_apply_vendor_company.reference_account_number := l_hm_VENDOR_company_data.reference_account_number;
    l_apply_vendor_company.sequence_no              := l_hm_VENDOR_company_data.sequence_no;
    l_apply_vendor_company.cash_mgt_group           := l_hm_VENDOR_company_data.cash_mgt_group;
    l_apply_vendor_company.accounting_customer      := l_hm_VENDOR_company_data.accounting_customer;
    l_apply_vendor_company.payment_term_company     := l_hm_VENDOR_company_data.payment_term;
    l_apply_vendor_company.payment_method           := l_hm_VENDOR_company_data.payment_method;
    l_apply_vendor_company.tolerance_group          := l_hm_VENDOR_company_data.tolerance_group;
    l_apply_vendor_company.account_remark           := l_hm_VENDOR_company_data.account_remark;
    l_apply_vendor_company.reconcile_account        := l_hm_VENDOR_company_data.reconcile_account;
    l_apply_vendor_company.old_row_id               := l_hm_VENDOR_company_data.row_id;
  
    l_apply_vendor_company.delete_flag := l_hm_VENDOR_company_data.Delete_Flag;
    l_apply_vendor_company.active_flag := l_hm_VENDOR_company_data.active_flag;
    l_apply_vendor_company.row_status  := 'UNCHANGED';
    --刘志龙  增加上税视图的几个字段
    --只限定6600公司代码
    if l_hm_VENDOR_company_data.Company_Code <> '6600' then
      return;
    end if;
    select count(*)
      into lcl_count
      from hm_vendor_withholding_tax w
     where w.company_id = l_hm_VENDOR_company_data.row_id
       and w.delete_flag = 0;
    if lcl_count = 0 then
      return;
    end if;
    if lcl_count > 0 then
      select *
        into lcl_hm_vendor_withholding_tax
        from hm_vendor_withholding_tax w
       where w.company_id = l_hm_VENDOR_company_data.row_id
         and w.delete_flag = 0
         and rownum = 1;
      l_apply_vendor_company.witht     := lcl_hm_vendor_withholding_tax.witht;
      l_apply_vendor_company.wt_subjct := lcl_hm_vendor_withholding_tax.wt_subjct;
      l_apply_vendor_company.wt_withcd := lcl_hm_vendor_withholding_tax.wt_withcd;
      l_apply_vendor_company.qsrec     := lcl_hm_vendor_withholding_tax.qsrec;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_company2apply_trans:operate failure !' || SQLERRM;
  END prc_company2apply_trans;

  procedure prc_purchase2apply_trans(l_hm_vendor_pur_data    IN hm_vendor_pur_data%ROWTYPE,
                                     l_apply_vendor_purchase IN OUT hm_apply_vendor_purchase%ROWTYPE,
                                     retcode                 OUT VARCHAR2,
                                     retmsg                  OUT VARCHAR2) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_purchase2apply_trans:operate success !';
  
    --l_apply_vendor_purchase.view_purchase_x := 'X';
  
    l_apply_vendor_purchase.purchase_grp_code     := l_hm_vendor_pur_data.purchase_grp_code;
    l_apply_vendor_purchase.order_currency        := l_hm_vendor_pur_data.order_currency;
    l_apply_vendor_purchase.auto_generate_order   := l_hm_vendor_pur_data.auto_generate_order;
    l_apply_vendor_purchase.payment_term_purchase := l_hm_vendor_pur_data.payment_term;
    l_apply_vendor_purchase.salesman              := l_hm_vendor_pur_data.salesman;
    --l_apply_vendor_purchase.partner_pi := l_hm_vendor_pur_data.partner_pi;
    l_apply_vendor_purchase.old_row_id := l_hm_vendor_pur_data.row_id;
  
    l_apply_vendor_purchase.delete_flag := l_hm_vendor_pur_data.Delete_Flag;
    l_apply_vendor_purchase.active_flag := l_hm_vendor_pur_data.active_flag;
    l_apply_vendor_purchase.row_status  := 'UNCHANGED';
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_purchase2apply_trans:operate failure !' || SQLERRM;
  END prc_purchase2apply_trans;

  procedure prc_bank2apply_trans(l_hm_VENDOR_bank_accounts IN OUT hm_VENDOR_bank_accounts%ROWTYPE,
                                 l_apply_vendor_bank       IN OUT hm_apply_vendor_bank%ROWTYPE,
                                 retcode                   OUT VARCHAR2,
                                 retmsg                    OUT VARCHAR2) IS
  BEGIN
    retcode := 'S';
    retmsg  := 'prc_bank2apply_trans:operate success !';
  
    l_apply_vendor_bank.bank_country        := l_hm_VENDOR_bank_accounts.bank_country;
    l_apply_vendor_bank.bank_branch_code    := l_hm_VENDOR_bank_accounts.bank_branch_code;
    l_apply_vendor_bank.account_holder_name := l_hm_VENDOR_bank_accounts.account_holder_name;
    l_apply_vendor_bank.bank_account_num    := l_hm_VENDOR_bank_accounts.bank_account_num;
    l_apply_vendor_bank.bank_name           := l_hm_VENDOR_bank_accounts.bank_name;
    l_apply_vendor_bank.active_range        := l_hm_VENDOR_bank_accounts.active_range;
    l_apply_vendor_bank.active_class        := l_hm_VENDOR_bank_accounts.active_class;
    l_apply_vendor_bank.active_desc         := l_hm_VENDOR_bank_accounts.active_desc;
    l_apply_vendor_bank.old_row_id          := l_hm_VENDOR_bank_accounts.row_id;
  
    l_apply_vendor_bank.delete_flag := l_hm_VENDOR_bank_accounts.Delete_Flag;
    l_apply_vendor_bank.active_flag := l_hm_VENDOR_bank_accounts.active_flag;
    l_apply_vendor_bank.row_status  := 'UNCHANGED';
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_bank2apply_trans:operate failure !' || SQLERRM;
  END prc_bank2apply_trans;

  procedure prc_apply_from_vendor(in_vendor_code   in varchar2,
                                  in_business_code in varchar2,
                                  in_dept_code     in varchar2,
                                  out_temprow_id   out varchar2,
                                  retcode          out varchar2,
                                  retmsg           out varchar2) is
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_apply_vendor_temp hm_apply_vendor%rowtype;
  
    l_hm_apply_vendor_company  hm_apply_vendor_company%rowtype;
    l_hm_apply_vendor_purchase hm_apply_vendor_purchase%rowtype;
    l_hm_apply_vendor_bank     hm_apply_vendor_bank%rowtype;
  
    t_hm_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_hm_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
    t_hm_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
  
    l_hm_business             hm_business%rowtype;
    l_hm_vendors              hm_vendors%rowtype;
    l_hm_VENDOR_company_data  hm_VENDOR_company_data%rowtype;
    l_hm_vendor_pur_data      hm_vendor_pur_data%rowtype;
    l_hm_VENDOR_bank_accounts hm_VENDOR_bank_accounts%rowtype;
  
    base_extraction_flag     VARCHAR2(1) := '';
    company_extraction_flag  VARCHAR2(1) := '';
    purchase_extraction_flag VARCHAR2(1) := '';
  
    l_vendor_id varchar2(20);
    lc_find     VARCHAR2(10) := '';
  
    /*
    VendorPartnerFunction PI  出票方
    VendorPartnerFunction VN  供应商
    VendorPartnerFunction OA  订货地址
    */
  
  begin
    retcode := 'S';
    retmsg  := 'prc_apply_from_vendor: operate succeed !';
  
    --1，业务信息准备
    for cur_rows in (select *
                       from hm_business t
                      where t.business_code = in_business_code) loop
      l_hm_business := cur_rows;
    end loop;
  
    if l_hm_business.business_code IS NULL THEN
      retcode := 'E';
      retmsg  := in_business_code || ', 无此业务编码, 供应商数据抽取失败!';
      ROLLBACK;
      RETURN;
    END IF;
  
    --2，根据业务编码提取 定制模板 信息，作为 申请单信息 准备
    FOR cur_rows IN (SELECT *
                       FROM hm_apply_vendor_TPT T
                      WHERE T.BUSINESS_CODE = in_business_code) LOOP
      l_hm_apply_vendor        := cur_rows;
      l_hm_apply_vendor.row_id := comm_util.FUNC_NEW_ROWID;
    END LOOP;
  
    --2.1，如无模板数据，申请头信息使用业务码信息，
    --此处尚缺 组织机构编码，股别，审批经营体，下节审批经营体
    IF l_hm_apply_vendor.Business_Code IS NULL THEN
      l_hm_apply_vendor.business_code         := l_hm_business.Business_Code;
      l_hm_apply_vendor.master_type           := l_hm_business.master_type;
      l_hm_apply_vendor.operate_type          := l_hm_business.operate_type;
      l_hm_apply_vendor.business_type         := l_hm_business.business_type;
      l_hm_apply_vendor.inner_outer_flag      := l_hm_business.inner_outer_flag;
      l_hm_apply_vendor.account_grp_code      := l_hm_business.account_group;
      l_hm_apply_vendor.finance_business_flag := l_hm_business.finance_business_flag;
    END IF;
  
    l_hm_apply_vendor.dept_code := in_dept_code;
  
    --3，供应商数据基本信息准备
    --3.1, 特别处理 如果供应商编码为临时码 则审请数据从审请数据复制
    if instr(in_vendor_code, 'TEMP') > 0 THEN
      /*      IF l_hm_business.Operate_Type = 'CREATE'  THEN
        FOR cur_rows IN (SELECT * FROM hm_apply_vendor T WHERE T.vendor_code_TEMP = in_vendor_code AND T.OPERATE_TYPE = 'CREATE' AND T.DELETE_FLAG = '0' )
        LOOP
          l_hm_apply_vendor_temp := cur_rows;
        END LOOP;
        
        --prc_apply2apply_trans(l_hm_apply_vendor_temp,l_hm_apply_vendor,retcode,retmsg);
        --if retcode = 'E' then return; end if;     
        
      ELSE*/
      retcode := 'E';
      retmsg  := '审请信息抽取错误，不合法的临时码信息';
      ROLLBACK;
      RETURN;
      /*      END IF;*/
    
    ELSE
      ---正式的供应商编码信息
      --3.3, 正式的供应商编码信息抽取
      for cur_rows in (select *
                         from hm_vendors t
                        where t.vendor_code = in_vendor_code) loop
        l_hm_vendors := cur_rows;
        l_vendor_id  := l_hm_vendors.row_id; --获取关键字
      end loop;
    
      IF l_vendor_id IS NOT null THEN
      
        --抽取程序开始 ( 数据->申请 )
        --4.1，基本视图抽取
        prc_base2apply_trans(l_hm_vendors,
                             l_hm_apply_vendor,
                             retcode,
                             retmsg);
        if retcode = 'E' then
          return;
        end if;
        base_extraction_flag := 'X';
      
        IF l_hm_apply_vendor.row_id IS NULL THEN
          l_hm_apply_vendor.row_id := comm_util.FUNC_NEW_ROWID;
        END IF;
      
        --4.2，公司代码视图抽取
        for cur_rows in cur_org_company(in_dept_code) LOOP
          l_hm_VENDOR_company_data   := null;
          l_hm_apply_vendor_purchase := null;
          --对申请明细构建公司视图部分(依据传入的公司代码)
          for cur_rows2 in (select *
                              from hm_VENDOR_company_data tt
                             where tt.company_code = cur_rows.company_code
                               AND tt.vendor_id = l_vendor_id
                               AND rownum = 1) loop
            l_hm_VENDOR_company_data := cur_rows2;
          end loop;
        
          if l_hm_VENDOR_company_data.company_code is not null THEN
            prc_company2apply_trans(l_hm_VENDOR_company_data,
                                    l_hm_apply_vendor_company,
                                    retcode,
                                    retmsg);
            if retcode = 'E' then
              return;
            end if;
            company_extraction_flag := 'X';
          
            l_hm_apply_vendor_company.apply_vendor_id := l_hm_apply_vendor.row_id;
            l_hm_apply_vendor_company.company_code    := l_hm_VENDOR_company_data.company_code;
          
            --归集供应商申请信息，待用
            t_hm_apply_vendor_company.extend();
            t_hm_apply_vendor_company(t_hm_apply_vendor_company.count) := l_hm_apply_vendor_company;
          
            IF l_hm_apply_vendor.companycode_list IS NULL OR
               instr(l_hm_apply_vendor.companycode_list,
                     l_hm_VENDOR_company_data.company_code) < 1 THEN
              l_hm_apply_vendor.companycode_list := l_hm_apply_vendor.companycode_list || ',' ||
                                                    l_hm_VENDOR_company_data.company_code;
            END if;
          
          end if;
        
        end loop;
      
        --4.3，采购组织视图抽取
        LC_FIND := '';
        FOR cur_rows IN (SELECT COUNT(*) ROWS_COUNT
                           FROM HM_ORG_PURCHASE T
                          WHERE T.ORG_CODE = in_dept_code) LOOP
          IF cur_rows.ROWS_COUNT > 0 THEN
            LC_FIND := 'X';
          END IF;
        END LOOP;
      
        for cur_rows in cur_org_purchase(in_dept_code, LC_FIND) LOOP
          l_hm_VENDOR_pur_data       := null;
          l_hm_apply_vendor_purchase := null;
          --对申请明细构建公司视图部分(依据传入的公司代码)
          for cur_rows2 in (select *
                              from hm_VENDOR_pur_data tt
                             where tt.purchase_grp_code =
                                   cur_rows.purchase_org
                               AND tt.vendor_id = l_vendor_id
                               AND rownum = 1) loop
            l_hm_VENDOR_pur_data := cur_rows2;
          end loop;
        
          if l_hm_VENDOR_pur_data.purchase_grp_code is not null THEN
            prc_purchase2apply_trans(l_hm_VENDOR_pur_data,
                                     l_hm_apply_vendor_purchase,
                                     retcode,
                                     retmsg);
            if retcode = 'E' then
              return;
            end if;
            purchase_extraction_flag := 'X';
          
            l_hm_apply_vendor_purchase.apply_vendor_id   := l_hm_apply_vendor.row_id;
            l_hm_apply_vendor_purchase.purchase_grp_code := l_hm_VENDOR_pur_data.purchase_grp_code;
          
            --4.4，合作伙伴处理
            if l_hm_business.operate_type IN ('UPDATE', 'CHANGE', 'EXTEND') AND
               l_hm_apply_vendor_purchase.partner_pi IS NULL THEN
              for cur_rows2 in (select a.partner_subject_id
                                  from hm_vendor_partners a
                                 where a.pur_grp_id =
                                       l_hm_VENDOR_pur_data.Row_Id
                                   AND a.partner_function = 'PI'
                                      --AND a.partner_subject_id <> l_hm_VENDORs.Vendor_Code
                                   AND a.delete_flag = '0') loop
                l_hm_apply_vendor_purchase.partner_pi := cur_rows2.partner_subject_id;
              end loop;
            END IF;
          
            --归集供应商申请信息，待用
            t_hm_apply_vendor_purchase.extend();
            t_hm_apply_vendor_purchase(t_hm_apply_vendor_purchase.count) := l_hm_apply_vendor_purchase;
          
            IF l_hm_apply_vendor.purchasecode_list IS NULL OR
               instr(l_hm_apply_vendor.purchasecode_list,
                     l_hm_VENDOR_pur_data.purchase_grp_code) < 1 then
              l_hm_apply_vendor.purchasecode_list := l_hm_apply_vendor.purchasecode_list || ',' ||
                                                     l_hm_VENDOR_pur_data.purchase_grp_code;
            END if;
          
          end if;
        
        end loop;
      
        --4.5，银行数据抽取
        for cur_rows in (select *
                           from hm_VENDOR_bank_accounts a
                          where a.vendor_id = l_vendor_id
                            AND a.delete_flag = '0') loop
          --对申请明细构建银行视图部分
          l_hm_VENDOR_bank_accounts := cur_rows;
          prc_bank2apply_trans(l_hm_VENDOR_bank_accounts,
                               l_hm_apply_vendor_bank,
                               retcode,
                               retmsg);
          if retcode = 'E' then
            return;
          end if;
        
          l_hm_apply_vendor_bank.apply_vendor_id := l_hm_apply_vendor.row_id;
        
          --归集供应商申请信息，待用
          t_hm_apply_vendor_bank.extend();
          t_hm_apply_vendor_bank(t_hm_apply_vendor_bank.count) := l_hm_apply_vendor_bank;
        end loop;
      ELSE
        --- if l_vendor_id is null then
      
        IF in_business_code LIKE 'VDR-CREATE-1600-%-INNER' and
           in_business_code <> 'VDR-CREATE-1600-HW-INNER' THEN
          prc_employee2apply_trans(in_vendor_code,
                                   l_hm_apply_vendor,
                                   RETCODE,
                                   RETMSG);
          if retcode = 'E' then
            return;
          end if;
        END IF;
      
      END IF; ---  L_vendor_ID IS (NOT) NULL
    
    END IF;
  
    -------------------
    --5，申请单信息 合理性优化, 业务相关性处理
    if l_hm_business.operate_type = 'CREATE' THEN
    
      --供应商编码，管理户清空
      IF in_business_code LIKE 'VDR-CREATE-1600-%-INNER' THEN
        l_hm_apply_vendor.vendor_code := in_vendor_code;
      ELSE
        l_hm_apply_vendor.vendor_code := NULL;
      END IF;
    
      --l_hm_apply_vendor.VENDOR_NAME := NULL;   
    
    ELSIF l_hm_business.operate_type IN ('UPDATE', 'CHANGE') THEN
      --IN ( 'UPDATE','CHANGE' )
    
      --l_hm_apply_vendor.view_base_x := base_extraction_flag;
      l_hm_apply_vendor.view_base_x := 'X';
    END IF;
  
    --------------------------------------------for test
    --6，申请信息暂存于 临时表 供前台使用
    insert into hm_apply_vendor_imp
    values l_hm_apply_vendor return row_id into out_temprow_id;
  
    FOR i IN 1 .. t_hm_apply_vendor_company.count LOOP
      IF t_hm_apply_vendor_company(i).row_id IS NULL THEN
        t_hm_apply_vendor_company(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_company_imp
      values t_hm_apply_vendor_company
        (i);
    END LOOP;
  
    FOR i IN 1 .. t_hm_apply_vendor_purchase.count LOOP
      IF t_hm_apply_vendor_purchase(i).row_id IS NULL THEN
        t_hm_apply_vendor_purchase(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_purchase_imp
      values t_hm_apply_vendor_purchase
        (i);
    END LOOP;
  
    FOR i IN 1 .. t_hm_apply_vendor_bank.count LOOP
      IF t_hm_apply_vendor_bank(i).row_id IS NULL THEN
        t_hm_apply_vendor_bank(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_bank_imp
      values t_hm_apply_vendor_bank
        (i);
    END LOOP;
    --------------------------------------------for test
  
    --6，申请信息暂存于 临时表 供前台使用
    insert into hm_apply_vendor_tmp
    values l_hm_apply_vendor return row_id into out_temprow_id;
  
    FOR i IN 1 .. t_hm_apply_vendor_company.count LOOP
      IF t_hm_apply_vendor_company(i).row_id IS NULL THEN
        t_hm_apply_vendor_company(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_company_tmp
      values t_hm_apply_vendor_company
        (i);
    END LOOP;
  
    FOR i IN 1 .. t_hm_apply_vendor_purchase.count LOOP
      IF t_hm_apply_vendor_purchase(i).row_id IS NULL THEN
        t_hm_apply_vendor_purchase(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_purchase_tmp
      values t_hm_apply_vendor_purchase
        (i);
    END LOOP;
  
    FOR i IN 1 .. t_hm_apply_vendor_bank.count LOOP
      IF t_hm_apply_vendor_bank(i).row_id IS NULL THEN
        t_hm_apply_vendor_bank(i).row_id := comm_util.FUNC_NEW_ROWID;
      END IF;
      insert into hm_apply_vendor_bank_tmp
      values t_hm_apply_vendor_bank
        (i);
    END LOOP;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_apply_from_vendor: operate failure !' || SQLERRM;
  END prc_apply_from_vendor;

  ----*********************** 
  /****************************************************************
  功能描述：供应商中增加对账号的控制 
  作者：    baochunhui 
  时间：    2011-12-31       
       
  输入参数说明：  待更新结构
                                     (*如果 in_hm_vendor_pur_data.row_id为空,错误)
  输出参数说明： RETCODE         执行结果编码
                 RETMSG          执行结果描述  
  功能说明：
       1,
  ****************************************************************/

  procedure prc_apply_check_BankAccount(in_bankaccount    in varchar2,
                                        in_bankBranchCode in varchar2,
                                        in_operate        in varchar2,
                                        in_rowid          in varchar2,
                                        in_apply_id       varchar2,
                                        retcode           out varchar2,
                                        retmsg            out varchar2) is
  
    ROW_COUNT              NUMBER := 0;
    ROW_COUNT_temp         NUMBER := 0;
    LCL_COUNT              NUMBER := 0;
    LCL_VENDOR_CODE        VARCHAR2(200);
    TEMP_DELETE_FLAG       VARCHAR2(1);
    TEMP_BANK_ACCOUNT      VARCHAR2(200);
    TEMP_BANK_ACCOUNT_sub  VARCHAR2(200);
    TEMP_BANK_ACCOUNT_subo VARCHAR2(200);
  BEGIN
    RETCODE := 'S';
    RETMSG  := '不存在重复的银行账号！';
    /* FOR CUR_VENDORS_ROW IN (SELECT VENDOR_CODE
                                  FROM HM_VENDORS
                                 WHERE account_holder_name = in_bankaccount
                                   AND DELETE_FLAG = '0') LOOP
    */
    ----申请单中的 
  
    if in_apply_id is not null then
      SELECT COUNT(*), MIN(s.apply_id) apply_id
        INTO ROW_COUNT, LCL_VENDOR_CODE
        FROM HM_APPLY_VENDOR V, HM_APPLY_VENDOR_BANK B, HM_APPLYS S
       WHERE V.ROW_ID = B.APPLY_VENDOR_ID
         AND S.APPLY_ID = V.APPLY_ID
         AND V.DELETE_FLAG = '0'
         AND B.DELETE_FLAG = '0'
         AND S.DELETE_FLAG = '0'
         AND S.AUDIT_FLAG IN ('0', '1')
         AND B.Account_Holder_Name = in_bankaccount
         AND V.APPLY_ID <> in_apply_id;
    else
      SELECT COUNT(*), MIN(s.apply_id) apply_id
        INTO ROW_COUNT, LCL_VENDOR_CODE
        FROM HM_APPLY_VENDOR V, HM_APPLY_VENDOR_BANK B, HM_APPLYS S
       WHERE V.ROW_ID = B.APPLY_VENDOR_ID
         AND S.APPLY_ID = V.APPLY_ID
         AND V.DELETE_FLAG = '0'
         AND B.DELETE_FLAG = '0'
         AND S.DELETE_FLAG = '0'
         AND S.AUDIT_FLAG IN ('0', '1')
         AND B.Account_Holder_Name = in_bankaccount;
    end if;
  
    if ROW_COUNT > 0 then
      if in_apply_id is not null then
        FOR CUR_VENDORS_ROW IN (SELECT b.bank_branch_code bank_branch_code
                                  FROM HM_APPLY_VENDOR      V,
                                       HM_APPLY_VENDOR_BANK B,
                                       HM_APPLYS            S
                                 WHERE V.ROW_ID = B.APPLY_VENDOR_ID
                                   AND S.APPLY_ID = V.APPLY_ID
                                   AND V.DELETE_FLAG = '0'
                                   AND B.DELETE_FLAG = '0'
                                   AND S.DELETE_FLAG = '0'
                                   AND S.AUDIT_FLAG IN ('0', '1')
                                   AND B.Account_Holder_Name =
                                       in_bankaccount
                                   AND V.APPLY_ID <> in_apply_id) LOOP
          TEMP_BANK_ACCOUNT_sub  := substr(in_bankBranchCode, 0, 3);
          TEMP_BANK_ACCOUNT_subo := substr(CUR_VENDORS_ROW.bank_branch_code,
                                           0,
                                           3);
          if TEMP_BANK_ACCOUNT_sub = TEMP_BANK_ACCOUNT_subo then
            LCL_COUNT := LCL_COUNT + 1;
            -- LCL_VENDOR_CODE := LCL_VENDOR_CODE;
          end if;
        end loop;
      else
        FOR CUR_VENDORS_ROW IN (SELECT b.bank_branch_code bank_branch_code
                                  FROM HM_APPLY_VENDOR      V,
                                       HM_APPLY_VENDOR_BANK B,
                                       HM_APPLYS            S
                                 WHERE V.ROW_ID = B.APPLY_VENDOR_ID
                                   AND S.APPLY_ID = V.APPLY_ID
                                   AND V.DELETE_FLAG = '0'
                                   AND B.DELETE_FLAG = '0'
                                   AND S.DELETE_FLAG = '0'
                                   AND S.AUDIT_FLAG IN ('0', '1')
                                   AND B.Account_Holder_Name =
                                       in_bankaccount) LOOP
          TEMP_BANK_ACCOUNT_sub  := substr(in_bankBranchCode, 0, 3);
          TEMP_BANK_ACCOUNT_subo := substr(CUR_VENDORS_ROW.bank_branch_code,
                                           0,
                                           3);
          if TEMP_BANK_ACCOUNT_sub = TEMP_BANK_ACCOUNT_subo then
            LCL_COUNT := LCL_COUNT + 1;
            -- LCL_VENDOR_CODE := LCL_VENDOR_CODE;
          end if;
        end loop;
      end if;
      if LCL_COUNT > 0 then
      
        RETCODE := 'E';
        RETMSG  := '申请单中存在重复的银行账号于' || LCL_VENDOR_CODE || '中';
      end if;
    end if;
    ---------------------------
    IF RETCODE = 'S' THEN
    
      if in_operate = 'CREATE' THEN
        select count(*)
          into ROW_COUNT
          from hm_vendor_bank_accounts s
         where s.account_holder_name = in_bankaccount
           and s.delete_flag = '0';
      
        if ROW_COUNT > 0 then
          select count(*), min(ss.vendor_code)
            into ROW_COUNT_temp, LCL_VENDOR_CODE
            from hm_vendors ss
           where ss.row_id in (select s.vendor_id
                                 from hm_vendor_bank_accounts s
                                where s.account_holder_name = in_bankaccount
                                  and s.delete_flag = '0')
             and ss.delete_flag = '0';
        
          if ROW_COUNT_temp > 0 then
            FOR CUR_VENDORS_ROW IN (select bank_branch_code
                                      from hm_vendor_bank_accounts
                                     where account_holder_name =
                                           in_bankaccount
                                       and delete_flag = '0') LOOP
            
              TEMP_BANK_ACCOUNT_sub  := substr(in_bankBranchCode, 0, 3);
              TEMP_BANK_ACCOUNT_subo := substr(CUR_VENDORS_ROW.bank_branch_code,
                                               0,
                                               3);
              if TEMP_BANK_ACCOUNT_sub = TEMP_BANK_ACCOUNT_subo then
                LCL_COUNT := LCL_COUNT + 1;
                -- LCL_VENDOR_CODE := LCL_VENDOR_CODE || CUR_VENDORS_ROW.VENDOR_CODE || ' ';
              end if;
            end loop;
          
            if LCL_COUNT > 0 then
              RETCODE := 'E';
              RETMSG  := '存在重复的银行账号于' || LCL_VENDOR_CODE || '中';
            end if;
          end if;
        
        end if;
      END IF;
      -----------UPDATE
      if in_operate = 'UPDATE' THEN
        select count(*)
          into ROW_COUNT
          from hm_vendor_bank_accounts s
         where s.account_holder_name = in_bankaccount
           and s.delete_flag = '0'
           AND S.ROW_ID <> in_rowid;
      
        if ROW_COUNT > 0 then
        
          select count(*), min(ss.vendor_code)
            into ROW_COUNT_temp, LCL_VENDOR_CODE
            from hm_vendors ss
           where ss.row_id in (select s.vendor_id
                                 from hm_vendor_bank_accounts s
                                where s.account_holder_name = in_bankaccount
                                  and s.delete_flag = '0'
                                  AND S.ROW_ID <> in_rowid)
             and ss.delete_flag = '0';
        
          if ROW_COUNT_temp > 0 then
            FOR CUR_VENDORS_ROW IN (select bank_branch_code
                                      from hm_vendor_bank_accounts
                                     where account_holder_name =
                                           in_bankaccount
                                       and delete_flag = '0'
                                       AND ROW_ID <> in_rowid) LOOP
              TEMP_BANK_ACCOUNT_sub  := substr(in_bankBranchCode, 0, 3);
              TEMP_BANK_ACCOUNT_subo := substr(CUR_VENDORS_ROW.bank_branch_code,
                                               0,
                                               3);
              if TEMP_BANK_ACCOUNT_sub = TEMP_BANK_ACCOUNT_subo then
                LCL_COUNT := LCL_COUNT + 1;
                -- LCL_VENDOR_CODE := LCL_VENDOR_CODE || CUR_VENDORS_ROW.VENDOR_CODE || ' ';
              end if;
            end loop;
          
            if LCL_COUNT > 0 then
            
              RETCODE := 'E';
              RETMSG  := '存在重复的银行账号于' || LCL_VENDOR_CODE || '中';
            end if;
          end if;
        
        end if;
      END IF;
    END IF;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETCODE := 'E';
      RETMSG  := '供应商编号不存在';
    WHEN OTHERS THEN
      RETCODE := 'E';
      RETMSG  := '存储过程prc_apply_check_BankAccount在执行时出现异常，异常为：' || SQLERRM;
    
  end prc_apply_check_BankAccount;
  /****************************************************************
  功能描述：根据批次号将导入的数据从hm_apply_vendor_IMP导入hm_apply_vendor
            及HM_APPLYS中
  作者：    zhangbiao
  时间：    2009-03-26       
       
  输入参数说明： IN_ACTION_BATCH_ID    批次号码
                 IN_APPLY_ID           申请单ID
                 IN_TABLE_NAME         导入表名
                 IN_COLUMN_NAME        导入字段名
  输出参数说明： RETCODE               执行结果编码
                 RETMSG                执行结果描述  
  功能说明：
       1。首先判断必输项（根据HM_BUSINESS_FIELDS_REQUIED获取必输字段）。
       2。判断是全部导入还是单字段导入（IN_COLUMN_NAME非空则为单字段导入）。
       3。根据输入参数IN_APPLY_ID判断是更新还是新增。
       4。对于新增数据（IN_APPLY_ID为空）,分别向HM_APPLYS和hm_apply_vendor分发数据。
       5。对于更新数据（IN_APPLY_ID非空）,仅向hm_apply_vendor分发数据,同时更新HM_APPLYS表。
       6,内部调用 prc_input_allcheck
  ****************************************************************/
  PROCEDURE prc_applys_import(in_action_batch_id IN VARCHAR2,
                              in_apply_id        IN VARCHAR2,
                              in_business_code   IN VARCHAR2,
                              in_applyby         IN VARCHAR2,
                              in_applyemail      IN VARCHAR2,
                              retcode            OUT VARCHAR2,
                              retmsg             OUT VARCHAR2) IS
    str_sql VARCHAR2(250); --查询SQL
    --str_rowid VARCHAR2(50); --ROWID
    TYPE cur_type IS REF CURSOR;
    cur_view_table         cur_type;
    l_apply                hm_applys%ROWTYPE;
    l_apply_vendor         hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_hm_apply_vendor_tpt  hm_apply_vendor_all_tmp%ROWTYPE;
    l_apply_vendor_all     hm_apply_vendor_all_imp%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_apply_vendor_bank    hm_apply_vendor_bank%ROWTYPE;
    l_apply_vendor_company hm_apply_vendor_company%ROWTYPE;
  
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
    rows_vendors            INTEGER := 0;
    li_count                INTEGER := 0;
    li_times                INTEGER := 0;
    ls_applyid              VARCHAR2(20);
    ls_version              VARCHAR2(4);
    li_countdefault         INTEGER := 0;
    ls_bankname             VARCHAR2(100);
    ls_count1               integer := 0;
    ls_count2               integer := 0;
    ls_fieldname            VARCHAR2(50);
    ls_count3               integer := 0;
    ls_count4               integer := 0;
  
  BEGIN
  
    retcode := 'S';
    retmsg  := 'Import Successful!';
  
    str_sql := 'select * from hm_apply_vendor_all_imp where action_batch_id = ''' ||
               in_action_batch_id || '''';
    IF in_business_code IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Type can''t be empty!';
      RETURN;
    END IF;
  
    SELECT COUNT(*)
      INTO li_countdefault
      FROM hm_apply_vendor_all_tmp
     WHERE business_code = in_business_code
       AND active_flag = '1';
    IF li_countdefault > 0 THEN
      --存在需要默认的值
      SELECT DISTINCT *
        INTO l_hm_apply_vendor_tpt
        FROM hm_apply_vendor_all_tmp
       WHERE business_code = in_business_code
         AND active_flag = '1';
    
      -----------------------------首先更新临时表中的默认值  
    
      UPDATE hm_apply_vendor_all_imp
         SET VENDOR_TITLE           = decode(VENDOR_TITLE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_TITLE,
                                             VENDOR_TITLE),
             VENDOR_CODE            = decode(VENDOR_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_CODE,
                                             VENDOR_CODE),
             VENDOR_NAME            = decode(VENDOR_NAME,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_NAME,
                                             VENDOR_NAME),
             BIDDER_NO              = decode(BIDDER_NO,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BIDDER_NO,
                                             BIDDER_NO),
             SEARCH_TERM            = decode(SEARCH_TERM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SEARCH_TERM,
                                             SEARCH_TERM),
             STREET_ROOM            = decode(STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STREET_ROOM,
                                             STREET_ROOM),
             POSTAL_CODE_CITY       = decode(POSTAL_CODE_CITY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.POSTAL_CODE_CITY,
                                             POSTAL_CODE_CITY),
             COUNTRY                = decode(COUNTRY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COUNTRY,
                                             COUNTRY),
             REGION                 = decode(REGION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.REGION,
                                             REGION),
             PHONE_NUMBER           = decode(PHONE_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PHONE_NUMBER,
                                             PHONE_NUMBER),
             FAX_NUMBER             = decode(FAX_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.FAX_NUMBER,
                                             FAX_NUMBER),
             TAX_CODE               = decode(TAX_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TAX_CODE,
                                             TAX_CODE),
             ACCOUNT_GRP_CODE       = decode(ACCOUNT_GRP_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.ACCOUNT_GRP_CODE,
                                             ACCOUNT_GRP_CODE),
             EXTERNAL_MANUFACTURER  = decode(EXTERNAL_MANUFACTURER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXTERNAL_MANUFACTURER,
                                             EXTERNAL_MANUFACTURER),
             INTL_AREA_CODE         = decode(INTL_AREA_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.INTL_AREA_CODE,
                                             INTL_AREA_CODE),
             TRANS_AGENT_GRP        = decode(TRANS_AGENT_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TRANS_AGENT_GRP,
                                             TRANS_AGENT_GRP),
             SERVICE_AGENT_PROC_GRP = decode(SERVICE_AGENT_PROC_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SERVICE_AGENT_PROC_GRP,
                                             SERVICE_AGENT_PROC_GRP),
             STATION                = decode(STATION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STATION,
                                             STATION),
             CUSTOMER_CODE          = decode(CUSTOMER_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CUSTOMER_CODE,
                                             CUSTOMER_CODE),
             VENDOR_HQ              = decode(VENDOR_HQ,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_HQ,
                                             VENDOR_HQ),
             CITY_STREET_ROOM       = decode(CITY_STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CITY_STREET_ROOM,
                                             CITY_STREET_ROOM),
             LANGUAGE               = decode(LANGUAGE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.LANGUAGE,
                                             LANGUAGE),
             COMPANY_SHARE          = decode(COMPANY_SHARE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANY_SHARE,
                                             COMPANY_SHARE),
             BU                     = decode(BU,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BU,
                                             BU),
             PL                     = decode(PL,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PL,
                                             PL),
             EXPIRY_DATE            = decode(EXPIRY_DATE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXPIRY_DATE,
                                             EXPIRY_DATE),
             COMPANYCODE_LIST       = decode(COMPANYCODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANYCODE_LIST,
                                             COMPANYCODE_LIST),
             PURCHASECODE_LIST      = decode(PURCHASECODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PURCHASECODE_LIST,
                                             PURCHASECODE_LIST)
       WHERE action_batch_id = in_action_batch_id;
    
      -----------------------------  
    END IF;
  
    OPEN cur_view_table FOR str_sql;
    LOOP
      <<loops>>
      FETCH cur_view_table
        INTO l_apply_vendor_all;
      rows_vendors := cur_view_table%ROWCOUNT;
      EXIT WHEN cur_view_table%NOTFOUND;
    
      ls_count3 := 0;
      ls_count4 := 0;
      --l_apply_vendor_all是一个总的导入表里面包含基本视图 公司视图和银行视图 现在分别像 hm_apply_vendor,hm_apply_bank,hm_apply_company中插入数据121009cuiyj
      --由于供应商申请单在三个表中与物料客户不一样，所以最后临时建了个汇总表再分别往各个分表插数据
      retcode := 'S';
      prc_employee2apply_trans(l_apply_vendor_all.employee_no,
                               l_apply_vendor,
                               retcode,
                               retmsg);
      IF retcode = 'E' THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no || ',' ||
                   retmsg;
        RETURN;
      
      END IF;
      --基本视图导入表
      l_apply_vendor.ROW_ID                   := comm_util.func_new_rowid();
      l_apply_vendor.CREATED_BY               := l_apply_vendor_all.CREATED_BY;
      l_apply_vendor.CREATED                  := l_apply_vendor_all.CREATED;
      l_apply_vendor.LAST_UPD_BY              := l_apply_vendor_all.LAST_UPD_BY;
      l_apply_vendor.LAST_UPD                 := l_apply_vendor_all.LAST_UPD;
      l_apply_vendor.MODIFICATION_NUM         := l_apply_vendor_all.MODIFICATION_NUM;
      l_apply_vendor.DELETE_FLAG              := l_apply_vendor_all.DELETE_FLAG;
      l_apply_vendor.ACTIVE_FLAG              := l_apply_vendor_all.ACTIVE_FLAG;
      l_apply_vendor.ACTION_BATCH_ID          := l_apply_vendor_all.ACTION_BATCH_ID;
      l_apply_vendor.BUSINESS_CODE            := l_apply_vendor_all.BUSINESS_CODE;
      l_apply_vendor.MASTER_TYPE              := l_apply_vendor_all.MASTER_TYPE;
      l_apply_vendor.OPERATE_TYPE             := l_apply_vendor_all.OPERATE_TYPE;
      l_apply_vendor.BUSINESS_TYPE            := l_apply_vendor_all.BUSINESS_TYPE;
      l_apply_vendor.INNER_OUTER_FLAG         := l_apply_vendor_all.INNER_OUTER_FLAG;
      l_apply_vendor.VIEW_TYPE                := l_apply_vendor_all.VIEW_TYPE;
      l_apply_vendor.DEPT_CODE                := l_apply_vendor_all.DEPT_CODE;
      l_apply_vendor.APPLY_ID                 := l_apply_vendor_all.APPLY_ID;
      l_apply_vendor.ITEM_NO                  := l_apply_vendor_all.ITEM_NO;
      l_apply_vendor.VIEW_BASE_X              := 'X'; --显示哪个视图哪个视图为X
      l_apply_vendor.VIEW_BANK_X              := 'X'; --显示哪个视图哪个视图为X
      l_apply_vendor.VIEW_COMPANY_X           := 'X'; --显示哪个视图哪个视图为X
      l_apply_vendor.VIEW_PURCHASE_X          := l_apply_vendor_all.VIEW_PURCHASE_X;
      l_apply_vendor.VENDOR_TITLE_X           := l_apply_vendor_all.VENDOR_TITLE_X;
      l_apply_vendor.VENDOR_CODE_X            := l_apply_vendor_all.VENDOR_CODE_X;
      l_apply_vendor.VENDOR_NAME_X            := l_apply_vendor_all.VENDOR_NAME_X;
      l_apply_vendor.BIDDER_NO                := l_apply_vendor_all.BIDDER_NO;
      l_apply_vendor.BIDDER_NO_X              := l_apply_vendor_all.BIDDER_NO_X;
      l_apply_vendor.SEARCH_TERM_X            := l_apply_vendor_all.SEARCH_TERM_X;
      l_apply_vendor.STREET_ROOM_X            := l_apply_vendor_all.STREET_ROOM_X;
      l_apply_vendor.POSTAL_CODE_CITY_X       := l_apply_vendor_all.POSTAL_CODE_CITY_X;
      l_apply_vendor.COUNTRY_X                := l_apply_vendor_all.COUNTRY_X;
      l_apply_vendor.REGION_X                 := l_apply_vendor_all.REGION_X;
      l_apply_vendor.PHONE_NUMBER_X           := l_apply_vendor_all.PHONE_NUMBER_X;
      l_apply_vendor.FAX_NUMBER               := l_apply_vendor_all.FAX_NUMBER;
      l_apply_vendor.FAX_NUMBER_X             := l_apply_vendor_all.FAX_NUMBER_X;
      l_apply_vendor.TAX_CODE_X               := l_apply_vendor_all.TAX_CODE_X;
      l_apply_vendor.ACCOUNT_GRP_CODE_X       := l_apply_vendor_all.ACCOUNT_GRP_CODE_X;
      l_apply_vendor.EXTERNAL_MANUFACTURER    := l_apply_vendor_all.EXTERNAL_MANUFACTURER;
      l_apply_vendor.EXTERNAL_MANUFACTURER_X  := l_apply_vendor_all.EXTERNAL_MANUFACTURER_X;
      l_apply_vendor.INTL_AREA_CODE           := l_apply_vendor_all.INTL_AREA_CODE;
      l_apply_vendor.INTL_AREA_CODE_X         := l_apply_vendor_all.INTL_AREA_CODE_X;
      l_apply_vendor.TRANS_AGENT_GRP          := l_apply_vendor_all.TRANS_AGENT_GRP;
      l_apply_vendor.TRANS_AGENT_GRP_X        := l_apply_vendor_all.TRANS_AGENT_GRP_X;
      l_apply_vendor.SERVICE_AGENT_PROC_GRP   := l_apply_vendor_all.SERVICE_AGENT_PROC_GRP;
      l_apply_vendor.SERVICE_AGENT_PROC_GRP_X := l_apply_vendor_all.SERVICE_AGENT_PROC_GRP_X;
      l_apply_vendor.STATION                  := l_apply_vendor_all.STATION;
      l_apply_vendor.STATION_X                := l_apply_vendor_all.STATION_X;
      l_apply_vendor.CUSTOMER_CODE            := l_apply_vendor_all.CUSTOMER_CODE;
      l_apply_vendor.CUSTOMER_CODE_X          := l_apply_vendor_all.CUSTOMER_CODE_X;
      l_apply_vendor.VENDOR_HQ                := l_apply_vendor_all.VENDOR_HQ;
      l_apply_vendor.VENDOR_HQ_X              := l_apply_vendor_all.VENDOR_HQ_X;
      l_apply_vendor.CITY_STREET_ROOM_X       := l_apply_vendor_all.CITY_STREET_ROOM_X;
      l_apply_vendor.LANGUAGE_X               := l_apply_vendor_all.LANGUAGE_X;
      l_apply_vendor.COMPANY_SHARE            := l_apply_vendor_all.COMPANY_SHARE;
      l_apply_vendor.COMPANY_SHARE_X          := l_apply_vendor_all.COMPANY_SHARE_X;
      l_apply_vendor.BU                       := l_apply_vendor_all.BU;
      l_apply_vendor.BU_X                     := l_apply_vendor_all.BU_X;
      l_apply_vendor.PL                       := l_apply_vendor_all.PL;
      l_apply_vendor.PL_X                     := l_apply_vendor_all.PL_X;
      l_apply_vendor.EXPIRY_DATE              := l_apply_vendor_all.EXPIRY_DATE;
      l_apply_vendor.EXPIRY_DATE_X            := l_apply_vendor_all.EXPIRY_DATE_X;
      l_apply_vendor.COMPANYCODE_LIST         := l_apply_vendor.account_grp_code;
      l_apply_vendor.COMPANYCODE_LIST_X       := l_apply_vendor_all.COMPANYCODE_LIST_X;
      l_apply_vendor.PURCHASECODE_LIST        := l_apply_vendor_all.PURCHASECODE_LIST;
      l_apply_vendor.PURCHASECODE_LIST_X      := l_apply_vendor_all.PURCHASECODE_LIST_X;
      l_apply_vendor.VENDOR_CODE_TEMP         := l_apply_vendor_all.VENDOR_CODE_TEMP;
      l_apply_vendor.FINANCE_BUSINESS_FLAG    := l_apply_vendor_all.FINANCE_BUSINESS_FLAG;
      INSERT INTO hm_apply_vendor_imp VALUES l_apply_vendor; --插入基本视图申请信息表
    
      --公司视图导入表
      l_apply_vendor_company.ROW_ID                   := comm_util.func_new_rowid();
      l_apply_vendor_company.CREATED_BY               := l_apply_vendor_all.CREATED_BY;
      l_apply_vendor_company.CREATED                  := l_apply_vendor_all.CREATED;
      l_apply_vendor_company.LAST_UPD_BY              := l_apply_vendor_all.LAST_UPD_BY;
      l_apply_vendor_company.LAST_UPD                 := l_apply_vendor_all.LAST_UPD;
      l_apply_vendor_company.MODIFICATION_NUM         := l_apply_vendor_all.MODIFICATION_NUM;
      l_apply_vendor_company.DELETE_FLAG              := l_apply_vendor_all.DELETE_FLAG;
      l_apply_vendor_company.ACTIVE_FLAG              := l_apply_vendor_all.ACTIVE_FLAG;
      l_apply_vendor_company.REMARK                   := l_apply_vendor_all.REMARK;
      l_apply_vendor_company.ACTION_BATCH_ID          := l_apply_vendor_all.ACTION_BATCH_ID;
      l_apply_vendor_company.APPLY_VENDOR_ID          := l_apply_vendor.ROW_ID;
      l_apply_vendor_company.COMPANY_CODE             := l_apply_vendor_all.comp_COMPANY_CODE;
      l_apply_vendor_company.HQ                       := l_apply_vendor_all.comp_HQ;
      l_apply_vendor_company.REFERENCE_ACCOUNT_NUMBER := l_apply_vendor_all.comp_REFERENCE_ACCOUNT_NUMBER;
      l_apply_vendor_company.SEQUENCE_NO              := l_apply_vendor_all.comp_SEQUENCE_NO;
      l_apply_vendor_company.CASH_MGT_GROUP           := l_apply_vendor_all.comp_CASH_MGT_GROUP;
      l_apply_vendor_company.ACCOUNTING_CUSTOMER      := l_apply_vendor_all.comp_ACCOUNTING_CUSTOMER;
      l_apply_vendor_company.PAYMENT_TERM_COMPANY     := l_apply_vendor_all.comp_PAYMENT_TERM_COMPANY;
      l_apply_vendor_company.PAYMENT_METHOD           := l_apply_vendor_all.comp_PAYMENT_METHOD;
      l_apply_vendor_company.TOLERANCE_GROUP          := l_apply_vendor_all.comp_TOLERANCE_GROUP;
      l_apply_vendor_company.ACCOUNT_REMARK           := l_apply_vendor_all.comp_ACCOUNT_REMARK;
      l_apply_vendor_company.RECONCILE_ACCOUNT        := l_apply_vendor_all.comp_RECONCILE_ACCOUNT;
      l_apply_vendor_company.ROW_STATUS               := l_apply_vendor_all.comp_ROW_STATUS;
      l_apply_vendor_company.OLD_ROW_ID               := l_apply_vendor_all.comp_OLD_ROW_ID;
      l_apply_vendor_company.row_status               := 'INSERTED';
      INSERT INTO hm_apply_vendor_company_imp
      VALUES l_apply_vendor_company; --插入公司视图申请表
    
      --银行视图导入表
      l_apply_vendor_bank.ROW_ID              := comm_util.func_new_rowid();
      l_apply_vendor_bank.CREATED_BY          := l_apply_vendor_all.CREATED_BY;
      l_apply_vendor_bank.CREATED             := l_apply_vendor_all.CREATED;
      l_apply_vendor_bank.LAST_UPD_BY         := l_apply_vendor_all.LAST_UPD_BY;
      l_apply_vendor_bank.LAST_UPD            := l_apply_vendor_all.LAST_UPD;
      l_apply_vendor_bank.MODIFICATION_NUM    := l_apply_vendor_all.MODIFICATION_NUM;
      l_apply_vendor_bank.DELETE_FLAG         := l_apply_vendor_all.DELETE_FLAG;
      l_apply_vendor_bank.ACTIVE_FLAG         := l_apply_vendor_all.ACTIVE_FLAG;
      l_apply_vendor_bank.REMARK              := l_apply_vendor_all.REMARK;
      l_apply_vendor_bank.ACTION_BATCH_ID     := l_apply_vendor_all.ACTION_BATCH_ID;
      l_apply_vendor_bank.APPLY_VENDOR_ID     := l_apply_vendor.ROW_ID;
      l_apply_vendor_bank.ACCOUNT_HOLDER_NAME := l_apply_vendor_all.BANK_ACCOUNT_HOLDER_NAME;
      l_apply_vendor_bank.BANK_COUNTRY        := l_apply_vendor_all.BANK_BANK_COUNTRY;
      l_apply_vendor_bank.BANK_ACCOUNT_NUM    := l_apply_vendor_all.BANK_BANK_ACCOUNT_NUM;
    
      l_apply_vendor_bank.BANK_BRANCH_CODE := l_apply_vendor_all.BANK_BANK_BRANCH_CODE;
      if not l_apply_vendor_bank.BANK_BRANCH_CODE is null then
        ls_bankname := '';
        select count(*)
          into ls_count4
          from hm_banks s1
         where s1.bank_branch_code = l_apply_vendor_bank.BANK_BRANCH_CODE;
        if ls_count4 = 1 then
          select s1.bank_name
            into ls_bankname
            from hm_banks s1
           where s1.bank_branch_code = l_apply_vendor_bank.BANK_BRANCH_CODE;
          if ls_bankname is not null then
            l_apply_vendor_bank.BANK_NAME := ls_bankname;
          end if;
        else
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',银行代码不存在,请联系MDM新增.';
          RETURN;
        end if;
      end if;
      l_apply_vendor_bank.ACTIVE_RANGE := 'ALL';
      l_apply_vendor_bank.ACTIVE_CLASS := l_apply_vendor_all.BANK_ACTIVE_CLASS;
      l_apply_vendor_bank.ACTIVE_DESC  := l_apply_vendor_all.BANK_ACTIVE_DESC;
      l_apply_vendor_bank.ROW_STATUS   := l_apply_vendor_all.BANK_ROW_STATUS;
      l_apply_vendor_bank.OLD_ROW_ID   := l_apply_vendor_all.BANK_OLD_ROW_ID;
      l_apply_vendor_bank.row_status   := 'INSERTED';
      INSERT INTO hm_apply_vendor_bank_imp VALUES l_apply_vendor_bank; --银行视图申请
      --end
      --###########################################
      --对公司视图的公司代码进行判断
      select count(*)
        into ls_count1
        from hm_org_company a,
             (select t.value, t.value_meaning
                from hm_fnd_values t
               where t.value_set_id = 'CompanyCode'
                 and t.delete_flag = '0') b
       where a.company_code = b.value
         and a.org_code = l_apply_vendor.DEPT_CODE
         and a.company_code = l_apply_vendor_company.company_code
       order by a.company_code;
      if ls_count1 = 0 then
        select count(*)
          into ls_count2
          from hm_fnd_values t
         where t.value_set_id = 'CompanyCode'
           and t.delete_flag = '0'
           and t.value = l_apply_vendor_company.company_code
         order by t.value;
        if ls_count2 = 0 then
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',The company code not exist.';
          RETURN;
        end if;
      end if;
      --统奴科目控制
      IF NOT l_apply_vendor_company.reconcile_account IS NULL THEN
        ls_fieldname := 'ReconcileAccount';
        comm_util.prc_getfndvalues(ls_fieldname,
                                   l_apply_vendor_company.reconcile_account,
                                   'ReconcileAccount',
                                   'K',
                                   '',
                                   retcode,
                                   retmsg);
        IF retcode = 'E' THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',The COMP_RECONCILE_ACCOUNT not exist.';
          RETURN;
        END IF;
      END IF;
      --end
      --排序码
      IF NOT l_apply_vendor_company.sequence_no IS NULL THEN
        ls_fieldname := 'OrderCode';
        comm_util.prc_getfndvalues(ls_fieldname,
                                   l_apply_vendor_company.sequence_no,
                                   'OrderCode',
                                   '',
                                   '',
                                   retcode,
                                   retmsg);
        IF retcode = 'E' THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',The COMP_SEQUENCE_NO not exist.';
          RETURN;
        END IF;
      END IF;
      --end
      --付款条件
      IF NOT l_apply_vendor_company.payment_term_company IS NULL THEN
        ls_fieldname := 'PayTerm';
        comm_util.prc_getfndvalues(ls_fieldname,
                                   l_apply_vendor_company.payment_term_company,
                                   'PayTerm',
                                   '',
                                   '',
                                   retcode,
                                   retmsg);
        IF retcode = 'E' THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',The COMP_PAYMENT_TERM_COMPANY not exist.';
          RETURN;
        END IF;
      END IF;
      --end
      --付款方式
      IF NOT l_apply_vendor_company.payment_method IS NULL THEN
        ls_fieldname := 'PayMethod';
        comm_util.prc_getfndvalues(ls_fieldname,
                                   l_apply_vendor_company.payment_method,
                                   'PayMethod',
                                   '',
                                   '',
                                   retcode,
                                   retmsg);
        IF retcode = 'E' THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',The COMP_PAYMENT_METHOD not exist.';
          RETURN;
        END IF;
      END IF;
      --end
      --end
    
      --###########################################
      --对银行视图的公司代码进行判断
      IF NOT l_apply_vendor_bank.account_holder_name IS NULL THEN
        prc_apply_check_BankAccount(l_apply_vendor_bank.account_holder_name,
                                    l_apply_vendor_bank.bank_branch_code,
                                    'CREATE',
                                    '',
                                    in_apply_id,
                                    retcode,
                                    retmsg);
        IF retcode = 'E' THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no || ',' ||
                     retmsg;
          RETURN;
        END IF;
        select count(*)
          into ls_count3
          from hm_apply_vendor_bank_imp pp
         where pp.account_holder_name =
               l_apply_vendor_bank.account_holder_name
           and pp.bank_branch_code = l_apply_vendor_bank.bank_branch_code
           and pp.ACTION_BATCH_ID = l_apply_vendor_bank.ACTION_BATCH_ID;
        IF ls_count3 > 1 THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',批导数据中存在重复的银行账号.';
          RETURN;
        END IF;
      END IF;
      --end
    
      ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)      
      prc_input_allcheck(in_row_id                  => '',
                         in_tablename_suffix        => '_IMP',
                         v_hm_apply_vendor          => l_apply_vendor,
                         v_hm_apply_vendor_bank     => t_apply_vendor_bank,
                         v_hm_apply_vendor_company  => t_apply_vendor_company,
                         v_hm_apply_vendor_purchase => t_apply_vendor_purchase,
                         retcode                    => retcode,
                         retmsg                     => retmsg);
      IF retcode = 'E' THEN
        UPDATE hm_action_batch_item
           SET success_flag = '0',
               remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                              l_apply_vendor.VENDOR_NAME ||
                              ' import error: ' || retmsg
         WHERE action_batch_id = l_apply_vendor.action_batch_id
           AND master_row_id = l_apply_vendor_all.row_id;
        --RETURN;
        retcode := 'ES';
        GOTO loops;
      END IF;
    
      /*此处替换掉众多校验...*/
    
      ---------------------------------------------此处进行版次获取
      SELECT MAX(current_audit_version)
        INTO ls_version
        FROM hm_business_audit
       WHERE business_code = in_business_code
         AND active_flag = '1'
         AND delete_flag = '0';
      IF ls_version IS NULL THEN
        retcode := 'E';
        retmsg  := 'Get Audit Version failure !';
        UPDATE hm_action_batch_item
           SET success_flag = '0',
               remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                              l_apply_vendor.VENDOR_NAME ||
                              ' import error: ' || retmsg
         WHERE action_batch_id = l_apply_vendor.action_batch_id
           AND master_row_id = l_apply_vendor_all.row_id;
        RETURN;
      END IF;
    
      -------------------------------End 20090514 By LIYI-----------------------------------------------
      IF in_apply_id IS NULL THEN
      
        --说明为新增导入，需要分别向HM_APPLYS和hm_apply_vendor分发数据
        BEGIN
          IF li_times = 0 THEN
            --仅插入一笔申请单主表数据
            retmsg := l_apply_vendor.business_code;
            --str_rowid  := comm_util.func_new_rowid();
            ls_applyid := comm_util.func_new_applyid('VDR');
          
            --
            l_apply.row_id           := comm_util.func_new_rowid();
            l_apply.created_by       := l_apply_vendor.created_by;
            l_apply.created          := l_apply_vendor.created;
            l_apply.last_upd_by      := l_apply_vendor.last_upd_by;
            l_apply.last_upd         := l_apply_vendor.last_upd;
            l_apply.modification_num := 0;
            l_apply.delete_flag      := '0';
            l_apply.active_flag      := '1';
            l_apply.remark           := '导入创建';
            l_apply.apply_id         := ls_applyid;
            --l_apply.parent_apply_id := '';
            l_apply.master_type           := l_apply_vendor.master_type;
            l_apply.operate_type          := l_apply_vendor.operate_type;
            l_apply.business_code         := in_business_code;
            l_apply.current_audit_version := ls_version;
            if l_apply_vendor.business_code in
               ('VDR-CREATE-1600-PL-OUTER', 'VDR-CREATE-1600-PL-INNER') then
              l_apply.for_sap := '0'; --?需要加逻辑
            else
              l_apply.for_sap := '1'; --?需要加逻辑
            end if;
            l_apply.batch_flag       := '1';
            l_apply.transaction_flag := '0';
            l_apply.audit_flag       := '0';
            l_apply.apply_by         := in_applyby;
            l_apply.apply_email      := in_applyemail;
            l_apply.business_type    := l_apply_vendor.business_type;
            l_apply.dept_code        := l_apply_vendor.dept_code;
            l_apply.account_group    := l_apply_vendor.account_grp_code;
            l_apply.inner_outer_flag := l_apply_vendor.inner_outer_flag;
          
            INSERT INTO hm_applys VALUES l_apply;
          
            li_times := li_times + 1;
          
          END IF;
        
          l_apply_vendor.apply_id := ls_applyid;
          --l_apply_vendor.Row_Id := ;
          INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
          comm_util.copy_table_line('hm_apply_vendor',
                                    '',
                                    '_HIS',
                                    l_apply_vendor.row_id,
                                    retcode,
                                    retmsg);
          --插入银行视图和公司视图
          INSERT INTO hm_apply_vendor_company
          VALUES l_apply_vendor_company;
          comm_util.copy_table_line('hm_apply_vendor_company',
                                    '',
                                    '_HIS',
                                    l_apply_vendor_company.row_id,
                                    retcode,
                                    retmsg);
          INSERT INTO hm_apply_vendor_bank VALUES l_apply_vendor_bank;
          comm_util.copy_table_line('hm_apply_vendor_bank',
                                    '',
                                    '_HIS',
                                    l_apply_vendor_bank.row_id,
                                    retcode,
                                    retmsg);
          --end
          UPDATE hm_action_batch_item
             SET success_flag = '1',
                 remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                l_apply_vendor.VENDOR_NAME ||
                                ' import successful'
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor_all.row_id;
        
        EXCEPTION
          WHEN OTHERS THEN
            retcode := 'E';
            retmsg  := 'Insert failed!Exception Code:' || SQLCODE ||
                       ';Exception message:' || SQLERRM;
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                  l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor_all.row_id;
          
        END;
      ELSE
      
        ls_applyid := in_apply_id;
      
        --说明非新增导入，只需要向hm_apply_vendor增加数据，更新HM_APPLYS的最后更新记录
        BEGIN
          SELECT COUNT(*)
            INTO li_count
            FROM hm_applys
           WHERE apply_id = ls_applyid;
          IF li_count = 0 THEN
            retcode := 'E';
            retmsg  := 'Apply ID has not benn created!';
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                  l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor_all.row_id;
          
            GOTO loops; --继续下一步循环；
          END IF;
          IF li_times = 0 THEN
            UPDATE hm_applys
               SET last_upd_by      = l_apply_vendor.last_upd_by,
                   last_upd         = l_apply_vendor.last_upd,
                   modification_num = modification_num + 1,
                   apply_by         = decode(apply_by,
                                             NULL,
                                             in_applyby,
                                             apply_by),
                   apply_email      = decode(apply_email,
                                             NULL,
                                             in_applyemail,
                                             apply_email)
             WHERE apply_id = ls_applyid;
            li_times := li_times + 1;
          END IF;
        
          --  L_APPLY_vendor.ROW_ID := COMM_UTIL.FUNC_NEW_ROWID();
          INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
          comm_util.copy_table_line('hm_apply_vendor',
                                    '',
                                    '_HIS',
                                    l_apply_vendor.row_id,
                                    retcode,
                                    retmsg);
          UPDATE hm_action_batch_item
             SET success_flag = '1',
                 remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                l_apply_vendor.VENDOR_NAME ||
                                ' import successful'
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor_all.row_id;
        
        EXCEPTION
          WHEN OTHERS THEN
            retcode := 'E';
            retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                       ';Exception message:' || SQLERRM;
          
            UPDATE hm_action_batch_item
               SET success_flag = '0',
                   remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                  l_apply_vendor.VENDOR_NAME ||
                                  ' import error: ' || retmsg
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor_all.row_id;
          
        END;
      END IF;
    END LOOP;
    CLOSE cur_view_table;
    COMMIT;
  
    --applys.prc_apply_get_itemno(ls_applyid, lv_retcode, lv_retmsg);
    if ls_applyid is not null then
      applys.prc_apply_get_itemno(in_apply_id => ls_applyid,
                                  retcode     => retcode,
                                  retmsg      => retmsg);
    end if;
    IF retcode = 'E' THEN
      RETURN;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                 ';Exception message:' || SQLERRM;
  END prc_applys_import;

  /**
  车辆管理系统往MDM传输接口视为1600集团外供应商新增，直接插入基本表、公司表、银行表，
  但是不走申请单，所有插入前的逻辑需要重新写一份。设计到的还有prc_input_allcheck_vm2mdm，
  130217cuiyj
  **/
  procedure prc_vendor_info_vm2mdm(t_vendor_base in VM_VENDOR_BASE_TABLE,
                                   vmout         out vm_out_table,
                                   retcode       out varchar2,
                                   retmsg        out varchar2) is
  
    v_vendor_base    VM_VENDOR_BASE_TYPE;
    v_vendor_company VM_VENDOR_COMPANY_TYPE;
    v_vendor_bank    VM_VENDOR_BANK_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
  begin
    retcode := 'S';
    retmsg  := '数据处理完毕';
    vmout   := vm_out_table();
    for i in 1 .. t_vendor_base.count loop
    
      v_vendor_base := t_vendor_base(i);
      --基本信息
      l_apply_vendor.vendor_name      := v_vendor_base.vendor_name;
      l_apply_vendor.tax_code         := v_vendor_base.tax_code;
      l_apply_vendor.street_room      := v_vendor_base.street_room;
      l_apply_vendor.postal_code_city := v_vendor_base.postal_code_city;
      l_apply_vendor.country          := v_vendor_base.country;
      l_apply_vendor.region           := v_vendor_base.region;
      l_apply_vendor.phone_number     := v_vendor_base.phone_number;
      l_apply_vendor.account_grp_code := '1600';
      --公司视图
    
      c_flag                 := 0;
      t_apply_vendor_company := tab_apply_vendor_company();
      if v_vendor_base.t_vendor_company is not null then
        for i in 1 .. v_vendor_base.t_vendor_company.count loop
          v_vendor_company                            := v_vendor_base.t_vendor_company(i);
          v_apply_vendor_company.company_code         := v_vendor_company.COMPANY_CODE;
          v_apply_vendor_company.RECONCILE_ACCOUNT    := v_vendor_company.RECONCILE_ACCOUNT; --统奴科目
          v_apply_vendor_company.SEQUENCE_NO          := v_vendor_company.SEQUENCE_NO; --排序码
          v_apply_vendor_company.payment_term_company := v_vendor_company.PAYMENT_TERM; --付款条款
          v_apply_vendor_company.PAYMENT_METHOD       := v_vendor_company.PAYMENT_METHOD; --付款方式
          v_apply_vendor_company.HQ                   := v_vendor_company.HQ; --总部
          v_apply_vendor_company.CASH_MGT_GROUP       := v_vendor_company.CASH_MGT_GROUP; --现金管理组
          v_apply_vendor_company.ACCOUNTING_CUSTOMER  := v_vendor_company.ACCOUNTING_CUSTOMER; --具有客户的清算
          v_apply_vendor_company.TOLERANCE_GROUP      := v_vendor_company.TOLERANCE_GROUP;
          t_apply_vendor_company.extend();
          t_apply_vendor_company(t_apply_vendor_company.count) := v_apply_vendor_company;
          c_flag := c_flag + 1;
        end loop;
      
      end if;
      --银行视图
      b_flag              := 0;
      t_apply_vendor_bank := tab_apply_vendor_bank();
      if v_vendor_base.t_vendor_bank is not null then
        for i in 1 .. v_vendor_base.t_vendor_bank.count loop
          v_vendor_bank                           := v_vendor_base.t_vendor_bank(i);
          v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
          v_apply_vendor_bank.BANK_COUNTRY        := v_vendor_bank.BANK_COUNTRY; --银行所属国家
          v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
          v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
          t_apply_vendor_bank.extend();
          t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
          b_flag := b_flag + 1;
        end loop;
      
      end if;
      --采购信息
      t_apply_vendor_purchase := tab_apply_vendor_purchase();
    
      if b_flag = 0 or c_flag = 0 then
        insert_flag            := '1';
        v_vmout.retcode        := 'E';
        v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE ||
                                  ';所有供应商的公司和银行信息都要填写;';
        v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
      
        vmout.extend;
        vmout(vmout.count) := v_vmout;
      else
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_allcheck_vm2mdm(v_hm_apply_vendor         => l_apply_vendor,
                                  v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                  v_hm_apply_vendor_company => t_apply_vendor_company,
                                  retcode                   => retcode,
                                  retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag            := '1';
          v_vmout.retcode        := 'E';
          v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE || ';' ||
                                    retmsg;
          v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
        
          vmout.extend;
          vmout(vmout.count) := v_vmout;
        else
          v_vmout.retcode        := 'S';
          v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE || ';' ||
                                    retmsg;
          v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
        
          vmout.extend;
          vmout(vmout.count) := v_vmout;
        END IF;
      end if;
    end loop;
    if (insert_flag = '1') then
      retcode := 'E';
      retmsg  := '有未通过数据';
    else
      retcode := 'S';
      retmsg  := '数据处理完毕,全部通过';
    end if;
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常';
  end prc_vendor_info_vm2mdm;

  --只针对车辆管理系统外围传入接口的 字段逻辑检查
  PROCEDURE prc_input_allcheck_vm2mdm(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                      v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                      v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                      retcode                   OUT VARCHAR2,
                                      retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    out_mastercode         varchar2(50);
  
    c_count integer := 0;
    b_count integer := 0;
    bc_flag integer := 0;
  
    bbc_flag integer := 0;
  
    v_BANK_NAME varchar2(120);
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --检查是否必输
    if trim(l_hm_apply_vendor.vendor_name) is null then
      retcode := 'E';
      retmsg  := '供应商名称不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.tax_code) is null then
      retcode := 'E';
      retmsg  := '税号(身份证号)不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.street_room) is null then
      retcode := 'E';
      retmsg  := '街道/房号不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.postal_code_city) is null then
      retcode := 'E';
      retmsg  := '邮政编码不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.country) is null then
      retcode := 'E';
      retmsg  := '国家不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.region) is null then
      retcode := 'E';
      retmsg  := '地区不能为空!';
      RETURN;
    else
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
    if trim(l_hm_apply_vendor.phone_number) is null then
      retcode := 'E';
      retmsg  := '电话不能为空!';
      RETURN;
    end if;
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is null then
          retcode := 'E';
          retmsg  := '统驭科目不能为空!';
          RETURN;
        else
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is null then
          retcode := 'E';
          retmsg  := '排序码不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is null then
          retcode := 'E';
          retmsg  := '付款条款不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is null then
          retcode := 'E';
          retmsg  := '付款方式不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写公司信息!';
      RETURN;
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写银行信息!';
      RETURN;
    end if;
    --end
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-CREATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
        
          --如果已经存在则只扩展公司和银行信息 先判断是否已经扩展过一次了 扩展过的不能再扩展了
        
          if v_hm_apply_vendor_company.count is not null then
            for i in 1 .. v_hm_apply_vendor_company.count loop
              v_apply_vendor_company := v_hm_apply_vendor_company(i);
              --判断新加的公司是否已经扩展了
              select count(*)
                into c_count
                from hm_vendor_company_data a
               where a.vendor_id = cur_rows.row_id
                 and a.company_code = v_apply_vendor_company.company_code;
              if c_count = 0 then
                insert into hm_vendor_company_data
                  (row_id,
                   vendor_id,
                   company_code,
                   reconcile_account,
                   sequence_no,
                   payment_term,
                   payment_method,
                   hq,
                   cash_mgt_group,
                   accounting_customer,
                   tolerance_group,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   cur_rows.row_id,
                   v_apply_vendor_company.company_code,
                   v_apply_vendor_company.reconcile_account,
                   v_apply_vendor_company.sequence_no,
                   v_apply_vendor_company.payment_term_company,
                   v_apply_vendor_company.payment_method,
                   v_apply_vendor_company.hq,
                   v_apply_vendor_company.cash_mgt_group,
                   v_apply_vendor_company.accounting_customer,
                   v_apply_vendor_company.tolerance_group,
                   'VM',
                   '0',
                   '2',
                   'CREATE');
              else
                bc_flag := bc_flag + 1;
              end if;
            end loop;
          end if;
          if v_hm_apply_vendor_bank.count is not null then
            for i in 1 .. v_hm_apply_vendor_bank.count loop
              v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
              select count(*)
                into b_count
                from hm_vendor_bank_accounts a
               where a.vendor_id = cur_rows.row_id
                 and a.account_holder_name =
                     v_apply_vendor_bank.account_holder_name;
              if b_count = 0 then
                SELECT COUNT(*)
                  INTO b_count
                  FROM HM_APPLY_VENDOR      V,
                       HM_APPLY_VENDOR_BANK B,
                       HM_APPLYS            S
                 WHERE V.ROW_ID = B.APPLY_VENDOR_ID
                   AND S.APPLY_ID = V.APPLY_ID
                   AND V.DELETE_FLAG = '0'
                   AND B.DELETE_FLAG = '0'
                   AND S.DELETE_FLAG = '0'
                   AND S.AUDIT_FLAG IN ('0', '1')
                   AND B.Account_Holder_Name =
                       v_apply_vendor_bank.account_holder_name;
              
                if b_count = 0 then
                  --获取银行名称
                  SELECT BANK_NAME
                    into v_BANK_NAME
                    FROM hm_banks
                   WHERE 1 = 1
                     and delete_flag = '0'
                     and bank_country = v_apply_vendor_bank.bank_country
                     and length(bank_branch_code) = 12
                     and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
                     and bank_branch_code =
                         v_apply_vendor_bank.bank_branch_code;
                  --end      
                  insert into hm_vendor_bank_accounts
                    (row_id,
                     vendor_id,
                     account_holder_name,
                     bank_country,
                     bank_account_num,
                     bank_branch_code,
                     created_by,
                     for_gvs,
                     last_version_flag,
                     operate_status,
                     active_range,
                     bank_name)
                  values
                    (comm_util.FUNC_NEW_ROWID(),
                     cur_rows.row_id,
                     v_apply_vendor_bank.account_holder_name,
                     v_apply_vendor_bank.bank_country,
                     v_apply_vendor_bank.bank_account_num,
                     v_apply_vendor_bank.bank_branch_code,
                     'VM',
                     '0',
                     '2',
                     'CREATE',
                     'ALL',
                     v_BANK_NAME);
                else
                  bc_flag := bc_flag + 1;
                end if;
              else
                bc_flag := bc_flag + 1;
              end if;
            end loop;
          end if;
        
          if bc_flag != 0 then
            v_hm_apply_vendor.vendor_code := cur_rows.vendor_code;
            retcode                       := 'E';
            retmsg                        := '供应商编码[' ||
                                             cur_rows.vendor_code ||
                                             ']供应商税号 [' ||
                                             l_hm_apply_vendor.tax_code ||
                                             ']在主数据或者申请单中存在公司和银行已扩展的信息,不能扩展';
          else
            v_hm_apply_vendor.vendor_code := cur_rows.vendor_code;
            retcode                       := 'S';
            retmsg                        := '供应商编码[' ||
                                             cur_rows.vendor_code ||
                                             ']供应商税号 [' ||
                                             l_hm_apply_vendor.tax_code ||
                                             '] 已经存在于主数据 [' ||
                                             cur_rows.vendor_code ||
                                             ']!扩展公司和银行信息成功';
          end if;
        else
          --不存在申请单还有主数据中需要新增
          generate_code.generate_master_code('VENDOR',
                                             l_hm_apply_vendor.account_grp_code,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND NOT instr(out_mastercode, 'TEMP') > 0 AND
             out_mastercode IS NOT NULL THEN
            retcode := 'S';
          ELSE
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
          if retcode = 'S' then
            l_hm_apply_vendor.row_id      := comm_util.FUNC_NEW_ROWID();
            l_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.vendor_code := out_mastercode;
            --创建者是VM表明是车辆管理接口新增进来的 
            insert into hm_vendors
              (row_id,
               vendor_code,
               vendor_name,
               tax_code,
               street_room,
               postal_code_city,
               country,
               region,
               phone_number,
               account_grp_code,
               created_by,
               for_gvs,
               last_version_flag,
               operate_status)
            values
              (l_hm_apply_vendor.row_id,
               l_hm_apply_vendor.vendor_code,
               l_hm_apply_vendor.vendor_name,
               l_hm_apply_vendor.tax_code,
               l_hm_apply_vendor.street_room,
               l_hm_apply_vendor.postal_code_city,
               l_hm_apply_vendor.country,
               l_hm_apply_vendor.region,
               l_hm_apply_vendor.phone_number,
               l_hm_apply_vendor.account_grp_code,
               'VM',
               '0',
               '2',
               'CREATE');
            if v_hm_apply_vendor_company.count is not null then
              for i in 1 .. v_hm_apply_vendor_company.count loop
                v_apply_vendor_company := v_hm_apply_vendor_company(i);
                insert into hm_vendor_company_data
                  (row_id,
                   vendor_id,
                   company_code,
                   reconcile_account,
                   sequence_no,
                   payment_term,
                   payment_method,
                   hq,
                   cash_mgt_group,
                   accounting_customer,
                   tolerance_group,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_company.company_code,
                   v_apply_vendor_company.reconcile_account,
                   v_apply_vendor_company.sequence_no,
                   v_apply_vendor_company.payment_term_company,
                   v_apply_vendor_company.payment_method,
                   v_apply_vendor_company.hq,
                   v_apply_vendor_company.cash_mgt_group,
                   v_apply_vendor_company.accounting_customer,
                   v_apply_vendor_company.tolerance_group,
                   'VM',
                   '0',
                   '2',
                   'CREATE');
              end loop;
            end if;
            if v_hm_apply_vendor_bank.count is not null then
              for i in 1 .. v_hm_apply_vendor_bank.count loop
                v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
                --获取银行名称
                SELECT BANK_NAME
                  into v_BANK_NAME
                  FROM hm_banks
                 WHERE 1 = 1
                   and delete_flag = '0'
                   and bank_country = v_apply_vendor_bank.bank_country
                   and length(bank_branch_code) = 12
                   and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
                   and bank_branch_code =
                       v_apply_vendor_bank.bank_branch_code;
                --end 
                insert into hm_vendor_bank_accounts
                  (row_id,
                   vendor_id,
                   account_holder_name,
                   bank_country,
                   bank_account_num,
                   bank_branch_code,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   active_range,
                   bank_name)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_bank.account_holder_name,
                   v_apply_vendor_bank.bank_country,
                   v_apply_vendor_bank.bank_account_num,
                   v_apply_vendor_bank.bank_branch_code,
                   'VM',
                   '0',
                   '2',
                   'CREATE',
                   'ALL',
                   v_BANK_NAME);
              end loop;
            end if;
          end if;
          retcode := 'S';
          retmsg  := '新增供应商成功';
        END IF;
      END LOOP;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_allcheck_vm2mdm;

  PROCEDURE PRC_UPDATEBANK_APPLYS_IMPORT(in_action_batch_id IN VARCHAR2,
                                         in_apply_id        IN VARCHAR2,
                                         in_business_code   IN VARCHAR2,
                                         in_applyby         IN VARCHAR2,
                                         in_applyemail      IN VARCHAR2,
                                         retcode            OUT VARCHAR2,
                                         retmsg             OUT VARCHAR2) IS
    str_sql VARCHAR2(250); --查询SQL
    --str_rowid VARCHAR2(50); --ROWID
    TYPE cur_type IS REF CURSOR;
    cur_view_table         cur_type;
    l_apply                hm_applys%ROWTYPE;
    l_apply_vendor         hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_hm_apply_vendor_tpt  hm_apply_vendor_all_tmp%ROWTYPE;
    l_apply_vendor_all     hm_apply_vendor_all_imp%ROWTYPE; --HM_APPLY_CUSTOME表 行类型
    l_apply_vendor_bank    hm_apply_vendor_bank%ROWTYPE;
    l_apply_vendor_company hm_apply_vendor_company%ROWTYPE;
  
    t_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
    rows_vendors            INTEGER := 0;
    li_count                INTEGER := 0;
    li_times                INTEGER := 0;
    ls_applyid              VARCHAR2(20);
    ls_version              VARCHAR2(4);
    li_countdefault         INTEGER := 0;
    ls_bankname             VARCHAR2(100);
    ls_count1               integer := 0;
    ls_count2               integer := 0;
    ls_fieldname            VARCHAR2(50);
    ls_count3               integer := 0;
    ls_count4               integer := 0;
    out_temprow_id          VARCHAR2(50);
    out_bankoldrow_id       VARCHAR2(50);
    ls_count5               integer := 0;
  BEGIN
  
    retcode := 'S';
    retmsg  := 'Import Successful!';
  
    str_sql := 'select * from hm_apply_vendor_all_imp where action_batch_id = ''' ||
               in_action_batch_id || '''';
    IF in_business_code IS NULL THEN
      retcode := 'E';
      retmsg  := 'Business Type can''t be empty!';
      RETURN;
    END IF;
  
    SELECT COUNT(*)
      INTO li_countdefault
      FROM hm_apply_vendor_all_tmp
     WHERE business_code = in_business_code
       AND active_flag = '1';
    IF li_countdefault > 0 THEN
      --存在需要默认的值
      SELECT DISTINCT *
        INTO l_hm_apply_vendor_tpt
        FROM hm_apply_vendor_all_tmp
       WHERE business_code = in_business_code
         AND active_flag = '1';
    
      -----------------------------首先更新临时表中的默认值  
    
      UPDATE hm_apply_vendor_all_imp
         SET VENDOR_TITLE           = decode(VENDOR_TITLE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_TITLE,
                                             VENDOR_TITLE),
             VENDOR_CODE            = decode(VENDOR_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_CODE,
                                             VENDOR_CODE),
             VENDOR_NAME            = decode(VENDOR_NAME,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_NAME,
                                             VENDOR_NAME),
             BIDDER_NO              = decode(BIDDER_NO,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BIDDER_NO,
                                             BIDDER_NO),
             SEARCH_TERM            = decode(SEARCH_TERM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SEARCH_TERM,
                                             SEARCH_TERM),
             STREET_ROOM            = decode(STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STREET_ROOM,
                                             STREET_ROOM),
             POSTAL_CODE_CITY       = decode(POSTAL_CODE_CITY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.POSTAL_CODE_CITY,
                                             POSTAL_CODE_CITY),
             COUNTRY                = decode(COUNTRY,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COUNTRY,
                                             COUNTRY),
             REGION                 = decode(REGION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.REGION,
                                             REGION),
             PHONE_NUMBER           = decode(PHONE_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PHONE_NUMBER,
                                             PHONE_NUMBER),
             FAX_NUMBER             = decode(FAX_NUMBER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.FAX_NUMBER,
                                             FAX_NUMBER),
             TAX_CODE               = decode(TAX_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TAX_CODE,
                                             TAX_CODE),
             ACCOUNT_GRP_CODE       = decode(ACCOUNT_GRP_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.ACCOUNT_GRP_CODE,
                                             ACCOUNT_GRP_CODE),
             EXTERNAL_MANUFACTURER  = decode(EXTERNAL_MANUFACTURER,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXTERNAL_MANUFACTURER,
                                             EXTERNAL_MANUFACTURER),
             INTL_AREA_CODE         = decode(INTL_AREA_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.INTL_AREA_CODE,
                                             INTL_AREA_CODE),
             TRANS_AGENT_GRP        = decode(TRANS_AGENT_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.TRANS_AGENT_GRP,
                                             TRANS_AGENT_GRP),
             SERVICE_AGENT_PROC_GRP = decode(SERVICE_AGENT_PROC_GRP,
                                             NULL,
                                             l_hm_apply_vendor_tpt.SERVICE_AGENT_PROC_GRP,
                                             SERVICE_AGENT_PROC_GRP),
             STATION                = decode(STATION,
                                             NULL,
                                             l_hm_apply_vendor_tpt.STATION,
                                             STATION),
             CUSTOMER_CODE          = decode(CUSTOMER_CODE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CUSTOMER_CODE,
                                             CUSTOMER_CODE),
             VENDOR_HQ              = decode(VENDOR_HQ,
                                             NULL,
                                             l_hm_apply_vendor_tpt.VENDOR_HQ,
                                             VENDOR_HQ),
             CITY_STREET_ROOM       = decode(CITY_STREET_ROOM,
                                             NULL,
                                             l_hm_apply_vendor_tpt.CITY_STREET_ROOM,
                                             CITY_STREET_ROOM),
             LANGUAGE               = decode(LANGUAGE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.LANGUAGE,
                                             LANGUAGE),
             COMPANY_SHARE          = decode(COMPANY_SHARE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANY_SHARE,
                                             COMPANY_SHARE),
             BU                     = decode(BU,
                                             NULL,
                                             l_hm_apply_vendor_tpt.BU,
                                             BU),
             PL                     = decode(PL,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PL,
                                             PL),
             EXPIRY_DATE            = decode(EXPIRY_DATE,
                                             NULL,
                                             l_hm_apply_vendor_tpt.EXPIRY_DATE,
                                             EXPIRY_DATE),
             COMPANYCODE_LIST       = decode(COMPANYCODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.COMPANYCODE_LIST,
                                             COMPANYCODE_LIST),
             PURCHASECODE_LIST      = decode(PURCHASECODE_LIST,
                                             NULL,
                                             l_hm_apply_vendor_tpt.PURCHASECODE_LIST,
                                             PURCHASECODE_LIST)
       WHERE action_batch_id = in_action_batch_id;
    
      -----------------------------  
    END IF;
  
    OPEN cur_view_table FOR str_sql;
    LOOP
      <<loops>>
      FETCH cur_view_table
        INTO l_apply_vendor_all;
      rows_vendors := cur_view_table%ROWCOUNT;
      EXIT WHEN cur_view_table%NOTFOUND;
      --l_apply_vendor_all是一个总的导入表里面包含基本视图 公司视图和银行视图 现在分别像 hm_apply_vendor,hm_apply_bank,hm_apply_company中插入数据121009cuiyj
      --由于供应商申请单在三个表中与物料客户不一样，所以最后临时建了个汇总表再分别往各个分表插数据
      retcode := 'S';
    
      --基本视图导入表
      l_apply_vendor.created_by  := l_apply_vendor_all.CREATED_BY;
      l_apply_vendor.created     := l_apply_vendor_all.created;
      l_apply_vendor.last_upd_by := l_apply_vendor_all.last_upd_by;
      l_apply_vendor.last_upd    := l_apply_vendor_all.last_upd;
      out_bankoldrow_id          := '';
    
      prc_updatebank_apply_vendor(l_apply_vendor_all,
                                  l_apply_vendor,
                                  out_bankoldrow_id,
                                  out_temprow_id,
                                  retcode,
                                  retmsg);
    
      IF retcode = 'E' THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no || ',' ||
                   retmsg;
        RETURN;
      END IF;
      --判断批导数据中是否存在重复的供应商编码
      select count(*)
        into ls_count4
        from hm_apply_vendor_imp pp
       where pp.vendor_code = l_apply_vendor_all.employee_no
         and pp.ACTION_BATCH_ID = l_apply_vendor_all.action_batch_id;
      IF ls_count4 > 1 THEN
        ROLLBACK;
        retcode := 'E';
        retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                   ',批导数据中存在重复的供应商编码.';
        RETURN;
      END IF;
      --银行视图导入表
      l_apply_vendor_bank.ROW_ID              := comm_util.func_new_rowid();
      l_apply_vendor_bank.CREATED_BY          := l_apply_vendor_all.CREATED_BY;
      l_apply_vendor_bank.CREATED             := l_apply_vendor_all.CREATED;
      l_apply_vendor_bank.LAST_UPD_BY         := l_apply_vendor_all.LAST_UPD_BY;
      l_apply_vendor_bank.LAST_UPD            := l_apply_vendor_all.LAST_UPD;
      l_apply_vendor_bank.MODIFICATION_NUM    := l_apply_vendor_all.MODIFICATION_NUM;
      l_apply_vendor_bank.DELETE_FLAG         := l_apply_vendor_all.DELETE_FLAG;
      l_apply_vendor_bank.ACTIVE_FLAG         := l_apply_vendor_all.ACTIVE_FLAG;
      l_apply_vendor_bank.REMARK              := l_apply_vendor_all.REMARK;
      l_apply_vendor_bank.ACTION_BATCH_ID     := l_apply_vendor_all.ACTION_BATCH_ID;
      l_apply_vendor_bank.APPLY_VENDOR_ID     := out_temprow_id;
      l_apply_vendor_bank.ACCOUNT_HOLDER_NAME := l_apply_vendor_all.BANK_ACCOUNT_HOLDER_NAME;
      l_apply_vendor_bank.BANK_COUNTRY        := l_apply_vendor_all.BANK_BANK_COUNTRY;
      l_apply_vendor_bank.BANK_ACCOUNT_NUM    := l_apply_vendor_all.BANK_BANK_ACCOUNT_NUM;
    
      l_apply_vendor_bank.BANK_BRANCH_CODE := l_apply_vendor_all.BANK_BANK_BRANCH_CODE;
      if not l_apply_vendor_bank.BANK_BRANCH_CODE is null then
        ls_bankname := '';
        select count(*)
          into ls_count5
          from hm_banks s1
         where s1.bank_branch_code = l_apply_vendor_bank.BANK_BRANCH_CODE;
        if ls_count5 = 1 then
          select s1.bank_name
            into ls_bankname
            from hm_banks s1
           where s1.bank_branch_code = l_apply_vendor_bank.BANK_BRANCH_CODE;
          l_apply_vendor_bank.BANK_NAME := ls_bankname;
        else
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',银行代码不存在,请联系MDM新增.';
          RETURN;
        end if;
      end if;
      l_apply_vendor_bank.ACTIVE_RANGE := 'ALL';
      l_apply_vendor_bank.ACTIVE_CLASS := l_apply_vendor_all.BANK_ACTIVE_CLASS;
      l_apply_vendor_bank.ACTIVE_DESC  := l_apply_vendor_all.BANK_ACTIVE_DESC;
      l_apply_vendor_bank.ROW_STATUS   := l_apply_vendor_all.BANK_ROW_STATUS;
      l_apply_vendor_bank.OLD_ROW_ID   := out_bankoldrow_id;
      l_apply_vendor_bank.row_status   := 'UPDATED';
      INSERT INTO hm_apply_vendor_bank_imp VALUES l_apply_vendor_bank; --银行视图申请
      --end
    
      --###########################################
      --对银行视图的公司代码进行判断
      IF NOT l_apply_vendor_bank.account_holder_name IS NULL THEN
        prc_apply_check_BankAccount(l_apply_vendor_bank.account_holder_name,
                                    l_apply_vendor_bank.bank_branch_code,
                                    'UPDATE',
                                    out_bankoldrow_id,
                                    in_apply_id,
                                    retcode,
                                    retmsg);
        IF retcode = 'E' THEN
          /*ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:'||l_apply_vendor_all.employee_no||','||retmsg;
          RETURN;*/
          retcode := 'E';
          UPDATE hm_action_batch_item
             SET success_flag = '0',
                 remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                l_apply_vendor.VENDOR_NAME ||
                                ' import error: ' || retmsg
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor_all.row_id;
        
        END IF;
      
        select count(*)
          into ls_count3
          from hm_apply_vendor_bank_imp pp
         where pp.account_holder_name =
               l_apply_vendor_bank.account_holder_name
           and pp.bank_branch_code = l_apply_vendor_bank.bank_branch_code
           and pp.ACTION_BATCH_ID = l_apply_vendor_bank.ACTION_BATCH_ID;
        IF ls_count3 > 1 THEN
          ROLLBACK;
          retcode := 'E';
          retmsg  := 'EmployeeNo:' || l_apply_vendor_all.employee_no ||
                     ',批导数据中存在重复的银行账号.';
          RETURN;
        END IF;
      END IF;
      --end
    
      /*此处替换掉众多校验...*/
      if retcode != 'E' then
        ---------------------------------------------此处进行版次获取
        SELECT MAX(current_audit_version)
          INTO ls_version
          FROM hm_business_audit
         WHERE business_code = in_business_code
           AND active_flag = '1'
           AND delete_flag = '0';
        IF ls_version IS NULL THEN
          retcode := 'E';
          retmsg  := 'Get Audit Version failure !';
          UPDATE hm_action_batch_item
             SET success_flag = '0',
                 remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                l_apply_vendor.VENDOR_NAME ||
                                ' import error: ' || retmsg
           WHERE action_batch_id = l_apply_vendor.action_batch_id
             AND master_row_id = l_apply_vendor_all.row_id;
          RETURN;
        END IF;
      
        -------------------------------End 20090514 By LIYI-----------------------------------------------
        IF in_apply_id IS NULL THEN
        
          --说明为新增导入，需要分别向HM_APPLYS和hm_apply_vendor分发数据
          BEGIN
            IF li_times = 0 THEN
              --仅插入一笔申请单主表数据
              retmsg := l_apply_vendor.business_code;
              --str_rowid  := comm_util.func_new_rowid();
              ls_applyid := comm_util.func_new_applyid('VDR');
            
              --
              l_apply.row_id           := comm_util.func_new_rowid();
              l_apply.created_by       := l_apply_vendor.created_by;
              l_apply.created          := l_apply_vendor.created;
              l_apply.last_upd_by      := l_apply_vendor.last_upd_by;
              l_apply.last_upd         := l_apply_vendor.last_upd;
              l_apply.modification_num := 0;
              l_apply.delete_flag      := '0';
              l_apply.active_flag      := '1';
              l_apply.remark           := '导入创建';
              l_apply.apply_id         := ls_applyid;
              --l_apply.parent_apply_id := '';
              l_apply.master_type           := l_apply_vendor.master_type;
              l_apply.operate_type          := l_apply_vendor.operate_type;
              l_apply.business_code         := in_business_code;
              l_apply.current_audit_version := ls_version;
              if l_apply_vendor.business_code in
                 ('VDR-CREATE-1600-PL-OUTER', 'VDR-CREATE-1600-PL-INNER') then
                l_apply.for_sap := '0'; --?需要加逻辑
              else
                l_apply.for_sap := '1'; --?需要加逻辑
              end if;
              l_apply.batch_flag            := '1';
              l_apply.transaction_flag      := '0';
              l_apply.audit_flag            := '0';
              l_apply.apply_by              := in_applyby;
              l_apply.apply_email           := in_applyemail;
              l_apply.business_type         := l_apply_vendor.business_type;
              l_apply.dept_code             := l_apply_vendor.dept_code;
              l_apply.account_group         := l_apply_vendor.account_grp_code;
              l_apply.inner_outer_flag      := l_apply_vendor.inner_outer_flag;
              l_apply.finance_business_flag := l_apply_vendor.finance_business_flag;
            
              INSERT INTO hm_applys VALUES l_apply;
            
              li_times := li_times + 1;
            
            END IF;
          
            l_apply_vendor.apply_id := ls_applyid;
            --l_apply_vendor.Row_Id := ;
            INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
            comm_util.copy_table_line('hm_apply_vendor',
                                      '',
                                      '_HIS',
                                      l_apply_vendor.row_id,
                                      retcode,
                                      retmsg);
            --插入银行视图
          
            INSERT INTO hm_apply_vendor_bank VALUES l_apply_vendor_bank;
            comm_util.copy_table_line('hm_apply_vendor_bank',
                                      '',
                                      '_HIS',
                                      l_apply_vendor_bank.row_id,
                                      retcode,
                                      retmsg);
            --end
            UPDATE hm_action_batch_item
               SET success_flag = '1',
                   remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                  l_apply_vendor.VENDOR_NAME ||
                                  ' import successful'
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor_all.row_id;
          
          EXCEPTION
            WHEN OTHERS THEN
              retcode := 'E';
              retmsg  := 'Insert failed!Exception Code:' || SQLCODE ||
                         ';Exception message:' || SQLERRM;
            
              UPDATE hm_action_batch_item
                 SET success_flag = '0',
                     remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                    l_apply_vendor.VENDOR_NAME ||
                                    ' import error: ' || retmsg
               WHERE action_batch_id = l_apply_vendor.action_batch_id
                 AND master_row_id = l_apply_vendor_all.row_id;
            
          END;
        ELSE
        
          ls_applyid := in_apply_id;
        
          --说明非新增导入，只需要向hm_apply_vendor增加数据，更新HM_APPLYS的最后更新记录
          BEGIN
            SELECT COUNT(*)
              INTO li_count
              FROM hm_applys
             WHERE apply_id = ls_applyid;
            IF li_count = 0 THEN
              retcode := 'E';
              retmsg  := 'Apply ID has not benn created!';
            
              UPDATE hm_action_batch_item
                 SET success_flag = '0',
                     remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                    l_apply_vendor.VENDOR_NAME ||
                                    ' import error: ' || retmsg
               WHERE action_batch_id = l_apply_vendor.action_batch_id
                 AND master_row_id = l_apply_vendor_all.row_id;
            
              GOTO loops; --继续下一步循环；
            END IF;
            IF li_times = 0 THEN
              UPDATE hm_applys
                 SET last_upd_by      = l_apply_vendor.last_upd_by,
                     last_upd         = l_apply_vendor.last_upd,
                     modification_num = modification_num + 1,
                     apply_by         = decode(apply_by,
                                               NULL,
                                               in_applyby,
                                               apply_by),
                     apply_email      = decode(apply_email,
                                               NULL,
                                               in_applyemail,
                                               apply_email)
               WHERE apply_id = ls_applyid;
              li_times := li_times + 1;
            END IF;
          
            --  L_APPLY_vendor.ROW_ID := COMM_UTIL.FUNC_NEW_ROWID();
            INSERT INTO hm_apply_vendor VALUES l_apply_vendor;
            comm_util.copy_table_line('hm_apply_vendor',
                                      '',
                                      '_HIS',
                                      l_apply_vendor.row_id,
                                      retcode,
                                      retmsg);
            UPDATE hm_action_batch_item
               SET success_flag = '1',
                   remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                  l_apply_vendor.VENDOR_NAME ||
                                  ' import successful'
             WHERE action_batch_id = l_apply_vendor.action_batch_id
               AND master_row_id = l_apply_vendor_all.row_id;
          
          EXCEPTION
            WHEN OTHERS THEN
              retcode := 'E';
              retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                         ';Exception message:' || SQLERRM;
            
              UPDATE hm_action_batch_item
                 SET success_flag = '0',
                     remark       = 'Vendor ' || l_apply_vendor.vendor_code ||
                                    l_apply_vendor.VENDOR_NAME ||
                                    ' import error: ' || retmsg
               WHERE action_batch_id = l_apply_vendor.action_batch_id
                 AND master_row_id = l_apply_vendor_all.row_id;
            
          END;
        END IF;
      end if;
    END LOOP;
    CLOSE cur_view_table;
  
    COMMIT;
  
    --applys.prc_apply_get_itemno(ls_applyid, lv_retcode, lv_retmsg);
    if ls_applyid is not null then
      applys.prc_apply_get_itemno(in_apply_id => ls_applyid,
                                  retcode     => retcode,
                                  retmsg      => retmsg);
    end if;
    IF retcode = 'E' THEN
      RETURN;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'Update failed!Exception Code:' || SQLCODE ||
                 ';Exception message:' || SQLERRM;
  END PRC_UPDATEBANK_APPLYS_IMPORT;

  procedure prc_updatebank_apply_vendor(l_apply_vendor_all hm_apply_vendor_all_imp%ROWTYPE,
                                        
                                        l_hm_apply_vendor in out hm_apply_vendor%rowtype,
                                        out_bankoldrow_id in out varchar2,
                                        out_temprow_id    out varchar2,
                                        retcode           out varchar2,
                                        retmsg            out varchar2) is
    --l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_apply_vendor_temp hm_apply_vendor%rowtype;
  
    l_hm_apply_vendor_company  hm_apply_vendor_company%rowtype;
    l_hm_apply_vendor_purchase hm_apply_vendor_purchase%rowtype;
    l_hm_apply_vendor_bank     hm_apply_vendor_bank%rowtype;
  
    t_hm_apply_vendor_company  tab_apply_vendor_company := tab_apply_vendor_company();
    t_hm_apply_vendor_purchase tab_apply_vendor_purchase := tab_apply_vendor_purchase();
    t_hm_apply_vendor_bank     tab_apply_vendor_bank := tab_apply_vendor_bank();
  
    l_hm_business             hm_business%rowtype;
    l_hm_vendors              hm_vendors%rowtype;
    l_hm_VENDOR_company_data  hm_VENDOR_company_data%rowtype;
    l_hm_vendor_pur_data      hm_vendor_pur_data%rowtype;
    l_hm_VENDOR_bank_accounts hm_VENDOR_bank_accounts%rowtype;
  
    base_extraction_flag     VARCHAR2(1) := '';
    company_extraction_flag  VARCHAR2(1) := '';
    purchase_extraction_flag VARCHAR2(1) := '';
  
    l_vendor_id varchar2(20);
    lc_find     VARCHAR2(10) := '';
    ll_count    INTEGER := 0;
    lll_count   INTEGER := 0;
    /*
    VendorPartnerFunction PI  出票方
    VendorPartnerFunction VN  供应商
    VendorPartnerFunction OA  订货地址
    */
  
  begin
    retcode := 'S';
    retmsg  := 'prc_apply_from_vendor: operate succeed !';
  
    --1，业务信息准备
    for cur_rows in (select *
                       from hm_business t
                      where t.business_code =
                            l_apply_vendor_all.business_code) loop
      l_hm_business := cur_rows;
    end loop;
  
    if l_hm_business.business_code IS NULL THEN
      retcode := 'E';
      retmsg  := l_apply_vendor_all.business_code || ', 无此业务编码, 供应商数据抽取失败!';
      ROLLBACK;
      RETURN;
    END IF;
  
    --2，根据业务编码提取 定制模板 信息，作为 申请单信息 准备
    FOR cur_rows IN (SELECT *
                       FROM hm_apply_vendor_TPT T
                      WHERE T.BUSINESS_CODE =
                            l_apply_vendor_all.business_code) LOOP
      l_hm_apply_vendor        := cur_rows;
      l_hm_apply_vendor.row_id := comm_util.FUNC_NEW_ROWID;
    END LOOP;
  
    --2.1，如无模板数据，申请头信息使用业务码信息，
    --此处尚缺 组织机构编码，股别，审批经营体，下节审批经营体
    --IF l_hm_apply_vendor.Business_Code IS NULL THEN
    l_hm_apply_vendor.business_code         := l_hm_business.Business_Code;
    l_hm_apply_vendor.master_type           := l_hm_business.master_type;
    l_hm_apply_vendor.operate_type          := l_hm_business.operate_type;
    l_hm_apply_vendor.business_type         := l_hm_business.business_type;
    l_hm_apply_vendor.inner_outer_flag      := l_hm_business.inner_outer_flag;
    l_hm_apply_vendor.account_grp_code      := l_hm_business.account_group;
    l_hm_apply_vendor.finance_business_flag := l_hm_business.finance_business_flag;
    --END IF;
  
    l_hm_apply_vendor.dept_code := l_apply_vendor_all.dept_code;
  
    --3，供应商数据基本信息准备
    --3.1, 特别处理 如果供应商编码为临时码 则审请数据从审请数据复制
    if instr(l_apply_vendor_all.employee_no, 'TEMP') > 0 THEN
    
      retcode := 'E';
      retmsg  := '审请信息抽取错误，不合法的临时码信息';
      ROLLBACK;
      RETURN;
    
    ELSE
      ---正式的供应商编码信息
      --3.3, 正式的供应商编码信息抽取
      for cur_rows in (select *
                         from hm_vendors t
                        where t.vendor_code = l_apply_vendor_all.employee_no
                          and t.delete_flag = '0') loop
        l_hm_vendors := cur_rows;
        l_vendor_id  := l_hm_vendors.row_id; --获取关键字
      end loop;
    
      IF l_vendor_id IS NOT null THEN
        select count(*)
          into lll_count
          from hm_vendor_bank_accounts sss
         where sss.delete_flag = '0'
           and sss.vendor_id = l_vendor_id;
        if lll_count = 0 then
          retcode := 'E';
          retmsg  := '供应商编码:' || l_apply_vendor_all.employee_no ||
                     ',不存在银行账号,不能走批导,只能走审批流!';
          ROLLBACK;
          RETURN;
        end if;
        --判断如果一个供应商对应2条或者以上银行信息不能进行批导
        select count(*), ss.row_id
          into ll_count, out_bankoldrow_id
          from hm_vendors s, hm_vendor_bank_accounts ss
         where s.row_id = ss.vendor_id
           and ss.delete_flag = '0'
           and s.vendor_code = l_apply_vendor_all.employee_no
         group by ss.row_id;
        if ll_count > 1 then
          retcode := 'E';
          retmsg  := '供应商编码:' || l_apply_vendor_all.employee_no ||
                     ',存在多条银行账号,不能走批导,只能走审批流!';
          ROLLBACK;
          RETURN;
        end if;
        --end
        --抽取程序开始 ( 数据->申请 )
        --4.1，基本视图抽取
        prc_base2apply_trans(l_hm_vendors,
                             l_hm_apply_vendor,
                             retcode,
                             retmsg);
        if retcode = 'E' then
          return;
        end if;
        base_extraction_flag := 'X';
      
        IF l_hm_apply_vendor.row_id IS NULL THEN
          l_hm_apply_vendor.row_id := comm_util.FUNC_NEW_ROWID;
        END IF;
        l_hm_apply_vendor.action_batch_id := l_apply_vendor_all.action_batch_id;
        l_hm_apply_vendor.created         := l_apply_vendor_all.created;
        l_hm_apply_vendor.created_by      := l_apply_vendor_all.created_by;
        l_hm_apply_vendor.last_upd        := l_apply_vendor_all.last_upd;
        l_hm_apply_vendor.last_upd_by     := l_apply_vendor_all.last_upd_by;
      ELSE
        retcode := 'E';
        retmsg  := '供应商编码:' || l_apply_vendor_all.employee_no ||
                   ',不存在主数据中!';
        ROLLBACK;
        RETURN;
      
      END IF; ---  L_vendor_ID IS (NOT) NULL
    
    END IF;
  
    -------------------
    --5，申请单信息 合理性优化, 业务相关性处理
    if l_hm_business.operate_type = 'CREATE' THEN
    
      --供应商编码，管理户清空
      IF l_apply_vendor_all.business_code LIKE 'VDR-CREATE-1600-%-INNER' THEN
        l_hm_apply_vendor.vendor_code := l_apply_vendor_all.employee_no;
      ELSE
        l_hm_apply_vendor.vendor_code := NULL;
      END IF;
    
      --l_hm_apply_vendor.VENDOR_NAME := NULL;   
    
    ELSIF l_hm_business.operate_type IN ('UPDATE', 'CHANGE') THEN
      --IN ( 'UPDATE','CHANGE' )
    
      --l_hm_apply_vendor.view_base_x := base_extraction_flag;
      l_hm_apply_vendor.view_base_x := 'X';
      l_hm_apply_vendor.view_bank_x := 'X';
    END IF;
  
    --------------------------------------------for test
    --6，申请信息暂存于 临时表 供前台使用
    insert into hm_apply_vendor_imp
    values l_hm_apply_vendor return row_id into out_temprow_id;
  
    --------------------------------------------for test
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      retcode := 'E';
      retmsg  := 'prc_apply_from_vendor: operate failure !' || SQLERRM;
  END prc_updatebank_apply_vendor;

  /**
  间接采购系统需要在MDM创建供应商，并且返回供应商编码
  **/
  procedure prc_vendor_info_JJGO2MDM(t_vendor_base in JJGO_VENDOR_BASE_TABLE,
                                     vmout         out vm_out_table,
                                     retcode       out varchar2,
                                     retmsg        out varchar2) is
  
    v_vendor_base    JJGO_VENDOR_BASE_TYPE;
    v_vendor_company JJGO_VENDOR_COMPANY_TYPE;
    v_vendor_bank    JJGO_VENDOR_BANK_TYPE;
    v_vendor_pur     JJGO_VENDOR_PUR_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank    tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_pur     tab_apply_vendor_pur := tab_apply_vendor_pur();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
    p_flag         integer := 0;
  begin
    retcode := 'S';
    retmsg  := '数据处理完毕';
    vmout   := vm_out_table();
    for i in 1 .. t_vendor_base.count loop
    
      v_vendor_base := t_vendor_base(i);
      --基本信息
      l_apply_vendor.vendor_name      := v_vendor_base.vendor_name;
      l_apply_vendor.tax_code         := v_vendor_base.tax_code;
      l_apply_vendor.street_room      := v_vendor_base.street_room;
      l_apply_vendor.postal_code_city := v_vendor_base.postal_code_city;
      l_apply_vendor.country          := v_vendor_base.country;
      l_apply_vendor.region           := v_vendor_base.region;
      l_apply_vendor.phone_number     := v_vendor_base.phone_number;
      l_apply_vendor.account_grp_code := v_vendor_base.ACCOUNT_GRP_CODE;
    
      --公司视图
    
      c_flag                 := 0;
      t_apply_vendor_company := tab_apply_vendor_company();
      if v_vendor_base.t_vendor_company is not null then
        for i in 1 .. v_vendor_base.t_vendor_company.count loop
          v_vendor_company                            := v_vendor_base.t_vendor_company(i);
          v_apply_vendor_company.company_code         := v_vendor_company.COMPANY_CODE;
          v_apply_vendor_company.RECONCILE_ACCOUNT    := v_vendor_company.RECONCILE_ACCOUNT; --统奴科目
          v_apply_vendor_company.SEQUENCE_NO          := v_vendor_company.SEQUENCE_NO; --排序码
          v_apply_vendor_company.payment_term_company := v_vendor_company.PAYMENT_TERM; --付款条款
          v_apply_vendor_company.PAYMENT_METHOD       := v_vendor_company.PAYMENT_METHOD; --付款方式
          v_apply_vendor_company.HQ                   := v_vendor_company.HQ; --总部
          v_apply_vendor_company.CASH_MGT_GROUP       := v_vendor_company.CASH_MGT_GROUP; --现金管理组
          v_apply_vendor_company.ACCOUNTING_CUSTOMER  := v_vendor_company.ACCOUNTING_CUSTOMER; --具有客户的清算
          v_apply_vendor_company.TOLERANCE_GROUP      := v_vendor_company.TOLERANCE_GROUP;
          t_apply_vendor_company.extend();
          t_apply_vendor_company(t_apply_vendor_company.count) := v_apply_vendor_company;
          c_flag := c_flag + 1;
        end loop;
      
      end if;
      --银行视图
      b_flag              := 0;
      t_apply_vendor_bank := tab_apply_vendor_bank();
      if v_vendor_base.t_vendor_bank is not null then
        for i in 1 .. v_vendor_base.t_vendor_bank.count loop
          v_vendor_bank                           := v_vendor_base.t_vendor_bank(i);
          v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
          v_apply_vendor_bank.BANK_COUNTRY        := v_vendor_bank.BANK_COUNTRY; --银行所属国家
          v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
          v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
          t_apply_vendor_bank.extend();
          t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
          b_flag := b_flag + 1;
        end loop;
      
      end if;
      --采购信息
      p_flag             := 0;
      t_apply_vendor_pur := tab_apply_vendor_pur();
      if v_vendor_base.T_VENDOR_PUR is not null then
        for i in 1 .. v_vendor_base.T_VENDOR_PUR.count loop
          v_vendor_pur                         := v_vendor_base.T_VENDOR_PUR(i);
          v_apply_vendor_pur.purchase_grp_code := v_vendor_pur.PURCHASE_GRP_CODE; --
          v_apply_vendor_pur.order_currency    := v_vendor_pur.ORDER_CURRENCY; --
          v_apply_vendor_pur.partner_pi        := v_vendor_pur.PARTNER_PI; --
          t_apply_vendor_pur.extend();
          t_apply_vendor_pur(t_apply_vendor_pur.count) := v_apply_vendor_pur;
          p_flag := p_flag + 1;
        end loop;
      
      end if;
    
      if b_flag = 0 or c_flag = 0 or p_flag = 0 then
        insert_flag            := '1';
        v_vmout.retcode        := 'E';
        v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE ||
                                  ';所有供应商的公司和银行信息和采购信息都要填写;';
        v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
      
        vmout.extend;
        vmout(vmout.count) := v_vmout;
      else
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_allcheck_JJGO2MDM(v_hm_apply_vendor         => l_apply_vendor,
                                    v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                    v_hm_apply_vendor_company => t_apply_vendor_company,
                                    v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                    retcode                   => retcode,
                                    retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag            := '1';
          v_vmout.retcode        := 'E';
          v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE || ';' ||
                                    retmsg;
          v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
        
          vmout.extend;
          vmout(vmout.count) := v_vmout;
        else
          v_vmout.retcode        := 'S';
          v_vmout.retmsg         := '税号:' || v_vendor_base.TAX_CODE || ';' ||
                                    retmsg;
          v_vmout.in_vendor_code := l_apply_vendor.vendor_code;
        
          vmout.extend;
          vmout(vmout.count) := v_vmout;
        END IF;
      end if;
    end loop;
    if (insert_flag = '1') then
      retcode := 'E';
      retmsg  := '有未通过数据';
    else
      retcode := 'S';
      retmsg  := '数据处理完毕,全部通过';
    end if;
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常';
  end prc_vendor_info_JJGO2MDM;

  --间接采购 字段逻辑检查
  PROCEDURE prc_input_allcheck_JJGO2MDM(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                        v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                        v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                        v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                        retcode                   OUT VARCHAR2,
                                        retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count     integer := 0;
    b_count     integer := 0;
    bc_flag     integer := 0;
    pur_row_id  varchar2(120);
    bbc_flag    integer := 0;
    lcl_count   integer := 0;
    v_BANK_NAME varchar2(120);
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --检查是否必输
    if trim(l_hm_apply_vendor.vendor_name) is null then
      retcode := 'E';
      retmsg  := '供应商名称不能为空!';
      RETURN;
    else
      if (l_hm_apply_vendor.account_grp_code <> '1600') then
        lcl_count := 0;
        select count(*)
          into lcl_count
          from hm_vendors t
         where t.vendor_name = trim(l_hm_apply_vendor.vendor_name);
        if (lcl_count > 0) then
          retcode := 'E';
          retmsg  := '供应商名称在MDM供应商主数据中已经存在';
          return;
        end if;
      end if;
    end if;
    if trim(l_hm_apply_vendor.tax_code) is null then
      retcode := 'E';
      retmsg  := '税号(身份证号)不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.street_room) is null then
      retcode := 'E';
      retmsg  := '街道/房号不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.postal_code_city) is null then
      retcode := 'E';
      retmsg  := '邮政编码不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.country) is null then
      retcode := 'E';
      retmsg  := '国家不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.region) is null then
      retcode := 'E';
      retmsg  := '地区不能为空!';
      RETURN;
    else
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
    if trim(l_hm_apply_vendor.phone_number) is null then
      retcode := 'E';
      retmsg  := '电话不能为空!';
      RETURN;
    end if;
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is null then
          retcode := 'E';
          retmsg  := '统驭科目不能为空!';
          RETURN;
        else
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is null then
          retcode := 'E';
          retmsg  := '排序码不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is null then
          retcode := 'E';
          retmsg  := '付款条款不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is null then
          retcode := 'E';
          retmsg  := '付款方式不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写公司信息!';
      RETURN;
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写银行信息!';
      RETURN;
    end if;
    --end
  
    --采购字段是否必填
    if v_hm_apply_vendor_pur.count is not null then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        if v_apply_vendor_pur.order_currency is null then
          retcode := 'E';
          retmsg  := '订单货币不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Currency',
                                     v_apply_vendor_pur.order_currency,
                                     'Currency',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_pur.order_currency ||
                       ',The Order Currency not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_pur.purchase_grp_code is null then
          retcode := 'E';
          retmsg  := '采购组织不能为空!';
          RETURN;
        end if;
      
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写采购信息!';
      RETURN;
    end if;
    --end
  
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-CREATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
        
          v_hm_apply_vendor.vendor_code := cur_rows.vendor_code;
          retcode                       := 'E';
          retmsg                        := '供应商编码[' || cur_rows.vendor_code ||
                                           ']供应商税号 [' ||
                                           l_hm_apply_vendor.tax_code ||
                                           ']已经存在主数据中';
        
        else
          --不存在申请单还有主数据中需要新增
          generate_code.generate_master_code('VENDOR',
                                             l_hm_apply_vendor.account_grp_code,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND NOT instr(out_mastercode, 'TEMP') > 0 AND
             out_mastercode IS NOT NULL THEN
            retcode := 'S';
          ELSE
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
          if retcode = 'S' then
            l_hm_apply_vendor.row_id      := comm_util.FUNC_NEW_ROWID();
            l_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.vendor_code := out_mastercode;
            --创建者是VM表明是车辆管理接口新增进来的 
            insert into hm_vendors
              (row_id,
               vendor_code,
               vendor_name,
               tax_code,
               street_room,
               postal_code_city,
               country,
               region,
               phone_number,
               account_grp_code,
               created_by,
               for_gvs,
               last_version_flag,
               operate_status)
            values
              (l_hm_apply_vendor.row_id,
               l_hm_apply_vendor.vendor_code,
               l_hm_apply_vendor.vendor_name,
               l_hm_apply_vendor.tax_code,
               l_hm_apply_vendor.street_room,
               l_hm_apply_vendor.postal_code_city,
               l_hm_apply_vendor.country,
               l_hm_apply_vendor.region,
               l_hm_apply_vendor.phone_number,
               l_hm_apply_vendor.account_grp_code,
               'JJGO',
               '0',
               '2',
               'CREATE');
            if v_hm_apply_vendor_company.count is not null then
              for i in 1 .. v_hm_apply_vendor_company.count loop
                v_apply_vendor_company := v_hm_apply_vendor_company(i);
                insert into hm_vendor_company_data
                  (row_id,
                   vendor_id,
                   company_code,
                   reconcile_account,
                   sequence_no,
                   payment_term,
                   payment_method,
                   hq,
                   cash_mgt_group,
                   accounting_customer,
                   tolerance_group,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_company.company_code,
                   v_apply_vendor_company.reconcile_account,
                   v_apply_vendor_company.sequence_no,
                   v_apply_vendor_company.payment_term_company,
                   v_apply_vendor_company.payment_method,
                   v_apply_vendor_company.hq,
                   v_apply_vendor_company.cash_mgt_group,
                   v_apply_vendor_company.accounting_customer,
                   v_apply_vendor_company.tolerance_group,
                   'JJGO',
                   '0',
                   '2',
                   'CREATE');
              end loop;
            end if;
            if v_hm_apply_vendor_bank.count is not null then
              for i in 1 .. v_hm_apply_vendor_bank.count loop
                v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
                --获取银行名称
                SELECT BANK_NAME
                  into v_BANK_NAME
                  FROM hm_banks
                 WHERE 1 = 1
                   and delete_flag = '0'
                   and bank_country = v_apply_vendor_bank.bank_country
                   and length(bank_branch_code) = 12
                   and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
                   and bank_branch_code =
                       v_apply_vendor_bank.bank_branch_code;
                --end   
                insert into hm_vendor_bank_accounts
                  (row_id,
                   vendor_id,
                   account_holder_name,
                   bank_country,
                   bank_account_num,
                   bank_branch_code,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   active_range,
                   bank_name)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_bank.account_holder_name,
                   v_apply_vendor_bank.bank_country,
                   v_apply_vendor_bank.bank_account_num,
                   v_apply_vendor_bank.bank_branch_code,
                   'JJGO',
                   '0',
                   '2',
                   'CREATE',
                   'ALL',
                   v_bank_name);
              end loop;
            end if;
            --采购信息保存  
            if v_hm_apply_vendor_pur.count is not null then
              for i in 1 .. v_hm_apply_vendor_pur.count loop
                v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
              
                pur_row_id := comm_util.FUNC_NEW_ROWID();
                insert into hm_vendor_pur_data
                  (row_id,
                   vendor_id,
                   purchase_grp_code,
                   order_currency,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status)
                values
                  (pur_row_id,
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_pur.purchase_grp_code,
                   v_apply_vendor_pur.order_currency,
                   'JJGO',
                   '0',
                   '2',
                   'CREATE');
                --增加合作伙伴信息 VN OA
                insert into HM_VENDOR_PARTNERS
                  (row_id,
                   pur_grp_id,
                   partner_subject_id,
                   partner_function,
                   partner_counter,
                   partner_reference,
                   created_by,
                   created,
                   last_version_flag,
                   version,
                   operate_status,
                   remark)
                  select comm_util.func_new_rowid,
                         pur_row_id,
                         l_hm_apply_vendor.vendor_code,
                         value,
                         0,
                         '',
                         'JJGO',
                         sysdate,
                         2,
                         1.0,
                         'CREATE',
                         ''
                    from hm_fnd_values
                   where value_set_id = 'VendorPartnerFunction'
                     and value in ('VN', 'OA')
                   order by sort_order ASC;
                --增加PI合作伙伴信息
                insert into HM_VENDOR_PARTNERS
                  (row_id,
                   pur_grp_id,
                   partner_subject_id,
                   partner_function,
                   partner_counter,
                   partner_reference,
                   created_by,
                   created,
                   last_version_flag,
                   version,
                   operate_status,
                   remark)
                values
                  (comm_util.func_new_rowid,
                   pur_row_id,
                   decode(v_apply_vendor_pur.partner_pi,
                          null,
                          l_hm_apply_vendor.vendor_code,
                          v_apply_vendor_pur.partner_pi),
                   'PI',
                   0,
                   '',
                   'JJGO',
                   sysdate,
                   2,
                   1.0,
                   'CREATE',
                   '');
              end loop;
            end if;
          end if;
          retcode := 'S';
          retmsg  := '新增供应商成功';
        END IF;
      END LOOP;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_allcheck_JJGO2MDM;

  /**
  RSP资源共享平台系统需要在MDM创建供应商，除了个人所有的账户组都需要创建
  **/
  procedure prc_vendor_info_RSP2MDM(VENDOR_NAME      in VARCHAR2,
                                    ACCOUNT_GRP_CODE in VARCHAR2,
                                    TAX_CODE         in VARCHAR2,
                                    STREET_ROOM      in VARCHAR2,
                                    POSTAL_CODE_CITY in VARCHAR2,
                                    COUNTRY          in VARCHAR2,
                                    REGION           in VARCHAR2,
                                    PHONE_NUMBER     in VARCHAR2,
                                    T_VENDOR_COMPANY in RSP_VENDOR_COMPANY_TABLE,
                                    T_VENDOR_BANK    in RSP_VENDOR_BANK_TABLE,
                                    T_VENDOR_PUR     in RSP_VENDOR_PUR_TABLE,
                                    
                                    retcode         out varchar2,
                                    retmsg          out varchar2,
                                    out_row_id      out varchar2,
                                    out_vendor_code out varchar2,
                                    out_tax_code    out varchar2) is
  
    v_vendor_base    RSP_VENDOR_BASE_TYPE;
    v_vendor_company RSP_VENDOR_COMPANY_TYPE;
    v_vendor_bank    RSP_VENDOR_BANK_TYPE;
    v_vendor_pur     RSP_VENDOR_PUR_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank    tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_pur     tab_apply_vendor_pur := tab_apply_vendor_pur();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
    p_flag         integer := 0;
  begin
    retcode := 'S';
    retmsg  := '数据处理完毕';
  
    --基本信息
    l_apply_vendor.vendor_name      := vendor_name;
    l_apply_vendor.tax_code         := tax_code;
    l_apply_vendor.street_room      := street_room;
    l_apply_vendor.postal_code_city := postal_code_city;
    l_apply_vendor.country          := country;
    l_apply_vendor.region           := region;
    l_apply_vendor.phone_number     := phone_number;
    l_apply_vendor.account_grp_code := ACCOUNT_GRP_CODE;
  
    --公司视图
  
    c_flag                 := 0;
    t_apply_vendor_company := tab_apply_vendor_company();
    if t_vendor_company is not null then
      for i in 1 .. t_vendor_company.count loop
        v_vendor_company                            := t_vendor_company(i);
        v_apply_vendor_company.company_code         := v_vendor_company.COMPANY_CODE;
        v_apply_vendor_company.RECONCILE_ACCOUNT    := v_vendor_company.RECONCILE_ACCOUNT; --统奴科目
        v_apply_vendor_company.SEQUENCE_NO          := v_vendor_company.SEQUENCE_NO; --排序码
        v_apply_vendor_company.payment_term_company := v_vendor_company.PAYMENT_TERM; --付款条款
        v_apply_vendor_company.PAYMENT_METHOD       := v_vendor_company.PAYMENT_METHOD; --付款方式
        v_apply_vendor_company.HQ                   := v_vendor_company.HQ; --总部
        v_apply_vendor_company.CASH_MGT_GROUP       := v_vendor_company.CASH_MGT_GROUP; --现金管理组
        v_apply_vendor_company.ACCOUNTING_CUSTOMER  := v_vendor_company.ACCOUNTING_CUSTOMER; --具有客户的清算
        v_apply_vendor_company.TOLERANCE_GROUP      := v_vendor_company.TOLERANCE_GROUP;
        t_apply_vendor_company.extend();
        t_apply_vendor_company(t_apply_vendor_company.count) := v_apply_vendor_company;
        c_flag := c_flag + 1;
      end loop;
    
    end if;
    --银行视图
    b_flag              := 0;
    t_apply_vendor_bank := tab_apply_vendor_bank();
    if t_vendor_bank is not null then
      for i in 1 .. t_vendor_bank.count loop
        v_vendor_bank                           := t_vendor_bank(i);
        v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
        v_apply_vendor_bank.BANK_COUNTRY        := v_vendor_bank.BANK_COUNTRY; --银行所属国家
        v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
        v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
        t_apply_vendor_bank.extend();
        t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
        b_flag := b_flag + 1;
      end loop;
    
    end if;
    --采购信息
    p_flag             := 0;
    t_apply_vendor_pur := tab_apply_vendor_pur();
    if T_VENDOR_PUR is not null then
      for i in 1 .. T_VENDOR_PUR.count loop
        v_vendor_pur                         := T_VENDOR_PUR(i);
        v_apply_vendor_pur.purchase_grp_code := v_vendor_pur.PURCHASE_GRP_CODE; --
        v_apply_vendor_pur.order_currency    := v_vendor_pur.ORDER_CURRENCY; --
        v_apply_vendor_pur.partner_pi        := v_vendor_pur.PARTNER_PI; --
        t_apply_vendor_pur.extend();
        t_apply_vendor_pur(t_apply_vendor_pur.count) := v_apply_vendor_pur;
        p_flag := p_flag + 1;
      end loop;
    
    end if;
  
    if b_flag = 0 or c_flag = 0 then
      insert_flag     := '1';
      retcode         := 'E';
      retmsg          := '税号:' || TAX_CODE || ';所有供应商的公司和银行信息都要填写;';
      out_vendor_code := l_apply_vendor.vendor_code;
      out_row_id      := l_apply_vendor.row_id;
      out_tax_code    := l_apply_vendor.tax_code;
    else
    
      ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
      prc_input_allcheck_RSP2MDM(v_hm_apply_vendor         => l_apply_vendor,
                                 v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                 v_hm_apply_vendor_company => t_apply_vendor_company,
                                 v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                 retcode                   => retcode,
                                 retmsg                    => retmsg);
      IF retcode = 'E' THEN
        insert_flag     := '1';
        retcode         := 'E';
        retmsg          := '税号:' || TAX_CODE || ';' || retmsg;
        out_vendor_code := l_apply_vendor.vendor_code;
        out_row_id      := l_apply_vendor.row_id;
        out_tax_code    := l_apply_vendor.tax_code;
      else
        retcode         := 'S';
        retmsg          := '税号:' || TAX_CODE || ';' || retmsg;
        out_vendor_code := l_apply_vendor.vendor_code;
        out_row_id      := l_apply_vendor.row_id;
        out_tax_code    := l_apply_vendor.tax_code;
      
      END IF;
    end if;
  
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常';
  end prc_vendor_info_RSP2MDM;

  --间接采购 字段逻辑检查
  PROCEDURE prc_input_allcheck_RSP2MDM(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                       v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                       v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                       v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                       retcode                   OUT VARCHAR2,
                                       retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count       integer := 0;
    b_count       integer := 0;
    bc_flag       integer := 0;
    pur_row_id    varchar2(120);
    bbc_flag      integer := 0;
    lcl_count     integer := 0;
    v_BANK_NAME   varchar2(120);
    v_vendor_code varchar2(120);
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --检查是否必输
    if trim(l_hm_apply_vendor.vendor_name) is null then
      retcode := 'E';
      retmsg  := '供应商名称不能为空!';
      RETURN;
    else
      if (l_hm_apply_vendor.account_grp_code <> '1600') then
        lcl_count := 0;
        select count(*), max(t.vendor_code)
          into lcl_count, v_vendor_code
          from hm_vendors t
         where t.vendor_name = trim(l_hm_apply_vendor.vendor_name);
        if (lcl_count > 0) then
          v_hm_apply_vendor.vendor_code := v_vendor_code;
          retcode                       := 'E';
          retmsg                        := '供应商名称在MDM供应商主数据中已经存在';
          return;
        end if;
      end if;
    end if;
    if trim(l_hm_apply_vendor.tax_code) is null then
      retcode := 'E';
      retmsg  := '税号(身份证号)不能为空!';
      RETURN;
    else
      lcl_count := 0;
      select count(*), max(t.vendor_code)
        into lcl_count, v_vendor_code
        from hm_vendors t
       where t.tax_code = trim(l_hm_apply_vendor.tax_code);
      if (lcl_count > 0) then
        v_hm_apply_vendor.vendor_code := v_vendor_code;
        retcode                       := 'E';
        retmsg                        := '供应商税号在MDM供应商主数据中已经存在';
        return;
      end if;
    end if;
    if trim(l_hm_apply_vendor.street_room) is null then
      retcode := 'E';
      retmsg  := '街道/房号不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.postal_code_city) is null then
      retcode := 'E';
      retmsg  := '邮政编码不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.country) is null then
      retcode := 'E';
      retmsg  := '国家不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.region) is null then
      retcode := 'E';
      retmsg  := '地区不能为空!';
      RETURN;
    else
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
    if trim(l_hm_apply_vendor.phone_number) is null then
      retcode := 'E';
      retmsg  := '电话不能为空!';
      RETURN;
    end if;
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is null then
          retcode := 'E';
          retmsg  := '统驭科目不能为空!';
          RETURN;
        else
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is null then
          retcode := 'E';
          retmsg  := '排序码不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is null then
          retcode := 'E';
          retmsg  := '付款条款不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is null then
          retcode := 'E';
          retmsg  := '付款方式不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写公司信息!';
      RETURN;
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写银行信息!';
      RETURN;
    end if;
    --end
  
    --采购字段是否必填
    if v_hm_apply_vendor_pur.count is not null then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        if v_apply_vendor_pur.purchase_grp_code is not null or
           v_apply_vendor_pur.order_currency is not null or
           v_apply_vendor_pur.partner_pi is not null then
          if v_apply_vendor_pur.order_currency is null then
            retcode := 'E';
            retmsg  := '订单货币不能为空!';
            RETURN;
          else
            comm_util.prc_getfndvalues('Currency',
                                       v_apply_vendor_pur.order_currency,
                                       'Currency',
                                       '',
                                       '',
                                       retcode,
                                       retmsg);
            IF retcode = 'E' THEN
              retcode := 'E';
              retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                         v_apply_vendor_pur.order_currency ||
                         ',The Order Currency not exist.';
              RETURN;
            END IF;
          end if;
          if v_apply_vendor_pur.purchase_grp_code is null then
            retcode := 'E';
            retmsg  := '采购组织不能为空!';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写采购信息!';
      RETURN;
    end if;
    --end
  
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 and
         l_hm_apply_vendor.country = 'CN' THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-CREATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
            
              v_hm_apply_vendor.tax_code := l_hm_apply_vendor.tax_code;
              retcode                    := 'E';
              retmsg                     := '创建业务时，供应商税号 [' ||
                                            l_hm_apply_vendor.tax_code ||
                                            '] 已经存在于申请 [' ||
                                            cur_rows.apply_id || '] 的明细行 [' ||
                                            cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
        
          v_hm_apply_vendor.vendor_code := cur_rows.vendor_code;
          v_hm_apply_vendor.tax_code    := l_hm_apply_vendor.tax_code;
          retcode                       := 'E';
          retmsg                        := '供应商税号 [' ||
                                           l_hm_apply_vendor.tax_code ||
                                           ']已经存在MDM主数据中,供应商编码是[' ||
                                           cur_rows.vendor_code || ']';
        
        else
          --不存在申请单还有主数据中需要新增
          generate_code.generate_master_code('VENDOR',
                                             l_hm_apply_vendor.account_grp_code,
                                             out_mastercode,
                                             retcode,
                                             retmsg);
          IF retcode = '1' AND NOT instr(out_mastercode, 'TEMP') > 0 AND
             out_mastercode IS NOT NULL THEN
            retcode := 'S';
          ELSE
            retcode := 'E';
            ROLLBACK;
            RETURN;
          END IF;
          if retcode = 'S' then
            l_hm_apply_vendor.row_id      := comm_util.FUNC_NEW_ROWID();
            l_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.row_id      := l_hm_apply_vendor.row_id;
            v_hm_apply_vendor.tax_code    := l_hm_apply_vendor.tax_code;
            --创建者是VM表明是车辆管理接口新增进来的 
            insert into hm_vendors
              (row_id,
               vendor_code,
               vendor_name,
               tax_code,
               street_room,
               postal_code_city,
               country,
               region,
               phone_number,
               account_grp_code,
               created_by,
               for_gvs,
               last_version_flag,
               operate_status)
            values
              (l_hm_apply_vendor.row_id,
               l_hm_apply_vendor.vendor_code,
               l_hm_apply_vendor.vendor_name,
               l_hm_apply_vendor.tax_code,
               l_hm_apply_vendor.street_room,
               l_hm_apply_vendor.postal_code_city,
               l_hm_apply_vendor.country,
               l_hm_apply_vendor.region,
               l_hm_apply_vendor.phone_number,
               l_hm_apply_vendor.account_grp_code,
               'RSP',
               '1',
               '2',
               'CREATE');
            if v_hm_apply_vendor_company.count is not null then
              for i in 1 .. v_hm_apply_vendor_company.count loop
                v_apply_vendor_company := v_hm_apply_vendor_company(i);
                insert into hm_vendor_company_data
                  (row_id,
                   vendor_id,
                   company_code,
                   reconcile_account,
                   sequence_no,
                   payment_term,
                   payment_method,
                   hq,
                   cash_mgt_group,
                   accounting_customer,
                   tolerance_group,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_company.company_code,
                   v_apply_vendor_company.reconcile_account,
                   v_apply_vendor_company.sequence_no,
                   v_apply_vendor_company.payment_term_company,
                   v_apply_vendor_company.payment_method,
                   v_apply_vendor_company.hq,
                   v_apply_vendor_company.cash_mgt_group,
                   v_apply_vendor_company.accounting_customer,
                   v_apply_vendor_company.tolerance_group,
                   'RSP',
                   '1',
                   '2',
                   'CREATE');
              end loop;
            end if;
            if v_hm_apply_vendor_bank.count is not null then
              for i in 1 .. v_hm_apply_vendor_bank.count loop
                v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
                --获取银行名称
                SELECT BANK_NAME
                  into v_BANK_NAME
                  FROM hm_banks
                 WHERE 1 = 1
                   and delete_flag = '0'
                   and bank_country = v_apply_vendor_bank.bank_country
                   and length(bank_branch_code) = 12
                   and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
                   and bank_branch_code =
                       v_apply_vendor_bank.bank_branch_code;
                --end   
                insert into hm_vendor_bank_accounts
                  (row_id,
                   vendor_id,
                   account_holder_name,
                   bank_country,
                   bank_account_num,
                   bank_branch_code,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   active_range,
                   bank_name)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_bank.account_holder_name,
                   v_apply_vendor_bank.bank_country,
                   v_apply_vendor_bank.bank_account_num,
                   v_apply_vendor_bank.bank_branch_code,
                   'RSP',
                   '1',
                   '2',
                   'CREATE',
                   'ALL',
                   v_BANK_NAME);
              end loop;
            end if;
            --采购信息保存  
            if v_hm_apply_vendor_pur.count is not null then
              for i in 1 .. v_hm_apply_vendor_pur.count loop
                v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
                if v_apply_vendor_pur.purchase_grp_code is not null or
                   v_apply_vendor_pur.order_currency is not null or
                   v_apply_vendor_pur.partner_pi is not null then
                  pur_row_id := comm_util.FUNC_NEW_ROWID();
                  insert into hm_vendor_pur_data
                    (row_id,
                     vendor_id,
                     purchase_grp_code,
                     order_currency,
                     created_by,
                     for_gvs,
                     last_version_flag,
                     operate_status)
                  values
                    (pur_row_id,
                     l_hm_apply_vendor.row_id,
                     v_apply_vendor_pur.purchase_grp_code,
                     v_apply_vendor_pur.order_currency,
                     'RSP',
                     '1',
                     '2',
                     'CREATE');
                  --增加合作伙伴信息 VN OA
                  insert into HM_VENDOR_PARTNERS
                    (row_id,
                     pur_grp_id,
                     partner_subject_id,
                     partner_function,
                     partner_counter,
                     partner_reference,
                     created_by,
                     created,
                     last_version_flag,
                     version,
                     operate_status,
                     remark)
                    select comm_util.func_new_rowid,
                           pur_row_id,
                           l_hm_apply_vendor.vendor_code,
                           value,
                           0,
                           '',
                           'RSP',
                           sysdate,
                           2,
                           1.0,
                           'CREATE',
                           ''
                      from hm_fnd_values
                     where value_set_id = 'VendorPartnerFunction'
                       and value in ('VN', 'OA')
                     order by sort_order ASC;
                  --增加PI合作伙伴信息
                  insert into HM_VENDOR_PARTNERS
                    (row_id,
                     pur_grp_id,
                     partner_subject_id,
                     partner_function,
                     partner_counter,
                     partner_reference,
                     created_by,
                     created,
                     last_version_flag,
                     version,
                     operate_status,
                     remark)
                  values
                    (comm_util.func_new_rowid,
                     pur_row_id,
                     decode(v_apply_vendor_pur.partner_pi,
                            null,
                            l_hm_apply_vendor.vendor_code,
                            v_apply_vendor_pur.partner_pi),
                     'PI',
                     0,
                     '',
                     'RSP',
                     sysdate,
                     2,
                     1.0,
                     'CREATE',
                     '');
                end if;
              end loop;
            end if;
          end if;
          retcode := 'S';
          retmsg  := '新增供应商成功';
        END IF;
      END LOOP;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_allcheck_RSP2MDM;
  --资源共享平台供应商自动提交后的处理
  procedure prc_process_rspAuto_submit_vdr(in_vendor_code in varchar2,
                                           in_retcode     in varchar2,
                                           in_retmsg      in varchar2) is
  begin
    if in_retcode != 'S' then
      comm_util.prc_create_mail('供应商主数据',
                                'psi.mdmgys@haier.com',
                                '',
                                '',
                                '正式系统，RSP资源共享平台创建新的供应商主数据提交到GVS失败，编码："' ||
                                in_vendor_code || '",失败原因：' || in_retmsg,
                                '60');
    end if;
    commit;
  end prc_process_rspAuto_submit_vdr;
  ---外围系统新增和修改个人供应商公用
  --SWHR代表水家电 --ZNYQ代表智能园区系统
  procedure prc_vendor_info_SWHR2MDM(in_VENDOR_CODE      in VARCHAR2,
                                     in_VENDOR_NAME      in VARCHAR2,
                                     in_ACCOUNT_GRP_CODE in VARCHAR2,
                                     in_TAX_CODE         in VARCHAR2,
                                     in_STREET_ROOM      in VARCHAR2,
                                     in_POSTAL_CODE_CITY in VARCHAR2,
                                     in_COUNTRY          in VARCHAR2,
                                     in_REGION           in VARCHAR2,
                                     in_PHONE_NUMBER     in VARCHAR2,
                                     T_VENDOR_COMPANY    in RSP_VENDOR_COMPANY_TABLE,
                                     T_VENDOR_BANK       in RSP_VENDOR_BANK_TABLE,
                                     T_VENDOR_PUR        in RSP_VENDOR_PUR_TABLE,
                                     system_name         in VARCHAR2,
                                     view_bank_flag      in VARCHAR2,
                                     
                                     retcode         out varchar2,
                                     retmsg          out varchar2,
                                     out_row_id      out varchar2,
                                     out_vendor_code out varchar2,
                                     out_tax_code    out varchar2) is
  
    v_vendor_base    RSP_VENDOR_BASE_TYPE;
    v_vendor_company RSP_VENDOR_COMPANY_TYPE;
    v_vendor_bank    RSP_VENDOR_BANK_TYPE;
    v_vendor_pur     RSP_VENDOR_PUR_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank    tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_pur     tab_apply_vendor_pur := tab_apply_vendor_pur();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
    p_flag         integer := 0;
    l_rowcount     integer := 0;
    l_rowid        varchar2(100);
    l_bank_flag    varchar2(100);
  
    l_accountGroup varchar2(100);
  begin
    retcode := 'S';
    retmsg  := '数据处理完毕';
  
    l_bank_flag := view_bank_flag;
  
    if system_name is null then
      retcode         := 'E';
      retmsg          := '编码:' || in_vendor_code || ';请输入系统名称!';
      out_vendor_code := in_vendor_code;
      out_row_id      := '';
      out_tax_code    := in_tax_code;
      RETURN;
    else
      if system_name not in ('SWHR') then
        retcode         := 'E';
        retmsg          := '编码:' || in_vendor_code || ';请输入正确的系统名称!';
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        RETURN;
      end if;
    end if;
  
    ---水家电增加供应商信息
    if system_name in ('SWHR') then
      --基本信息
      l_apply_vendor.vendor_code      := in_vendor_code;
      l_apply_vendor.vendor_name      := in_vendor_name;
      l_apply_vendor.tax_code         := in_tax_code;
      l_apply_vendor.street_room      := in_street_room;
      l_apply_vendor.postal_code_city := in_postal_code_city;
      l_apply_vendor.country          := in_country;
      l_apply_vendor.region           := in_region;
      l_apply_vendor.phone_number     := in_phone_number;
      l_apply_vendor.account_grp_code := in_ACCOUNT_GRP_CODE;
    
      --银行视图
      b_flag              := 0;
      t_apply_vendor_bank := tab_apply_vendor_bank();
      if t_vendor_bank is not null then
        for i in 1 .. t_vendor_bank.count loop
          v_vendor_bank                           := t_vendor_bank(i);
          v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
          v_apply_vendor_bank.BANK_COUNTRY        := 'CN'; --银行所属国家
          v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
          v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
          t_apply_vendor_bank.extend();
          t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
          b_flag := b_flag + 1;
        end loop;
      
      end if;
      SELECT COUNT(*), MAX(row_id), max(account_grp_code)
        into l_rowcount, l_rowid, l_accountGroup
        FROM hm_vendors s
       WHERE vendor_code = in_vendor_code;
      if l_rowcount = 0 then
      
        if b_flag = 0 then
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '编码:' || in_vendor_code || ';所有供应商的银行信息都要填写;';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        else
        
          ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
          prc_input_allcheck_SWHR2MDM(v_hm_apply_vendor         => l_apply_vendor,
                                      v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                      v_hm_apply_vendor_company => t_apply_vendor_company,
                                      v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                      retcode                   => retcode,
                                      retmsg                    => retmsg);
          IF retcode = 'E' THEN
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '编码:' || l_apply_vendor.vendor_code || ';' ||
                               retmsg;
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          else
            retcode         := 'S';
            retmsg          := '编码:' || l_apply_vendor.vendor_code || ';' ||
                               retmsg;
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          
          END IF;
        end if;
      elsif l_rowcount = 1 then
        l_apply_vendor.account_grp_code := l_accountGroup;
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_update_allcheck_SWHR2MDM(v_hm_apply_vendor         => l_apply_vendor,
                                     v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                     v_hm_apply_vendor_company => t_apply_vendor_company,
                                     v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                     v_rowid                   => l_rowid,
                                     v_bank_flag               => l_bank_flag,
                                     retcode                   => retcode,
                                     retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '编码:' || l_apply_vendor.vendor_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '编码:' || l_apply_vendor.vendor_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        END IF;
      
      else
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        retcode         := 'E';
        retmsg          := '供应商编码 [' || in_vendor_code || ']在MDM主数据中存在多条';
        RETURN;
      
      end if;
    
    end if;
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常';
  end prc_vendor_info_SWHR2MDM;

  --水家电 字段逻辑检查
  PROCEDURE prc_input_allcheck_SWHR2MDM(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                        v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                        v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                        v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                        retcode                   OUT VARCHAR2,
                                        retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count     integer := 0;
    b_count     integer := 0;
    bc_flag     integer := 0;
    pur_row_id  varchar2(120);
    bbc_flag    integer := 0;
    lcl_count   integer := 0;
    v_BANK_NAME varchar2(120);
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --检查是否必输
    if trim(l_hm_apply_vendor.vendor_name) is null then
      retcode := 'E';
      retmsg  := '供应商名称不能为空!';
      RETURN;
    else
      if (l_hm_apply_vendor.account_grp_code <> '1600') then
        lcl_count := 0;
        select count(*)
          into lcl_count
          from hm_vendors t
         where t.vendor_name = trim(l_hm_apply_vendor.vendor_name);
        if (lcl_count > 0) then
          retcode := 'E';
          retmsg  := '供应商名称在MDM供应商主数据中已经存在';
          return;
        end if;
      end if;
    end if;
    if trim(l_hm_apply_vendor.tax_code) is null then
      retcode := 'E';
      retmsg  := '税号(身份证号)不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.street_room) is null then
      retcode := 'E';
      retmsg  := '街道/房号不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.postal_code_city) is null then
      retcode := 'E';
      retmsg  := '邮政编码不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.country) is null then
      retcode := 'E';
      retmsg  := '国家不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.region) is null then
      retcode := 'E';
      retmsg  := '地区不能为空!';
      RETURN;
    else
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
    if trim(l_hm_apply_vendor.phone_number) is null then
      retcode := 'E';
      retmsg  := '电话不能为空!';
      RETURN;
    end if;
  
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
      
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写银行信息!';
      RETURN;
    end if;
    --end
  
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 and
         l_hm_apply_vendor.country = 'CN' THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-CREATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
            
              v_hm_apply_vendor.tax_code := l_hm_apply_vendor.tax_code;
              retcode                    := 'E';
              retmsg                     := '创建业务时，供应商税号 [' ||
                                            l_hm_apply_vendor.tax_code ||
                                            '] 已经存在于申请 [' ||
                                            cur_rows.apply_id || '] 的明细行 [' ||
                                            cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
        
          v_hm_apply_vendor.vendor_code := cur_rows.vendor_code;
          v_hm_apply_vendor.tax_code    := l_hm_apply_vendor.tax_code;
          retcode                       := 'E';
          retmsg                        := '供应商税号 [' ||
                                           l_hm_apply_vendor.tax_code ||
                                           ']已经存在MDM主数据中,供应商编码是[' ||
                                           cur_rows.vendor_code || ']';
          RETURN;
        END IF;
      end loop;
      if retcode = 'S' then
        l_hm_apply_vendor.row_id      := comm_util.FUNC_NEW_ROWID();
        v_hm_apply_vendor.vendor_code := l_hm_apply_vendor.vendor_code;
        v_hm_apply_vendor.row_id      := l_hm_apply_vendor.row_id;
        v_hm_apply_vendor.tax_code    := l_hm_apply_vendor.tax_code;
        --创建者是VM表明是车辆管理接口新增进来的 
        insert into hm_vendors
          (row_id,
           vendor_code,
           vendor_name,
           tax_code,
           street_room,
           postal_code_city,
           country,
           region,
           phone_number,
           account_grp_code,
           created_by,
           for_gvs,
           last_version_flag,
           operate_status,
           last_upd_by)
        values
          (l_hm_apply_vendor.row_id,
           l_hm_apply_vendor.vendor_code,
           l_hm_apply_vendor.vendor_name,
           l_hm_apply_vendor.tax_code,
           l_hm_apply_vendor.street_room,
           l_hm_apply_vendor.postal_code_city,
           l_hm_apply_vendor.country,
           l_hm_apply_vendor.region,
           l_hm_apply_vendor.phone_number,
           l_hm_apply_vendor.account_grp_code,
           'SWHR',
           '0',
           '1',
           'NVL',
           'SWHR');
      
        insert into hm_vendor_company_data
          (row_id,
           vendor_id,
           company_code,
           reconcile_account,
           sequence_no,
           payment_term,
           payment_method,
           created_by,
           for_gvs,
           last_version_flag,
           operate_status,
           last_upd_by)
        values
          (comm_util.FUNC_NEW_ROWID(),
           l_hm_apply_vendor.row_id,
           '1760',
           '1221030100',
           '002',
           '0015',
           'I',
           'SWHR',
           '0',
           '1',
           'NVL',
           'SWHR');
      
        if v_hm_apply_vendor_bank.count is not null then
          for i in 1 .. v_hm_apply_vendor_bank.count loop
            v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
            --获取银行名称
            SELECT BANK_NAME
              into v_BANK_NAME
              FROM hm_banks
             WHERE 1 = 1
               and delete_flag = '0'
               and bank_country = v_apply_vendor_bank.bank_country
               and length(bank_branch_code) = 12
               and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
               and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
            --end   
            insert into hm_vendor_bank_accounts
              (row_id,
               vendor_id,
               account_holder_name,
               bank_country,
               bank_account_num,
               bank_branch_code,
               created_by,
               for_gvs,
               last_version_flag,
               operate_status,
               active_range,
               bank_name,
               last_upd_by)
            values
              (comm_util.FUNC_NEW_ROWID(),
               l_hm_apply_vendor.row_id,
               v_apply_vendor_bank.account_holder_name,
               'CN',
               '1',
               v_apply_vendor_bank.bank_branch_code,
               'SWHR',
               '0',
               '1',
               'NVL',
               'ALL',
               v_BANK_NAME,
               'SWHR');
          end loop;
        end if;
      
      end if;
      retcode := 'S';
      retmsg  := '新增供应商成功';
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_allcheck_SWHR2MDM;

  PROCEDURE prc_update_allcheck_SWHR2MDM(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                         v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                         v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                         v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                         v_rowid                   IN OUT VARCHAR2,
                                         v_bank_flag               in OUT VARCHAR2,
                                         retcode                   OUT VARCHAR2,
                                         retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    v_BANK_NAME            varchar2(100);
    bbc_flag               integer := 0;
    lcl_count              integer := 0;
  BEGIN
    --名称重复判断
  
    if (v_hm_apply_vendor.account_grp_code <> '1600') then
      lcl_count := 0;
      select count(*)
        into lcl_count
        from hm_vendors t
       where t.vendor_name = trim(v_hm_apply_vendor.vendor_name)
         and t.vendor_code != v_hm_apply_vendor.vendor_code;
      if (lcl_count > 0) then
        retcode := 'E';
        retmsg  := '供应商名称在MDM供应商主数据中已经存在';
        return;
      end if;
    end if;
    --税号是否重复
    FOR cur_rows IN (SELECT COUNT(*) rowscount,
                            MIN(a.apply_id) apply_id,
                            MIN(b.item_no) item_no,
                            MIN(a.audit_flag) audit_flag
                       FROM hm_applys a, hm_apply_vendor b
                      WHERE a.apply_id = b.apply_id
                        AND b.tax_code = v_hm_apply_vendor.tax_code
                        AND a.active_flag = '1'
                        AND a.delete_flag = '0'
                        and b.delete_flag = '0'
                        AND a.business_code LIKE 'VDR-CREATE%') LOOP
      IF cur_rows.rowscount > 0 THEN
        --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
        FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                            FROM hm_vendors
                           WHERE tax_code = v_hm_apply_vendor.tax_code
                          /*and delete_flag = '0'*/
                          ) LOOP
          IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
          
            retcode := 'E';
            retmsg  := '创建业务时，供应商税号 [' || v_hm_apply_vendor.tax_code ||
                       '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                       cur_rows.item_no || '] 中!';
            RETURN;
          END IF;
        END LOOP;
        --end
      
      END IF;
    END LOOP;
  
    FOR cur_rows IN (SELECT COUNT(*) rowscount,
                            MAX(row_id) row_id,
                            MAX(create_apply_id) create_apply_id
                       FROM hm_vendors s
                      WHERE tax_code = v_hm_apply_vendor.tax_code
                        and s.vendor_code != v_hm_apply_vendor.vendor_code) LOOP
      IF cur_rows.rowscount > 0 THEN
      
        retcode := 'E';
        retmsg  := '供应商税号 [' || v_hm_apply_vendor.tax_code ||
                   ']已经存在MDM主数据中';
        RETURN;
      
      END IF;
    end loop;
    comm_util.copy_table_line('hm_vendors',
                              '',
                              '_HIS',
                              v_rowid,
                              retcode,
                              retmsg);
    update hm_vendors s
       set VENDOR_NAME      = decode(v_hm_apply_vendor.VENDOR_NAME,
                                     null,
                                     VENDOR_NAME,
                                     v_hm_apply_vendor.VENDOR_NAME),
           TAX_CODE         = decode(v_hm_apply_vendor.TAX_CODE,
                                     null,
                                     TAX_CODE,
                                     v_hm_apply_vendor.TAX_CODE),
           STREET_ROOM      = decode(v_hm_apply_vendor.STREET_ROOM,
                                     null,
                                     STREET_ROOM,
                                     v_hm_apply_vendor.STREET_ROOM),
           POSTAL_CODE_CITY = decode(v_hm_apply_vendor.POSTAL_CODE_CITY,
                                     null,
                                     POSTAL_CODE_CITY,
                                     v_hm_apply_vendor.POSTAL_CODE_CITY),
           COUNTRY          = decode(v_hm_apply_vendor.COUNTRY,
                                     null,
                                     COUNTRY,
                                     v_hm_apply_vendor.COUNTRY),
           REGION           = decode(v_hm_apply_vendor.REGION,
                                     null,
                                     REGION,
                                     v_hm_apply_vendor.REGION),
           PHONE_NUMBER     = decode(v_hm_apply_vendor.PHONE_NUMBER,
                                     null,
                                     PHONE_NUMBER,
                                     v_hm_apply_vendor.PHONE_NUMBER),
           s.last_upd       = sysdate,
           s.last_upd_by    = 'SWHR'
     where s.vendor_code = v_hm_apply_vendor.vendor_code;
    if v_bank_flag = 'X' then
      if v_hm_apply_vendor_bank.count is not null then
        --将银行信息删除
        FOR cur_rows IN (select h.row_id row_id
                           from hm_vendor_bank_accounts h
                          where h.vendor_id in
                                (select ss.row_id
                                   from hm_vendors ss
                                  where ss.vendor_code =
                                        v_hm_apply_vendor.vendor_code)
                            and h.delete_flag = '0') LOOP
          comm_util.copy_table_line('hm_vendor_bank_accounts',
                                    '',
                                    '_HIS',
                                    cur_rows.row_id,
                                    retcode,
                                    retmsg);
          update hm_vendor_bank_accounts s
             set s.delete_flag = '1'
           where s.row_id = cur_rows.row_id;
        end loop;
        --end              
      
        for i in 1 .. v_hm_apply_vendor_bank.count loop
          v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
          --更新的时候判断是否符合
          if v_apply_vendor_bank.account_holder_name is null then
            retcode := 'E';
            retmsg  := '银行账户不能为空!';
            RETURN;
          end if;
        
          if v_apply_vendor_bank.bank_branch_code is null then
            retcode := 'E';
            retmsg  := '银行码不能为空!';
            RETURN;
          else
            bbc_flag := 0;
            SELECT count(*)
              into bbc_flag
              FROM hm_banks
             WHERE 1 = 1
               and delete_flag = '0'
               and bank_country = v_apply_vendor_bank.bank_country
               and length(bank_branch_code) = 12
               and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
               and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
            if bbc_flag = 0 then
              retcode := 'E';
              retmsg  := v_hm_apply_vendor.vendor_name || ':' ||
                         v_apply_vendor_bank.bank_branch_code ||
                         ',The bank_branch_code not exist.';
              RETURN;
            end if;
          end if;
          --获取银行名称
          SELECT BANK_NAME
            into v_BANK_NAME
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          --end   
          insert into hm_vendor_bank_accounts
            (row_id,
             vendor_id,
             account_holder_name,
             bank_country,
             bank_account_num,
             bank_branch_code,
             created_by,
             for_gvs,
             last_version_flag,
             operate_status,
             active_range,
             bank_name)
          values
            (comm_util.FUNC_NEW_ROWID(),
             v_rowid,
             v_apply_vendor_bank.account_holder_name,
             'CN',
             '1',
             v_apply_vendor_bank.bank_branch_code,
             'SWHR',
             '0',
             '1',
             'NVL',
             'ALL',
             v_BANK_NAME);
        end loop;
      end if;
    end if;
    retcode := 'S';
    retmsg  := '更新供应商成功';
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_update_allcheck_SWHR2MDM;

  --外围系统通用接口
  procedure prc_vendor_info_OUTERSYS2MDM(in_VENDOR_CODE      in VARCHAR2,
                                         in_VENDOR_NAME      in VARCHAR2,
                                         in_ACCOUNT_GRP_CODE in VARCHAR2,
                                         in_TAX_CODE         in VARCHAR2,
                                         in_STREET_ROOM      in VARCHAR2,
                                         in_POSTAL_CODE_CITY in VARCHAR2,
                                         in_COUNTRY          in VARCHAR2,
                                         in_REGION           in VARCHAR2,
                                         in_PHONE_NUMBER     in VARCHAR2,
                                         T_VENDOR_COMPANY    in RSP_VENDOR_COMPANY_TABLE,
                                         T_VENDOR_BANK       in RSP_VENDOR_BANK_TABLE,
                                         T_VENDOR_PUR        in RSP_VENDOR_PUR_TABLE,
                                         system_name         in VARCHAR2,
                                         view_bank_flag      in VARCHAR2,
                                         operate_type        in VARCHAR2,
                                         
                                         retcode         out varchar2,
                                         retmsg          out varchar2,
                                         out_row_id      out varchar2,
                                         out_vendor_code out varchar2,
                                         out_tax_code    out varchar2) is
  
    v_vendor_company RSP_VENDOR_COMPANY_TYPE;
    v_vendor_bank    RSP_VENDOR_BANK_TYPE;
    v_vendor_pur     RSP_VENDOR_PUR_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank    tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_pur     tab_apply_vendor_pur := tab_apply_vendor_pur();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
    p_flag         integer := 0;
    l_rowcount     integer := 0;
    l_rowid        varchar2(100);
    l_bank_flag    varchar2(100);
    lcl_count      integer := 0;
    lcl_row_id     varchar2(100);
    base_for_gvs   varchar2(100);
    lcl_for_gvs    varchar2(100);
    lcl_count1     integer := 0;
    lcl_for_pur    varchar2(100);
    l_system_name  varchar2(100);
  begin
    retcode := 'S';
    retmsg  := '数据处理完毕';
  
    l_bank_flag := view_bank_flag;
    --判断该系统的采购信息是否必填 是否传输SAP
    l_system_name := system_name;
    select max(v.for_gvs), max(v.purchurse_flag), count(1)
      into lcl_for_gvs, lcl_for_pur, lcl_count1
      from hm_common_interface_info_vdr v
     where v.system_name = l_system_name;
    if lcl_count1 = 0 then
      lcl_for_pur := '0';
      lcl_for_gvs := '0';
    
    end if;
    --end--SLKT
    if l_system_name is null or operate_type is null then
      retcode         := 'E';
      retmsg          := '编码:' || in_vendor_code || ';请输入系统名称和操作状态!';
      out_vendor_code := in_vendor_code;
      out_row_id      := '';
      out_tax_code    := in_tax_code;
      RETURN;
    else
      if l_system_name not in
         ('ZNYQ', 'JJGO', 'SLKT', '1169xw', 'CLGL', 'DDLPT') or
         operate_type not in ('CREATE', 'UPDATE', 'EXTEND') then
        retcode         := 'E';
        retmsg          := '编码:' || in_vendor_code || ';请输入正确的系统名称和操作状态!';
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        RETURN;
      end if;
      if l_system_name in ('CLGL') and operate_type not in ('EXTEND') then
        retcode         := 'E';
        retmsg          := '编码:' || in_vendor_code || ';操作状态只能是EXTEND!';
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        RETURN;
      end if;
    end if;
  
    ---水家电增加供应商信息
    --ZNYQ智能园区访客系统
    --SLKT是三菱空调的
    --JJGO是间接采购
    --1169xw小薇公司创建个人供应商
    --DDLPT 供应商零距离交互平台
    --HRJS 海尔净水
    --CLGL 海尔商旅电子商务平台
    if l_system_name in ('ZNYQ', 'JJGO', 'SLKT', '1169xw', 'CLGL', 'DDLPT') then
      --基本信息
      l_apply_vendor.vendor_code      := in_vendor_code;
      l_apply_vendor.vendor_name      := in_vendor_name;
      l_apply_vendor.tax_code         := in_tax_code;
      l_apply_vendor.street_room      := in_street_room;
      l_apply_vendor.postal_code_city := in_postal_code_city;
      l_apply_vendor.country          := in_country;
      l_apply_vendor.region           := in_region;
      l_apply_vendor.phone_number     := in_phone_number;
      if l_system_name in ('ZNYQ', '1169xw') then
        l_apply_vendor.account_grp_code := '1600';
      else
        l_apply_vendor.account_grp_code := in_ACCOUNT_GRP_CODE;
      end if;
      l_apply_vendor.created_by := l_system_name;
      --公司视图
    
      c_flag                 := 0;
      t_apply_vendor_company := tab_apply_vendor_company();
      if T_VENDOR_COMPANY is not null then
        for i in 1 .. T_VENDOR_COMPANY.count loop
          v_vendor_company                            := t_vendor_company(i);
          v_apply_vendor_company.company_code         := v_vendor_company.COMPANY_CODE;
          v_apply_vendor_company.RECONCILE_ACCOUNT    := v_vendor_company.RECONCILE_ACCOUNT; --统奴科目
          v_apply_vendor_company.SEQUENCE_NO          := v_vendor_company.SEQUENCE_NO; --排序码
          v_apply_vendor_company.payment_term_company := v_vendor_company.PAYMENT_TERM; --付款条款
          v_apply_vendor_company.PAYMENT_METHOD       := v_vendor_company.PAYMENT_METHOD; --付款方式
          v_apply_vendor_company.HQ                   := v_vendor_company.HQ; --总部
          v_apply_vendor_company.CASH_MGT_GROUP       := v_vendor_company.CASH_MGT_GROUP; --现金管理组
          v_apply_vendor_company.ACCOUNTING_CUSTOMER  := v_vendor_company.ACCOUNTING_CUSTOMER; --具有客户的清算
          v_apply_vendor_company.TOLERANCE_GROUP      := v_vendor_company.TOLERANCE_GROUP;
          t_apply_vendor_company.extend();
          t_apply_vendor_company(t_apply_vendor_company.count) := v_apply_vendor_company;
          c_flag := c_flag + 1;
        end loop;
      end if;
    
      --银行视图
      b_flag              := 0;
      t_apply_vendor_bank := tab_apply_vendor_bank();
      if t_vendor_bank is not null then
        for i in 1 .. t_vendor_bank.count loop
          v_vendor_bank                           := t_vendor_bank(i);
          v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
          v_apply_vendor_bank.BANK_COUNTRY        := v_vendor_bank.BANK_COUNTRY; --银行所属国家
          v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
          v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
          t_apply_vendor_bank.extend();
          t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
          b_flag := b_flag + 1;
        end loop;
      end if;
      --采购视图
      if lcl_for_pur = '1' then
        p_flag             := 0;
        t_apply_vendor_pur := tab_apply_vendor_pur();
        if T_VENDOR_PUR is not null then
          for i in 1 .. T_VENDOR_PUR.count loop
            v_vendor_pur                         := T_VENDOR_PUR(i);
            v_apply_vendor_pur.purchase_grp_code := v_vendor_pur.PURCHASE_GRP_CODE; --
            v_apply_vendor_pur.order_currency    := v_vendor_pur.ORDER_CURRENCY; --
            v_apply_vendor_pur.partner_pi        := v_vendor_pur.PARTNER_PI; --
            --20150408葛总要求只要调用这个接口创建供应商采购组织视图的 就将自动建立采购订单字段默认打勾
            v_apply_vendor_pur.auto_generate_order := 'X';
            t_apply_vendor_pur.extend();
            t_apply_vendor_pur(t_apply_vendor_pur.count) := v_apply_vendor_pur;
            p_flag := p_flag + 1;
          end loop;
        
        end if;
      end if;
      if operate_type = 'CREATE' then
        if l_apply_vendor.vendor_code is not null and
           l_apply_vendor.account_grp_code != '1600' then
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code ||
                             ';新增时供应商编码不需要填写';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        end if;
        --CLGL系统只传公司信息，只做扩展
        if l_system_name not in ('CLGL') then
          if b_flag = 0 or c_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的公司银行信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        else
          if c_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的公司信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        end if;
        if lcl_for_pur = '1' then
          if p_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的采购信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        end if;
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_allcheck_znyq2mdm(v_hm_apply_vendor         => l_apply_vendor,
                                    v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                    v_hm_apply_vendor_company => t_apply_vendor_company,
                                    v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                    v_for_gvs                 => lcl_for_gvs,
                                    v_for_pur                 => lcl_for_pur,
                                    retcode                   => retcode,
                                    retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          rollback;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
        
        END IF;
      
      elsif operate_type = 'UPDATE' then
        retcode         := 'E';
        retmsg          := '税号:' || l_apply_vendor.tax_code || ';系统没有更新功能';
        out_vendor_code := l_apply_vendor.vendor_code;
        out_row_id      := l_apply_vendor.row_id;
        out_tax_code    := l_apply_vendor.tax_code;
        RETURN;
      elsif operate_type = 'EXTEND' then
        if l_apply_vendor.vendor_code is null then
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code ||
                             ';扩展时供应商编码不能为空';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        else
          lcl_count := 0;
          select count(*), max(t.row_id), max(t.for_gvs)
            into lcl_count, lcl_row_id, base_for_gvs
            from hm_vendors t
           where t.vendor_code = trim(l_apply_vendor.vendor_code);
          if (lcl_count = 0) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中不存在';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          elsif (lcl_count > 1) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中存在异常';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
          --如果是传输SAP的需要修改基本信息状态
          if base_for_gvs = 1 then
            update hm_vendors t
               set t.last_version_flag = '2',
                   t.operate_status    = decode(t.operate_status,
                                                'CREATE',
                                                'CREATE',
                                                'UPDATE')
             where t.vendor_code = trim(l_apply_vendor.vendor_code);
          end if;
          --end
          l_apply_vendor.row_id := lcl_row_id;
        end if;
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_check_znyq2mdm_ext(v_hm_apply_vendor         => l_apply_vendor,
                                     v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                     v_hm_apply_vendor_company => t_apply_vendor_company,
                                     v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                     v_for_gvs                 => lcl_for_gvs,
                                     v_for_pur                 => lcl_for_pur,
                                     retcode                   => retcode,
                                     retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          rollback;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
        
        END IF;
      end if;
    end if;
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常' || '!Exception Code:' || SQLCODE ||
                 ';Exception message:' || SQLERRM || to_char(c_flag) || ' ' ||
                 to_char(b_flag) || ' ' || to_char(p_flag);
  end prc_vendor_info_OUTERSYS2MDM;

  --针对外围传入接口的 字段逻辑检查
  PROCEDURE prc_input_allcheck_znyq2mdm(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                        v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                        v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                        v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                        v_for_gvs                 in varchar2,
                                        v_for_pur                 in varchar2,
                                        retcode                   OUT VARCHAR2,
                                        retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count    integer := 0;
    b_count    integer := 0;
    bc_flag    integer := 0;
    pur_row_id varchar2(120);
    bbc_flag   integer := 0;
  
    v_BANK_NAME varchar2(120);
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --检查是否必输
    if trim(l_hm_apply_vendor.vendor_name) is null then
      retcode := 'E';
      retmsg  := '供应商名称不能为空!';
      RETURN;
    end if;
    --2015年6月4日16:27:33  刘志龙  添加账户组不能为空的校验
    if trim(l_hm_apply_vendor.account_grp_code) is null then
      retcode := 'E';
      retmsg  := '账户组不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.tax_code) is null then
      retcode := 'E';
      retmsg  := '税号(身份证号)不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.street_room) is null then
      retcode := 'E';
      retmsg  := '街道/房号不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.postal_code_city) is null then
      retcode := 'E';
      retmsg  := '邮政编码不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.country) is null then
      retcode := 'E';
      retmsg  := '国家不能为空!';
      RETURN;
    end if;
    if trim(l_hm_apply_vendor.region) is null then
      retcode := 'E';
      retmsg  := '地区不能为空!';
      RETURN;
    else
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
    if trim(l_hm_apply_vendor.phone_number) is null then
      retcode := 'E';
      retmsg  := '电话不能为空!';
      RETURN;
    end if;
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is null then
          retcode := 'E';
          retmsg  := '统驭科目不能为空!';
          RETURN;
        else
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is null then
          retcode := 'E';
          retmsg  := '排序码不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is null then
          retcode := 'E';
          retmsg  := '付款条款不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is null then
          retcode := 'E';
          retmsg  := '付款方式不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写公司信息!';
      RETURN;
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    else
      retcode := 'E';
      retmsg  := '请填写银行信息!';
      RETURN;
    end if;
    --end
    --采购字段是否必填
    if v_hm_apply_vendor_pur.count is not null then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        if v_apply_vendor_pur.order_currency is null then
          retcode := 'E';
          retmsg  := '订单货币不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Currency',
                                     v_apply_vendor_pur.order_currency,
                                     'Currency',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_pur.order_currency ||
                       ',The Order Currency not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_pur.purchase_grp_code is null then
          retcode := 'E';
          retmsg  := '采购组织不能为空!';
          RETURN;
        end if;
      
      end loop;
    
    end if;
    --end
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----vendor_name---------------------------
    l_hm_apply_vendor.vendor_name := trim(l_hm_apply_vendor.vendor_name);
    ls_fieldvalue                 := l_hm_apply_vendor.vendor_name;
    IF ls_fieldvalue IS NOT NULL THEN
      if l_hm_apply_vendor.account_grp_code <> '1600' then
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MIN(a.apply_id) apply_id,
                                MIN(b.item_no) item_no,
                                MIN(a.audit_flag) audit_flag
                           FROM hm_applys a, hm_apply_vendor b
                          WHERE a.apply_id = b.apply_id
                            AND b.vendor_name =
                                l_hm_apply_vendor.vendor_name
                            AND a.active_flag = '1'
                            AND a.delete_flag = '0'
                            and b.delete_flag = '0'
                            AND a.business_code LIKE 'VDR-CREATE%'
                            AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
          IF cur_rows.rowscount > 0 THEN
            --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
            FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                                FROM hm_vendors
                               WHERE tax_code = l_hm_apply_vendor.tax_code
                                 and delete_flag = '0') LOOP
              IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
                retcode := 'E';
                retmsg  := '创建业务时，供应商名称 [' || l_hm_apply_vendor.tax_code ||
                           '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                           cur_rows.item_no || '] 中!';
                RETURN;
              END IF;
            END LOOP;
            --end
          
          END IF;
        END LOOP;
      
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MAX(vendor_code) vendor_code,
                                MAX(create_apply_id) create_apply_id
                           FROM hm_vendors
                          WHERE VENDOR_NAME = l_hm_apply_vendor.VENDOR_NAME
                            and delete_flag = '0') LOOP
          IF cur_rows.rowscount > 0 THEN
            --name 已存在
            IF l_hm_apply_vendor.vendor_code is null or
               cur_rows.vendor_code <> l_hm_apply_vendor.vendor_code THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商名称 [' || l_hm_apply_vendor.VENDOR_NAME ||
                         '] 已经存在于主数据 [' || cur_rows.vendor_code || ']!';
              RETURN;
            END IF;
          END IF;
        END LOOP;
      
      end if;
    end if;
    ----end-----------------------------------
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-CREATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
        
          retcode := 'E';
          retmsg  := '供应商编码[' || cur_rows.vendor_code || ']供应商税号 [' ||
                     l_hm_apply_vendor.tax_code || ']在主数据中已存在';
          RETURN;
        
        else
          if l_hm_apply_vendor.vendor_code is null then
            --不存在申请单还有主数据中需要新增
            generate_code.generate_master_code('VENDOR',
                                               l_hm_apply_vendor.account_grp_code,
                                               out_mastercode,
                                               retcode,
                                               retmsg);
            IF retcode = '1' AND NOT instr(out_mastercode, 'TEMP') > 0 AND
               out_mastercode IS NOT NULL THEN
              retcode := 'S';
            ELSE
              retcode := 'E';
              ROLLBACK;
              RETURN;
            END IF;
          else
            out_mastercode := l_hm_apply_vendor.vendor_code;
          end if;
          if retcode = 'S' then
            l_hm_apply_vendor.row_id      := comm_util.FUNC_NEW_ROWID();
            l_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.vendor_code := out_mastercode;
            v_hm_apply_vendor.row_id      := l_hm_apply_vendor.row_id;
            --创建者是VM表明是车辆管理接口新增进来的 
            insert into hm_vendors
              (row_id,
               vendor_code,
               vendor_name,
               tax_code,
               street_room,
               postal_code_city,
               country,
               region,
               phone_number,
               account_grp_code,
               created_by,
               for_gvs,
               last_version_flag,
               operate_status,
               last_upd_by)
            values
              (l_hm_apply_vendor.row_id,
               l_hm_apply_vendor.vendor_code,
               l_hm_apply_vendor.vendor_name,
               l_hm_apply_vendor.tax_code,
               l_hm_apply_vendor.street_room,
               l_hm_apply_vendor.postal_code_city,
               l_hm_apply_vendor.country,
               l_hm_apply_vendor.region,
               l_hm_apply_vendor.phone_number,
               l_hm_apply_vendor.account_grp_code,
               l_hm_apply_vendor.created_by,
               v_for_gvs,
               '2',
               'CREATE',
               l_hm_apply_vendor.created_by);
            if v_hm_apply_vendor_company.count is not null then
              for i in 1 .. v_hm_apply_vendor_company.count loop
                v_apply_vendor_company := v_hm_apply_vendor_company(i);
                insert into hm_vendor_company_data
                  (row_id,
                   vendor_id,
                   company_code,
                   reconcile_account,
                   sequence_no,
                   payment_term,
                   payment_method,
                   hq,
                   cash_mgt_group,
                   accounting_customer,
                   tolerance_group,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   last_upd_by)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_company.company_code,
                   v_apply_vendor_company.reconcile_account,
                   v_apply_vendor_company.sequence_no,
                   v_apply_vendor_company.payment_term_company,
                   v_apply_vendor_company.payment_method,
                   v_apply_vendor_company.hq,
                   v_apply_vendor_company.cash_mgt_group,
                   v_apply_vendor_company.accounting_customer,
                   v_apply_vendor_company.tolerance_group,
                   l_hm_apply_vendor.created_by,
                   v_for_gvs,
                   '2',
                   'CREATE',
                   l_hm_apply_vendor.created_by);
              end loop;
            end if;
            if v_hm_apply_vendor_bank.count is not null then
              for i in 1 .. v_hm_apply_vendor_bank.count loop
                v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
                --获取银行名称
                SELECT BANK_NAME
                  into v_BANK_NAME
                  FROM hm_banks
                 WHERE 1 = 1
                   and delete_flag = '0'
                   and bank_country = v_apply_vendor_bank.bank_country
                   and length(bank_branch_code) = 12
                   and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
                   and bank_branch_code =
                       v_apply_vendor_bank.bank_branch_code;
                --end 
                insert into hm_vendor_bank_accounts
                  (row_id,
                   vendor_id,
                   account_holder_name,
                   bank_country,
                   bank_account_num,
                   bank_branch_code,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   active_range,
                   bank_name,
                   last_upd_by)
                values
                  (comm_util.FUNC_NEW_ROWID(),
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_bank.account_holder_name,
                   v_apply_vendor_bank.bank_country,
                   v_apply_vendor_bank.bank_account_num,
                   v_apply_vendor_bank.bank_branch_code,
                   l_hm_apply_vendor.created_by,
                   v_for_gvs,
                   '2',
                   'CREATE',
                   'ALL',
                   v_BANK_NAME,
                   l_hm_apply_vendor.created_by);
              end loop;
            end if;
            --采购信息保存  
            if v_hm_apply_vendor_pur.count is not null then
              for i in 1 .. v_hm_apply_vendor_pur.count loop
                v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
              
                pur_row_id := comm_util.FUNC_NEW_ROWID();
                insert into hm_vendor_pur_data
                  (row_id,
                   vendor_id,
                   purchase_grp_code,
                   order_currency,
                   auto_generate_order,
                   created_by,
                   for_gvs,
                   last_version_flag,
                   operate_status,
                   last_upd_by)
                values
                  (pur_row_id,
                   l_hm_apply_vendor.row_id,
                   v_apply_vendor_pur.purchase_grp_code,
                   v_apply_vendor_pur.order_currency,
                   v_apply_vendor_pur.auto_generate_order, --20150408葛总要求凡是调用prc_vendor_info_OUTERSYS2MDM接口的采购视图的自动建立采购订单字段都打√ 
                   l_hm_apply_vendor.created_by,
                   v_for_gvs,
                   '2',
                   'CREATE',
                   l_hm_apply_vendor.created_by);
                --增加合作伙伴信息 VN OA
                insert into HM_VENDOR_PARTNERS
                  (row_id,
                   pur_grp_id,
                   partner_subject_id,
                   partner_function,
                   partner_counter,
                   partner_reference,
                   created_by,
                   created,
                   last_version_flag,
                   version,
                   operate_status,
                   remark)
                  select comm_util.func_new_rowid,
                         pur_row_id,
                         l_hm_apply_vendor.vendor_code,
                         value,
                         0,
                         '',
                         l_hm_apply_vendor.created_by,
                         sysdate,
                         2,
                         1.0,
                         'CREATE',
                         ''
                    from hm_fnd_values
                   where value_set_id = 'VendorPartnerFunction'
                     and value in ('VN', 'OA')
                   order by sort_order ASC;
                --增加PI合作伙伴信息
                insert into HM_VENDOR_PARTNERS
                  (row_id,
                   pur_grp_id,
                   partner_subject_id,
                   partner_function,
                   partner_counter,
                   partner_reference,
                   created_by,
                   created,
                   last_version_flag,
                   version,
                   operate_status,
                   remark)
                values
                  (comm_util.func_new_rowid,
                   pur_row_id,
                   decode(v_apply_vendor_pur.partner_pi,
                          null,
                          l_hm_apply_vendor.vendor_code,
                          v_apply_vendor_pur.partner_pi),
                   'PI',
                   0,
                   '',
                   l_hm_apply_vendor.created_by,
                   sysdate,
                   2,
                   1.0,
                   'CREATE',
                   '');
              end loop;
            end if;
          end if;
          retcode := 'S';
          retmsg  := '新增供应商成功';
        END IF;
      END LOOP;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_allcheck_znyq2mdm;

  --针对外围传入接口的 字段逻辑检查
  PROCEDURE prc_input_check_znyq2mdm_ext(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                         v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                         v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                         v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                         v_for_gvs                 in varchar2,
                                         v_for_pur                 in varchar2,
                                         retcode                   OUT VARCHAR2,
                                         retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count    integer := 0;
    b_count    integer := 0;
    p_count    integer := 0;
    bc_flag    integer := 0;
    pur_row_id varchar2(120);
    bbc_flag   integer := 0;
  
    v_BANK_NAME         varchar2(120);
    v_parent_value_high hm_fnd_values.parent_value_high%type;
  BEGIN
    retcode := 'S';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is null then
          retcode := 'E';
          retmsg  := '统驭科目不能为空!';
          RETURN;
        else
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is null then
          retcode := 'E';
          retmsg  := '排序码不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is null then
          retcode := 'E';
          retmsg  := '付款条款不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is null then
          retcode := 'E';
          retmsg  := '付款方式不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    
    end if;
    --end
    --采购字段是否必填
    if v_hm_apply_vendor_pur.count is not null then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        if v_apply_vendor_pur.order_currency is null then
          retcode := 'E';
          retmsg  := '订单货币不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Currency',
                                     v_apply_vendor_pur.order_currency,
                                     'Currency',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_pur.order_currency ||
                       ',The Order Currency not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_pur.purchase_grp_code is null then
          retcode := 'E';
          retmsg  := '采购组织不能为空!';
          RETURN;
        end if;
      
      end loop;
    
    end if;
    --end
  
    if v_hm_apply_vendor_company.count is not null then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        --判断新加的公司是否已经扩展了
        c_count := 0;
        select count(*)
          into c_count
          from hm_vendor_company_data a
         where a.vendor_id =
               (select row_id
                  from hm_vendors s
                 where s.vendor_code = l_hm_apply_vendor.vendor_code)
           and a.company_code = v_apply_vendor_company.company_code;
        if c_count = 0 then
          --根据公司代码配置的是否传输SAP
        
          select e.parent_value_high
            into v_parent_value_high
            from hm_fnd_values e
           where e.value_set_id = 'CompanyCode'
             and e.delete_flag = '0'
             and e.value = v_apply_vendor_company.company_code;
          if v_parent_value_high is null then
            v_parent_value_high := '0';
          else
            v_parent_value_high := '1';
          end if;
          --end
          insert into hm_vendor_company_data
            (row_id,
             vendor_id,
             company_code,
             reconcile_account,
             sequence_no,
             payment_term,
             payment_method,
             hq,
             cash_mgt_group,
             accounting_customer,
             tolerance_group,
             created_by,
             for_gvs,
             last_version_flag,
             operate_status,
             last_upd_by)
          values
            (comm_util.FUNC_NEW_ROWID(),
             l_hm_apply_vendor.row_id,
             v_apply_vendor_company.company_code,
             v_apply_vendor_company.reconcile_account,
             v_apply_vendor_company.sequence_no,
             v_apply_vendor_company.payment_term_company,
             v_apply_vendor_company.payment_method,
             v_apply_vendor_company.hq,
             v_apply_vendor_company.cash_mgt_group,
             v_apply_vendor_company.accounting_customer,
             v_apply_vendor_company.tolerance_group,
             l_hm_apply_vendor.created_by,
             v_parent_value_high,
             '2',
             'CREATE',
             l_hm_apply_vendor.created_by);
          --else
          --    retcode := 'E';
          --    retmsg  := '供应商编码['||l_hm_apply_vendor.vendor_code||']公司代码['||v_apply_vendor_company.company_code||']在主数据中已经存在该公司,不能扩展';
          --    return;
        end if;
      end loop;
    end if;
    if v_hm_apply_vendor_bank.count is not null then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        b_count             := 0;
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        select count(*)
          into b_count
          from hm_vendor_bank_accounts a
         where a.vendor_id =
               (select row_id
                  from hm_vendors s
                 where s.vendor_code = l_hm_apply_vendor.vendor_code)
           and a.account_holder_name =
               v_apply_vendor_bank.account_holder_name;
        if b_count = 0 then
          --获取银行名称
          SELECT BANK_NAME
            into v_BANK_NAME
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          --end 
          insert into hm_vendor_bank_accounts
            (row_id,
             vendor_id,
             account_holder_name,
             bank_country,
             bank_account_num,
             bank_branch_code,
             created_by,
             for_gvs,
             last_version_flag,
             operate_status,
             active_range,
             bank_name,
             last_upd_by)
          values
            (comm_util.FUNC_NEW_ROWID(),
             l_hm_apply_vendor.row_id,
             v_apply_vendor_bank.account_holder_name,
             v_apply_vendor_bank.bank_country,
             v_apply_vendor_bank.bank_account_num,
             v_apply_vendor_bank.bank_branch_code,
             l_hm_apply_vendor.created_by,
             v_for_gvs,
             '2',
             'CREATE',
             'ALL',
             v_BANK_NAME,
             l_hm_apply_vendor.created_by);
        else
          retcode := 'E';
          retmsg  := '供应商编码[' || l_hm_apply_vendor.vendor_code || ']银行账号[' ||
                     v_apply_vendor_bank.account_holder_name ||
                     ']在主数据中已经存在该银行,不能扩展';
          return;
        end if;
      end loop;
    end if;
    --采购信息保存  
    if v_hm_apply_vendor_pur.count is not null then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        --判断是否已经扩展了
        p_count := 0;
        select count(*)
          into p_count
          from hm_vendor_pur_data a
         where a.vendor_id =
               (select row_id
                  from hm_vendors s
                 where s.vendor_code = l_hm_apply_vendor.vendor_code)
           and a.purchase_grp_code = v_apply_vendor_pur.purchase_grp_code;
        if p_count = 0 then
          pur_row_id := comm_util.FUNC_NEW_ROWID();
          insert into hm_vendor_pur_data
            (row_id,
             vendor_id,
             purchase_grp_code,
             order_currency,
             created_by,
             for_gvs,
             last_version_flag,
             operate_status,
             last_upd_by)
          values
            (pur_row_id,
             l_hm_apply_vendor.row_id,
             v_apply_vendor_pur.purchase_grp_code,
             v_apply_vendor_pur.order_currency,
             l_hm_apply_vendor.created_by,
             v_for_gvs,
             '2',
             'CREATE',
             l_hm_apply_vendor.created_by);
          --增加合作伙伴信息 VN OA
          insert into HM_VENDOR_PARTNERS
            (row_id,
             pur_grp_id,
             partner_subject_id,
             partner_function,
             partner_counter,
             partner_reference,
             created_by,
             created,
             last_version_flag,
             version,
             operate_status,
             remark)
            select comm_util.func_new_rowid,
                   pur_row_id,
                   l_hm_apply_vendor.vendor_code,
                   value,
                   0,
                   '',
                   l_hm_apply_vendor.created_by,
                   sysdate,
                   2,
                   1.0,
                   'CREATE',
                   ''
              from hm_fnd_values
             where value_set_id = 'VendorPartnerFunction'
               and value in ('VN', 'OA')
             order by sort_order ASC;
          --增加PI合作伙伴信息
          insert into HM_VENDOR_PARTNERS
            (row_id,
             pur_grp_id,
             partner_subject_id,
             partner_function,
             partner_counter,
             partner_reference,
             created_by,
             created,
             last_version_flag,
             version,
             operate_status,
             remark)
          values
            (comm_util.func_new_rowid,
             pur_row_id,
             decode(v_apply_vendor_pur.partner_pi,
                    null,
                    l_hm_apply_vendor.vendor_code,
                    v_apply_vendor_pur.partner_pi),
             'PI',
             0,
             '',
             l_hm_apply_vendor.created_by,
             sysdate,
             2,
             1.0,
             'CREATE',
             '');
        else
          retcode := 'E';
          retmsg  := '供应商编码[' || l_hm_apply_vendor.vendor_code || ']采购组织[' ||
                     v_apply_vendor_pur.purchase_grp_code ||
                     ']在主数据中已经存在该采购组织,不能再扩展';
          return;
        end if;
      end loop;
    end if;
    retcode := 'S';
    retmsg  := '扩展供应商成功';
  
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_check_znyq2mdm_ext;

  procedure prc_auto_submit_vdr_mail(in_vendor_code in varchar2,
                                     in_system_name in varchar2,
                                     in_retcode     in varchar2,
                                     in_retmsg      in varchar2) is
  begin
    if in_retcode != 'S' then
      comm_util.prc_create_mail('供应商主数据',
                                'psi.mdmgys@haier.com',
                                '',
                                '',
                                '正式系统，' || in_system_name ||
                                '系统创建供应商主数据提交到GVS失败，编码："' || in_vendor_code ||
                                '",失败原因：' || in_retmsg,
                                '63');
    end if;
    commit;
  end prc_auto_submit_vdr_mail;

  --之前的通用接口只有新增和扩展 好多系统需要更新功能 140804号做了个新的通用接口，包含更新的，不能在原接口上改，因为要增加字段
  --以后通用供应商接口用这个
  procedure prc_vdr_info_OUTERSYS2MDM_NEW(in_VENDOR_CODE      in VARCHAR2,
                                          in_VENDOR_NAME      in VARCHAR2,
                                          in_ACCOUNT_GRP_CODE in VARCHAR2,
                                          in_TAX_CODE         in VARCHAR2,
                                          in_STREET_ROOM      in VARCHAR2,
                                          in_POSTAL_CODE_CITY in VARCHAR2,
                                          in_COUNTRY          in VARCHAR2,
                                          in_REGION           in VARCHAR2,
                                          in_PHONE_NUMBER     in VARCHAR2,
                                          T_VENDOR_COMPANY    in RSP_VENDOR_COMPANY_TABLE,
                                          T_VENDOR_BANK       in RSP_VENDOR_BANK_TABLE,
                                          T_VENDOR_PUR        in RSP_VENDOR_PUR_TABLE,
                                          system_name         in VARCHAR2,
                                          view_bank           in VARCHAR2,
                                          view_base           in VARCHAR2,
                                          view_comp           in VARCHAR2,
                                          view_pur            in VARCHAR2,
                                          operate_type        in VARCHAR2,
                                          
                                          retcode         out varchar2,
                                          retmsg          out varchar2,
                                          out_row_id      out varchar2,
                                          out_vendor_code out varchar2,
                                          out_tax_code    out varchar2) is
  
    v_vendor_company RSP_VENDOR_COMPANY_TYPE;
    v_vendor_bank    RSP_VENDOR_BANK_TYPE;
    v_vendor_pur     RSP_VENDOR_PUR_TYPE;
    v_vmout          vm_out_type := vm_out_type(null, null, null);
  
    t_apply_vendor_company tab_apply_vendor_company := tab_apply_vendor_company();
    t_apply_vendor_bank    tab_apply_vendor_bank := tab_apply_vendor_bank();
    t_apply_vendor_pur     tab_apply_vendor_pur := tab_apply_vendor_pur();
  
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
  
    l_apply_vendor hm_apply_vendor%ROWTYPE; --HM_APPLY_CUSTOME表 行类型  
    insert_flag    varchar2(1);
    c_flag         integer := 0;
    b_flag         integer := 0;
    p_flag         integer := 0;
    l_rowcount     integer := 0;
    l_rowid        varchar2(100);
    lcl_count      integer := 0;
    lcl_row_id     varchar2(100);
    lcl_for_gvs    varchar2(100);
    base_for_gvs   varchar2(100);
    lcl_count1     integer := 0;
    lcl_for_pur    varchar2(100);
    l_system_name  varchar2(100);
    lcl_bank       varchar2(100) := '';
    lcl_comp       varchar2(100) := '';
    lcl_base       varchar2(100) := '';
    lcl_pur        varchar2(100) := '';
    lcl_accountGrp varchar2(100) := '';
  begin
    retcode  := 'S';
    retmsg   := '数据处理完毕';
    lcl_bank := view_bank;
    lcl_comp := view_comp;
    lcl_base := view_base;
    lcl_pur  := view_pur;
    --判断该系统的采购信息是否必填 是否传输SAP
    l_system_name := system_name;
    select max(v.for_gvs), max(v.purchurse_flag), count(1)
      into lcl_for_gvs, lcl_for_pur, lcl_count1
      from hm_common_interface_info_vdr v
     where v.system_name = l_system_name;
    if lcl_count1 = 0 then
      lcl_for_pur := '0';
      lcl_for_gvs := '0';
    
    end if;
    --end--SLKT
    if l_system_name is null or operate_type is null then
      retcode         := 'E';
      retmsg          := '编码:' || in_vendor_code || ';请输入系统名称和操作状态!';
      out_vendor_code := in_vendor_code;
      out_row_id      := '';
      out_tax_code    := in_tax_code;
      RETURN;
    else
      if l_system_name not in ('ZNYQ',
                               'JJGO',
                               'SLKT',
                               '1169xw',
                               'DDLPT',
                               'HRJS',
                               'CLGL',
                               'SQXW',
                               'S00902',
                                'S00081',
                               'S00506') or
         operate_type not in ('CREATE', 'UPDATE', 'EXTEND') then
        retcode         := 'E';
        retmsg          := '编码:' || in_vendor_code || ';请输入正确的系统名称和操作状态!';
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        RETURN;
      end if;
      if l_system_name in ('CLGL') and operate_type not in ('EXTEND') then
        retcode         := 'E';
        retmsg          := '编码:' || in_vendor_code || ';操作状态只能是EXTEND!';
        out_vendor_code := in_vendor_code;
        out_row_id      := '';
        out_tax_code    := in_tax_code;
        RETURN;
      end if;
    end if;
  
    ---水家电增加供应商信息
    --ZNYQ不知道哪个系统的
    --SLKT是三菱空调的
    --JJGO是间接采购
    --1169xw小薇公司创建个人供应商
    --DDLPT 供应商零距离交互平台
    --HRJS 海尔净水
    --CLGL 海尔商旅电子商务平台
    --SQXW商圈小薇
    if l_system_name in ('ZNYQ',
                         'JJGO',
                         'SLKT',
                         '1169xw',
                         'DDLPT',
                         'HRJS',
                         'CLGL',
                         'SQXW',
                           'S00902',
                            'S00081',
                         'S00506') then
      --基本信息
      l_apply_vendor.vendor_code      := in_vendor_code;
      l_apply_vendor.vendor_name      := in_vendor_name;
      l_apply_vendor.tax_code         := in_tax_code;
      l_apply_vendor.street_room      := in_street_room;
      l_apply_vendor.postal_code_city := in_postal_code_city;
      l_apply_vendor.country          := in_country;
      l_apply_vendor.region           := in_region;
      l_apply_vendor.phone_number     := in_phone_number;
      if l_system_name in ('ZNYQ', '1169xw') then
        l_apply_vendor.account_grp_code := '1600';
      else
        l_apply_vendor.account_grp_code := in_ACCOUNT_GRP_CODE;
      end if;
      l_apply_vendor.created_by := l_system_name;
      --公司视图
    
      c_flag                 := 0;
      t_apply_vendor_company := tab_apply_vendor_company();
      if T_VENDOR_COMPANY is not null then
        for i in 1 .. T_VENDOR_COMPANY.count loop
          v_vendor_company                            := t_vendor_company(i);
          v_apply_vendor_company.company_code         := v_vendor_company.COMPANY_CODE;
          v_apply_vendor_company.RECONCILE_ACCOUNT    := v_vendor_company.RECONCILE_ACCOUNT; --统奴科目
          v_apply_vendor_company.SEQUENCE_NO          := v_vendor_company.SEQUENCE_NO; --排序码
          v_apply_vendor_company.payment_term_company := v_vendor_company.PAYMENT_TERM; --付款条款
          v_apply_vendor_company.PAYMENT_METHOD       := v_vendor_company.PAYMENT_METHOD; --付款方式
          v_apply_vendor_company.HQ                   := v_vendor_company.HQ; --总部
          v_apply_vendor_company.CASH_MGT_GROUP       := v_vendor_company.CASH_MGT_GROUP; --现金管理组
          v_apply_vendor_company.ACCOUNTING_CUSTOMER  := v_vendor_company.ACCOUNTING_CUSTOMER; --具有客户的清算
          v_apply_vendor_company.TOLERANCE_GROUP      := v_vendor_company.TOLERANCE_GROUP;
          t_apply_vendor_company.extend();
          t_apply_vendor_company(t_apply_vendor_company.count) := v_apply_vendor_company;
          c_flag := c_flag + 1;
        end loop;
      end if;
    
      --银行视图
      b_flag              := 0;
      t_apply_vendor_bank := tab_apply_vendor_bank();
      if t_vendor_bank is not null then
        for i in 1 .. t_vendor_bank.count loop
          v_vendor_bank                           := t_vendor_bank(i);
          v_apply_vendor_bank.ACCOUNT_HOLDER_NAME := v_vendor_bank.ACCOUNT_HOLDER_NAME; --银行帐户
          v_apply_vendor_bank.BANK_COUNTRY        := v_vendor_bank.BANK_COUNTRY; --银行所属国家
          v_apply_vendor_bank.BANK_ACCOUNT_NUM    := v_vendor_bank.BANK_ACCOUNT_NUM; --银行户主
          v_apply_vendor_bank.BANK_BRANCH_CODE    := v_vendor_bank.BANK_BRANCH_CODE;
          t_apply_vendor_bank.extend();
          t_apply_vendor_bank(t_apply_vendor_bank.count) := v_apply_vendor_bank;
          b_flag := b_flag + 1;
        end loop;
      end if;
      --采购视图
      if lcl_for_pur = '1' then
        p_flag             := 0;
        t_apply_vendor_pur := tab_apply_vendor_pur();
        if T_VENDOR_PUR is not null then
          for i in 1 .. T_VENDOR_PUR.count loop
            v_vendor_pur                         := T_VENDOR_PUR(i);
            v_apply_vendor_pur.purchase_grp_code := v_vendor_pur.PURCHASE_GRP_CODE; --
            v_apply_vendor_pur.order_currency    := v_vendor_pur.ORDER_CURRENCY; --
            v_apply_vendor_pur.partner_pi        := v_vendor_pur.PARTNER_PI; --
            t_apply_vendor_pur.extend();
            t_apply_vendor_pur(t_apply_vendor_pur.count) := v_apply_vendor_pur;
            p_flag := p_flag + 1;
          end loop;
        
        end if;
      end if;
      if operate_type = 'CREATE' then
        if l_apply_vendor.vendor_code is not null and
           l_apply_vendor.account_grp_code != '1600' then
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code ||
                             ';新增时供应商编码不需要填写';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        end if;
        --CLGL系统只传公司信息，只做扩展
        if l_system_name not in ('CLGL') then
          if b_flag = 0 or c_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的公司银行信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        else
          if c_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的公司信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        end if;
        if lcl_for_pur = '1' then
          if p_flag = 0 then
            insert_flag     := '1';
            retcode         := 'E';
            retmsg          := '税号:' || in_tax_code || ';所有供应商的采购信息都要填写;';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        end if;
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_allcheck_znyq2mdm(v_hm_apply_vendor         => l_apply_vendor,
                                    v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                    v_hm_apply_vendor_company => t_apply_vendor_company,
                                    v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                    v_for_gvs                 => lcl_for_gvs,
                                    v_for_pur                 => lcl_for_pur,
                                    retcode                   => retcode,
                                    retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          rollback;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
        
        END IF;
      
      elsif operate_type = 'UPDATE' then
        if l_apply_vendor.vendor_code is null then
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code ||
                             ';更新时供应商编码不能为空';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        else
          lcl_count := 0;
          select count(*), max(t.row_id), max(t.account_grp_code)
            into lcl_count, lcl_row_id, lcl_accountGrp
            from hm_vendors t
           where t.vendor_code = trim(l_apply_vendor.vendor_code);
          if (lcl_count = 0) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中不存在';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          elsif (lcl_count > 1) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中存在异常';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
        
          l_apply_vendor.row_id           := lcl_row_id;
          l_apply_vendor.account_grp_code := lcl_accountGrp;
        end if;
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_check_znyq2mdm_upd(v_hm_apply_vendor         => l_apply_vendor,
                                     v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                     v_hm_apply_vendor_company => t_apply_vendor_company,
                                     v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                     
                                     v_bank  => lcl_bank,
                                     v_base  => lcl_base,
                                     v_comp  => lcl_comp,
                                     v_pur   => lcl_pur,
                                     retcode => retcode,
                                     retmsg  => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          rollback;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
        
        END IF;
      elsif operate_type = 'EXTEND' then
        if l_apply_vendor.vendor_code is null then
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code ||
                             ';扩展时供应商编码不能为空';
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          RETURN;
        else
          lcl_count := 0;
          select count(*), max(t.row_id), max(t.for_gvs)
            into lcl_count, lcl_row_id, base_for_gvs
            from hm_vendors t
           where t.vendor_code = trim(l_apply_vendor.vendor_code);
          if (lcl_count = 0) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中不存在';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          elsif (lcl_count > 1) then
            retcode         := 'E';
            retmsg          := '供应商编码[' || l_apply_vendor.vendor_code ||
                               ']在MDM供应商主数据中存在异常';
            out_vendor_code := l_apply_vendor.vendor_code;
            out_row_id      := l_apply_vendor.row_id;
            out_tax_code    := l_apply_vendor.tax_code;
            RETURN;
          end if;
          --如果是传输SAP的需要修改基本信息状态
          if base_for_gvs = 1 then
            update hm_vendors t
               set t.last_version_flag = '2',
                   t.operate_status    = decode(t.operate_status,
                                                'CREATE',
                                                'CREATE',
                                                'UPDATE')
             where t.vendor_code = trim(l_apply_vendor.vendor_code);
          end if;
          --end
        
          l_apply_vendor.row_id := lcl_row_id;
        end if;
      
        ----字段有效性校验(是否必输，是否合法值，是否有业务闸口)
        prc_input_check_znyq2mdm_ext(v_hm_apply_vendor         => l_apply_vendor,
                                     v_hm_apply_vendor_bank    => t_apply_vendor_bank,
                                     v_hm_apply_vendor_company => t_apply_vendor_company,
                                     v_hm_apply_vendor_pur     => t_apply_vendor_pur,
                                     v_for_gvs                 => lcl_for_gvs,
                                     v_for_pur                 => lcl_for_pur,
                                     retcode                   => retcode,
                                     retmsg                    => retmsg);
        IF retcode = 'E' THEN
          insert_flag     := '1';
          retcode         := 'E';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
          rollback;
          RETURN;
        else
          retcode         := 'S';
          retmsg          := '税号:' || l_apply_vendor.tax_code || ';' ||
                             retmsg;
          out_vendor_code := l_apply_vendor.vendor_code;
          out_row_id      := l_apply_vendor.row_id;
          out_tax_code    := l_apply_vendor.tax_code;
        
        END IF;
      end if;
    end if;
    commit;
  exception
    when others then
      rollback;
      retcode := 'error';
      retmsg  := '数据库操作时出现异常';
  end prc_vdr_info_OUTERSYS2MDM_NEW;

  PROCEDURE prc_input_check_znyq2mdm_upd(v_hm_apply_vendor         IN OUT hm_apply_vendor%ROWTYPE,
                                         v_hm_apply_vendor_bank    IN OUT tab_apply_vendor_bank,
                                         v_hm_apply_vendor_company IN OUT tab_apply_vendor_company,
                                         v_hm_apply_vendor_pur     IN OUT tab_apply_vendor_pur,
                                         v_bank                    in varchar2,
                                         v_base                    in varchar2,
                                         v_comp                    in varchar2,
                                         v_pur                     in varchar2,
                                         retcode                   OUT VARCHAR2,
                                         retmsg                    OUT VARCHAR2) IS
  
    l_hm_apply_vendor      hm_apply_vendor%rowtype;
    l_hm_vendors           hm_vendors%rowtype;
    ls_fieldvalue          VARCHAR2(2000);
    ls_field_label_en      VARCHAR2(2000);
    v_apply_vendor_company hm_apply_vendor_company%rowtype;
    v_apply_vendor_bank    hm_apply_vendor_bank%rowtype;
    v_apply_vendor_pur     hm_apply_vendor_purchase%rowtype;
    out_mastercode         varchar2(50);
  
    c_count    integer := 0;
    b_count    integer := 0;
    bc_flag    integer := 0;
    pur_row_id varchar2(120);
    bbc_flag   integer := 0;
  
    v_BANK_NAME    varchar2(120);
    cmp_count      integer := 0;
    cmp_row_id     varchar2(100);
    cmp_suc_count  integer := 0;
    cmp_suc_pur    integer := 0;
    partner_row_id varchar2(100);
  BEGIN
    retcode := 'S';
    retmsg  := '更新供应商成功';
  
    l_hm_apply_vendor := v_hm_apply_vendor;
  
    if trim(l_hm_apply_vendor.region) is not null then
    
      comm_util.prc_getfndvalues('Region',
                                 l_hm_apply_vendor.region,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        retcode := 'E';
        retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                   l_hm_apply_vendor.region || ',this region not exist.';
        RETURN;
      END IF;
    end if;
  
    --公司字段是否必填
    if v_hm_apply_vendor_company.count is not null and v_comp='X' then
      for i in 1 .. v_hm_apply_vendor_company.count loop
        v_apply_vendor_company := v_hm_apply_vendor_company(i);
        if v_apply_vendor_company.company_code is null then
          retcode := 'E';
          retmsg  := '公司代码不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_company.reconcile_account is not null then
        
          --增加统奴科目验证
          comm_util.prc_getfndvalues('ReconcileAccount',
                                     v_apply_vendor_company.reconcile_account,
                                     'ReconcileAccount',
                                     'K',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.reconcile_account ||
                       ',this COMP_RECONCILE_ACCOUNT not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.sequence_no is not null then
        
          comm_util.prc_getfndvalues('OrderCode',
                                     v_apply_vendor_company.sequence_no,
                                     'OrderCode',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.sequence_no ||
                       ',The COMP_SEQUENCE_NO not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_term_company is not null then
        
          comm_util.prc_getfndvalues('PayTerm',
                                     v_apply_vendor_company.payment_term_company,
                                     'PayTerm',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_term_company ||
                       ',The COMP_PAYMENT_TERM_COMPANY not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_company.payment_method is not null then
        
          comm_util.prc_getfndvalues('PayMethod',
                                     v_apply_vendor_company.payment_method,
                                     'PayMethod',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_company.payment_method ||
                       ',The COMP_PAYMENT_METHOD not exist.';
            RETURN;
          END IF;
        end if;
      end loop;
    
    end if;
    --银行字段是否必填
    if v_hm_apply_vendor_bank.count is not null and v_bank = 'X'   then
      for i in 1 .. v_hm_apply_vendor_bank.count loop
        v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
        if v_apply_vendor_bank.account_holder_name is null then
          retcode := 'E';
          retmsg  := '银行账户不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_country is null then
          retcode := 'E';
          retmsg  := '国家不能为空!';
          RETURN;
        else
          comm_util.prc_getfndvalues('Country',
                                     v_apply_vendor_bank.bank_country,
                                     'Country',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_country ||
                       ',The Country not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_bank.bank_account_num is null then
          retcode := 'E';
          retmsg  := '银行户主不能为空!';
          RETURN;
        end if;
        if v_apply_vendor_bank.bank_branch_code is null then
          retcode := 'E';
          retmsg  := '银行码不能为空!';
          RETURN;
        else
          SELECT count(*)
            into bbc_flag
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          if bbc_flag = 0 then
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_bank.bank_branch_code ||
                       ',The bank_branch_code not exist.';
            RETURN;
          end if;
        end if;
      end loop;
    
    end if;
    --end
    --采购字段是否必填
    if v_hm_apply_vendor_pur.count is not null and v_pur='X'  then
      for i in 1 .. v_hm_apply_vendor_pur.count loop
        v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
        if v_apply_vendor_pur.order_currency is not null then
        
          comm_util.prc_getfndvalues('Currency',
                                     v_apply_vendor_pur.order_currency,
                                     'Currency',
                                     '',
                                     '',
                                     retcode,
                                     retmsg);
          IF retcode = 'E' THEN
            retcode := 'E';
            retmsg  := l_hm_apply_vendor.vendor_name || ':' ||
                       v_apply_vendor_pur.order_currency ||
                       ',The Order Currency not exist.';
            RETURN;
          END IF;
        end if;
        if v_apply_vendor_pur.purchase_grp_code is null then
          retcode := 'E';
          retmsg  := '采购组织不能为空!';
          RETURN;
        end if;
      
      end loop;
    
    end if;
    --end
    --检查字段逻辑是否合法性
    ----VENDOR_NAME------------------------------start
    l_hm_apply_vendor.VENDOR_NAME := trim(l_hm_apply_vendor.VENDOR_NAME);
    ls_fieldvalue                 := l_hm_apply_vendor.VENDOR_NAME;
    IF ls_fieldvalue IS NOT NULL THEN
      IF length(TRIM(ls_fieldvalue)) > 280 THEN
        retcode := 'E';
        retmsg  := ls_fieldvalue || '，供应商名称长度超过280!';
        RETURN;
      END IF;
    
    END IF;
    ----VENDOR_NAME------------------------------end
    ----COUNTRY
    l_hm_apply_vendor.country := upper(trim(l_hm_apply_vendor.COUNTRY));
    ls_fieldvalue             := l_hm_apply_vendor.COUNTRY;
    IF ls_fieldvalue IS NOT NULL THEN
    
      ls_field_label_en := '城市';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Country',
                                 '',
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----REGION
    l_hm_apply_vendor.REGION := upper(trim(l_hm_apply_vendor.REGION));
    ls_fieldvalue            := l_hm_apply_vendor.REGION;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      ls_field_label_en := '地区';
      comm_util.prc_getfndvalues(ls_field_label_en,
                                 ls_fieldvalue,
                                 'Region',
                                 l_hm_apply_vendor.country,
                                 '',
                                 retcode,
                                 retmsg);
      IF retcode = 'E' THEN
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----STREET
    l_hm_apply_vendor.street_room := trim(l_hm_apply_vendor.STREET_ROOM);
    ls_fieldvalue                 := l_hm_apply_vendor.STREET_ROOM;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 60 THEN
        retcode := 'E';
        retmsg  := '供应商的街道信息长度超过60!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----POSTAL_CODE_CITY
    l_hm_apply_vendor.POSTAL_CODE_CITY := trim(l_hm_apply_vendor.POSTAL_CODE_CITY);
    ls_fieldvalue                      := l_hm_apply_vendor.POSTAL_CODE_CITY;
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) <> 6 THEN
        retcode := 'E';
        retmsg  := '供应商的邮政编码信息长度不等于6!';
        RETURN;
      END IF;
      -----------------------------------------------
    END IF;
  
    ----TELEPHONE
    l_hm_apply_vendor.phone_number := upper(trim(l_hm_apply_vendor.PHONE_NUMBER));
    ls_fieldvalue                  := l_hm_apply_vendor.PHONE_NUMBER;
  
    IF ls_fieldvalue IS NOT NULL THEN
      -----------------------------------------------
      IF length(TRIM(ls_fieldvalue)) > 16 THEN
        retcode := 'E';
        retmsg  := '供应商电话信息长度超过16!';
        RETURN;
      END IF;
    
      -----------------------------------------------
    END IF;
  
    ----vendor name-------------------------------
    if l_hm_apply_vendor.VENDOR_NAME is not null then
      if l_hm_apply_vendor.account_grp_code <> '1600' then
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MAX(vendor_code) vendor_code,
                                MAX(create_apply_id) create_apply_id
                           FROM hm_vendors
                          WHERE VENDOR_NAME = l_hm_apply_vendor.VENDOR_NAME
                            and delete_flag = '0') LOOP
          IF cur_rows.rowscount > 0 THEN
            --name 已存在
            IF cur_rows.vendor_code <> l_hm_apply_vendor.vendor_code THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商名称 [' || l_hm_apply_vendor.VENDOR_NAME ||
                         '] 已经存在于主数据 [' || cur_rows.vendor_code || ']!';
              RETURN;
            END IF;
          END IF;
        END LOOP;
      end if;
    
      IF l_hm_apply_vendor.account_grp_code <> '1600' then
        FOR cur_rows IN (SELECT COUNT(*) rowscount,
                                MIN(a.apply_id) apply_id,
                                MIN(b.item_no) item_no
                           FROM hm_applys a, hm_apply_vendor b
                          WHERE a.apply_id = b.apply_id
                            AND b.VENDOR_NAME =
                                l_hm_apply_vendor.VENDOR_NAME
                            AND a.active_flag = '1'
                            AND a.delete_flag = '0'
                            and b.delete_flag = '0'
                               --AND a.audit_flag < '3'
                            AND a.business_code LIKE 'VDR-UPDATE%'
                               /*                                AND (b.apply_id <>
                               l_hm_apply_vendor.apply_id OR
                               l_hm_apply_vendor.apply_id is null)*/
                            AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
          IF cur_rows.rowscount > 0 THEN
            retcode := 'E';
            retmsg  := '创建业务时，供应商名称 [' || l_hm_apply_vendor.VENDOR_NAME ||
                       '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                       cur_rows.item_no || '] 中!';
            RETURN;
          END IF;
        END LOOP;
      END IF;
    end if;
    ----end --------------------------------------
    ----TAX_CODE------------------------------start
    l_hm_apply_vendor.tax_code := trim(l_hm_apply_vendor.tax_code);
    ls_fieldvalue              := l_hm_apply_vendor.tax_code;
    IF ls_fieldvalue IS NOT NULL THEN
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MIN(a.apply_id) apply_id,
                              MIN(b.item_no) item_no,
                              MIN(a.audit_flag) audit_flag
                         FROM hm_applys a, hm_apply_vendor b
                        WHERE a.apply_id = b.apply_id
                          AND b.tax_code = l_hm_apply_vendor.tax_code
                          AND a.active_flag = '1'
                          AND a.delete_flag = '0'
                          and b.delete_flag = '0'
                          AND a.business_code LIKE 'VDR-UPDATE%'
                          AND b.row_id <> l_hm_apply_vendor.row_id) LOOP
        IF cur_rows.rowscount > 0 THEN
          --cuiyj如果一个供应商建错 冻结主数据后将申请单封卷 再次申请时去掉名字已存在限制
          FOR cur_rows1 IN (SELECT COUNT(*) rowscount
                              FROM hm_vendors
                             WHERE tax_code = l_hm_apply_vendor.tax_code
                               and delete_flag = '0') LOOP
            IF not (cur_rows1.rowscount = 0 and cur_rows.audit_flag = '3') THEN
              retcode := 'E';
              retmsg  := '创建业务时，供应商税号 [' || l_hm_apply_vendor.tax_code ||
                         '] 已经存在于申请 [' || cur_rows.apply_id || '] 的明细行 [' ||
                         cur_rows.item_no || '] 中!';
              RETURN;
            END IF;
          END LOOP;
          --end
        
        END IF;
      END LOOP;
    
      FOR cur_rows IN (SELECT COUNT(*) rowscount,
                              MAX(row_id) row_id,
                              MAX(vendor_code) vendor_code,
                              MAX(create_apply_id) create_apply_id
                         FROM hm_vendors
                        WHERE tax_code = l_hm_apply_vendor.tax_code
                       /*and delete_flag = '0'*/
                       ) LOOP
        IF cur_rows.rowscount > 0 THEN
          if cur_rows.vendor_code <> l_hm_apply_vendor.vendor_code then
            retcode := 'E';
            retmsg  := '供应商编码[' || cur_rows.vendor_code || ']供应商税号 [' ||
                       l_hm_apply_vendor.tax_code || ']在主数据中已存在';
            RETURN;
          end if;
        END IF;
      END LOOP;
    END IF;
    --更新基本信息
    if v_base = 'X' then
      comm_util.copy_table_line('hm_vendors',
                                '',
                                '_HIS',
                                l_hm_apply_vendor.row_id,
                                retcode,
                                retmsg);
      update hm_vendors s
         set VENDOR_NAME         = decode(l_hm_apply_vendor.VENDOR_NAME,
                                          null,
                                          VENDOR_NAME,
                                          l_hm_apply_vendor.VENDOR_NAME),
             TAX_CODE            = decode(l_hm_apply_vendor.TAX_CODE,
                                          null,
                                          TAX_CODE,
                                          l_hm_apply_vendor.TAX_CODE),
             STREET_ROOM         = decode(l_hm_apply_vendor.STREET_ROOM,
                                          null,
                                          STREET_ROOM,
                                          l_hm_apply_vendor.STREET_ROOM),
             POSTAL_CODE_CITY    = decode(l_hm_apply_vendor.POSTAL_CODE_CITY,
                                          null,
                                          POSTAL_CODE_CITY,
                                          l_hm_apply_vendor.POSTAL_CODE_CITY),
             COUNTRY             = decode(l_hm_apply_vendor.COUNTRY,
                                          null,
                                          COUNTRY,
                                          l_hm_apply_vendor.COUNTRY),
             REGION              = decode(l_hm_apply_vendor.REGION,
                                          null,
                                          REGION,
                                          l_hm_apply_vendor.REGION),
             PHONE_NUMBER        = decode(l_hm_apply_vendor.PHONE_NUMBER,
                                          null,
                                          PHONE_NUMBER,
                                          l_hm_apply_vendor.PHONE_NUMBER),
             last_upd            = sysdate,
             last_upd_by         = l_hm_apply_vendor.created_by,
             s.last_version_flag = '2',
             s.operate_status    = decode(s.operate_status,
                                          'CREATE',
                                          'CREATE',
                                          'UPDATE')
       where vendor_code = l_hm_apply_vendor.vendor_code
         and s.delete_flag = '0';
    
    end if;
    --更新银行信息
    if v_bank = 'X'  then
      if v_hm_apply_vendor_bank.count is not null then
        --更新的时候判断是否符合
      
        --将银行信息删除
        FOR cur_rows IN (select h.row_id row_id
                           from hm_vendor_bank_accounts h
                          where h.vendor_id in
                                (select ss.row_id
                                   from hm_vendors ss
                                  where ss.vendor_code =
                                        l_hm_apply_vendor.vendor_code)
                            and h.delete_flag = '0') LOOP
          comm_util.copy_table_line('hm_vendor_bank_accounts',
                                    '',
                                    '_HIS',
                                    cur_rows.row_id,
                                    retcode,
                                    retmsg);
          update hm_vendor_bank_accounts s
             set s.delete_flag = '1'
           where s.row_id = cur_rows.row_id;
        end loop;
        --end              
      
        for i in 1 .. v_hm_apply_vendor_bank.count loop
          v_apply_vendor_bank := v_hm_apply_vendor_bank(i);
          --获取银行名称
          SELECT BANK_NAME
            into v_BANK_NAME
            FROM hm_banks
           WHERE 1 = 1
             and delete_flag = '0'
             and bank_country = v_apply_vendor_bank.bank_country
             and length(bank_branch_code) = 12
             and substr(bank_branch_code, 0, 1) not in ('9', 'Y')
             and bank_branch_code = v_apply_vendor_bank.bank_branch_code;
          --end   
          insert into hm_vendor_bank_accounts
            (row_id,
             vendor_id,
             account_holder_name,
             bank_country,
             bank_account_num,
             bank_branch_code,
             created_by,
             last_upd_by,
             created,
             last_upd,
             for_gvs,
             last_version_flag,
             operate_status,
             active_range,
             bank_name)
          values
            (comm_util.FUNC_NEW_ROWID(),
             l_hm_apply_vendor.row_id,
             v_apply_vendor_bank.account_holder_name,
             v_apply_vendor_bank.bank_country,
             '1',
             v_apply_vendor_bank.bank_branch_code,
             l_hm_apply_vendor.created_by,
             l_hm_apply_vendor.created_by,
             sysdate,
             sysdate,
             '1',
             '1',
             'NVL',
             'ALL',
             v_BANK_NAME);
        end loop;
      
        update hm_vendors t
           set last_version_flag = decode(for_gvs,
                                          '1',
                                          '2',
                                          last_version_flag),
               operate_status    = decode(for_gvs,
                                          '1',
                                          decode(operate_status,
                                                 'CREATE',
                                                 'CREATE',
                                                 'UPDATE'),
                                          operate_status)
         where row_id = l_hm_apply_vendor.row_id;
      end if;
    end if;
    --更新公司信息
    if v_comp = 'X' then
      cmp_suc_count := 0;
      if v_hm_apply_vendor_company.count is not null then
        for i in 1 .. v_hm_apply_vendor_company.count loop
          v_apply_vendor_company := v_hm_apply_vendor_company(i);
          select count(1), max(a.row_id)
            into cmp_count, cmp_row_id
            from hm_vendor_company_data a
           where a.vendor_id = l_hm_apply_vendor.row_id
             and a.company_code = v_apply_vendor_company.company_code
             and a.delete_flag = '0';
          if cmp_count = 1 then
            comm_util.copy_table_line('hm_vendor_company_data',
                                      '',
                                      '_HIS',
                                      cmp_row_id,
                                      retcode,
                                      retmsg);
            update hm_vendor_company_data s
               set RECONCILE_ACCOUNT   = decode(v_apply_vendor_company.reconcile_account,
                                                null,
                                                RECONCILE_ACCOUNT,
                                                v_apply_vendor_company.reconcile_account),
                   SEQUENCE_NO         = decode(v_apply_vendor_company.SEQUENCE_NO,
                                                null,
                                                SEQUENCE_NO,
                                                v_apply_vendor_company.SEQUENCE_NO),
                   PAYMENT_TERM        = decode(v_apply_vendor_company.payment_term_company,
                                                null,
                                                PAYMENT_TERM,
                                                v_apply_vendor_company.payment_term_company),
                   PAYMENT_METHOD      = decode(v_apply_vendor_company.PAYMENT_METHOD,
                                                null,
                                                PAYMENT_METHOD,
                                                v_apply_vendor_company.PAYMENT_METHOD),
                   last_upd            = sysdate,
                   last_upd_by         = l_hm_apply_vendor.created_by,
                   s.last_version_flag = '2',
                   s.operate_status    = decode(s.operate_status,
                                                'CREATE',
                                                'CREATE',
                                                'UPDATE')
             where s.row_id = cmp_row_id
               and s.company_code = v_apply_vendor_company.company_code
               and s.delete_flag = '0';
          
            cmp_suc_count := cmp_suc_count + 1;
          end if;
        end loop;
        if cmp_suc_count > 0 then
          update hm_vendors t
             set last_version_flag = decode(for_gvs,
                                            '1',
                                            '2',
                                            last_version_flag),
                 operate_status    = decode(for_gvs,
                                            '1',
                                            decode(operate_status,
                                                   'CREATE',
                                                   'CREATE',
                                                   'UPDATE'),
                                            operate_status)
           where row_id = l_hm_apply_vendor.row_id;
        end if;
      end if;
    end if;
    --更新采购信息
    if v_pur = 'X' then
      cmp_suc_pur := 0;
      if v_hm_apply_vendor_pur.count is not null then
        for i in 1 .. v_hm_apply_vendor_pur.count loop
          v_apply_vendor_pur := v_hm_apply_vendor_pur(i);
          select count(1), max(a.row_id)
            into cmp_count, cmp_row_id
            from hm_vendor_pur_data a
           where a.vendor_id = l_hm_apply_vendor.row_id
             and a.purchase_grp_code = v_apply_vendor_pur.purchase_grp_code
             and a.delete_flag = '0';
          if cmp_count = 1 then
            comm_util.copy_table_line('hm_vendor_pur_data',
                                      '',
                                      '_HIS',
                                      cmp_row_id,
                                      retcode,
                                      retmsg);
            update hm_vendor_pur_data s
               set ORDER_CURRENCY      = decode(v_apply_vendor_pur.order_currency,
                                                null,
                                                ORDER_CURRENCY,
                                                v_apply_vendor_pur.order_currency),
                   last_upd            = sysdate,
                   last_upd_by         = l_hm_apply_vendor.created_by,
                   s.last_version_flag = '2',
                   s.operate_status    = decode(s.operate_status,
                                                'CREATE',
                                                'CREATE',
                                                'UPDATE')
             where s.row_id = cmp_row_id
               and s.purchase_grp_code =
                   v_apply_vendor_pur.purchase_grp_code
               and s.delete_flag = '0';
          
            if v_apply_vendor_pur.partner_pi is not null then
              select t.row_id
                into partner_row_id
                from hm_vendor_partners t
               where t.pur_grp_id = cmp_row_id
                 and t.partner_function = 'PI'
                 and t.delete_flag = '0';
              comm_util.copy_table_line('hm_vendor_partners',
                                        '',
                                        '_HIS',
                                        partner_row_id,
                                        retcode,
                                        retmsg);
              update hm_vendor_partners e
                 set partner_subject_id = decode(v_apply_vendor_pur.partner_pi,
                                                 null,
                                                 partner_subject_id,
                                                 v_apply_vendor_pur.partner_pi)
               where e.pur_grp_id = cmp_row_id
                 and e.partner_function = 'PI'
                 and e.delete_flag = '0';
            
            end if;
            cmp_suc_pur := cmp_suc_pur + 1;
          end if;
        end loop;
        if cmp_suc_pur > 0 then
          update hm_vendors t
             set last_version_flag = decode(for_gvs,
                                            '1',
                                            '2',
                                            last_version_flag),
                 operate_status    = decode(for_gvs,
                                            '1',
                                            decode(operate_status,
                                                   'CREATE',
                                                   'CREATE',
                                                   'UPDATE'),
                                            operate_status)
           where row_id = l_hm_apply_vendor.row_id;
        end if;
      end if;
    end if;
  EXCEPTION
    WHEN OTHERS THEN
      retcode := 'E';
      retmsg  := chr(10) || '[' || comm_util.f_get_current_procname || ']:' ||
                 SQLERRM || chr(10) || 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
  END prc_input_check_znyq2mdm_upd;
  PROCEDURE prc_company_tax_trans(in_user_name             IN VARCHAR2,
                                  l_apply_vendor_company   IN OUT hm_apply_vendor_company%ROWTYPE,
                                  l_hm_VENDOR_company_data IN OUT hm_VENDOR_company_data%ROWTYPE,
                                  retcode                  OUT VARCHAR2,
                                  retmsg                   OUT VARCHAR2) is
    l_hm_vendor_withholding_tax hm_vendor_withholding_tax%rowtype;
    lcl_count                   integer;
    lcl_all_count               integer;
  
  begin
    ---限定6600印度公司拥有此逻辑
    if l_hm_VENDOR_company_data.Company_Code != '6600' then
      retcode := 'S';
      retmsg  := 'OK';
      return;
    end if;
    --查询是否有预扣税视图
  
    select count(*)
      into lcl_all_count
      from hm_vendor_withholding_tax w
     where w.company_id = l_hm_VENDOR_company_data.Row_Id;
    ---如果更新的税视图字段没有值，则删除税视图数据
    if l_apply_vendor_company.qsrec is null and
       l_apply_vendor_company.wt_withcd is null and
      -- l_apply_vendor_company.wt_subjct is null and
       l_apply_vendor_company.witht is null then
      if lcl_all_count > 0 then
        retcode := 'E';
        retmsg  := '已存在预扣税信息，预扣税信息不能维护为空  info：vendor_apply.prc_company_tax_trans';
        return;
      end if;
    else
      ---如果数量是1就更新 其他的都是先删后加
      if lcl_all_count > 0 then
        insert into hm_vendor_withholding_tax_his
          select *
            from hm_vendor_withholding_tax w
           where w.company_id = l_hm_VENDOR_company_data.Row_Id;
      
        update hm_vendor_withholding_tax w
           set w.witht       = l_apply_vendor_company.witht,
               w.wt_subjct   = l_apply_vendor_company.wt_subjct,
               w.wt_withcd   = l_apply_vendor_company.wt_withcd,
               w.qsrec       = l_apply_vendor_company.qsrec,
               w.last_upd_by = in_user_name,
               w.delete_flag = '0',
               w.active_flag = '1',
               w.last_upd    = sysdate
         where w.company_id = l_hm_VENDOR_company_data.Row_Id;
      else
      
        l_hm_vendor_withholding_tax.row_id            := comm_util.FUNC_NEW_ROWID;
        l_hm_vendor_withholding_tax.company_id        := l_hm_VENDOR_company_data.Row_Id;
        l_hm_vendor_withholding_tax.witht             := l_apply_vendor_company.witht;
        l_hm_vendor_withholding_tax.wt_subjct         := l_apply_vendor_company.wt_subjct;
        l_hm_vendor_withholding_tax.qsrec             := l_apply_vendor_company.qsrec;
        l_hm_vendor_withholding_tax.wt_withcd         := l_apply_vendor_company.wt_withcd;
        l_hm_vendor_withholding_tax.created_by        := in_user_name;
        l_hm_vendor_withholding_tax.created           := sysdate;
        l_hm_vendor_withholding_tax.last_upd_by       := in_user_name;
        l_hm_vendor_withholding_tax.last_upd          := sysdate;
        l_hm_vendor_withholding_tax.delete_flag       := '0';
        l_hm_vendor_withholding_tax.lock_flag         := '0';
        l_hm_vendor_withholding_tax.active_flag       := '1';
        l_hm_vendor_withholding_tax.last_version_flag := '2';
        l_hm_vendor_withholding_tax.operate_status    := 'CREATE';
        l_hm_vendor_withholding_tax.for_gvs           := '1';
        l_hm_vendor_withholding_tax.action_batch_id   := l_hm_VENDOR_company_data.Action_Batch_Id;
        l_hm_vendor_withholding_tax.remark            := ' 申请单生成';
        insert into hm_vendor_withholding_tax
        values l_hm_vendor_withholding_tax;
      end if;
    end if;
  exception
    when others then
      rollback;
      retcode := 'E';
      retmsg  := '转化预扣税 数据库操作时出现异常' || SQLERRM || chr(10) ||
                 'AT SOURCE LINE:' || chr(10) ||
                 comm_util.sys_get_error_source(dbms_utility.format_error_backtrace,
                                                0);
      rollback;
  end prc_company_tax_trans;
END;
